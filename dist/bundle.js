/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={8552:(t,e,n)=>{var r=n(852)(n(5639),"DataView");t.exports=r},1989:(t,e,n)=>{var r=n(1789),i=n(401),o=n(7667),a=n(1327),s=n(1866);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,t.exports=l},8407:(t,e,n)=>{var r=n(7040),i=n(4125),o=n(2117),a=n(7518),s=n(4705);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,t.exports=l},7071:(t,e,n)=>{var r=n(852)(n(5639),"Map");t.exports=r},3369:(t,e,n)=>{var r=n(4785),i=n(1285),o=n(6e3),a=n(9916),s=n(5265);function l(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,t.exports=l},3818:(t,e,n)=>{var r=n(852)(n(5639),"Promise");t.exports=r},8525:(t,e,n)=>{var r=n(852)(n(5639),"Set");t.exports=r},8668:(t,e,n)=>{var r=n(3369),i=n(619),o=n(2385);function a(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new r;++e<n;)this.add(t[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,t.exports=a},6384:(t,e,n)=>{var r=n(8407),i=n(7465),o=n(3779),a=n(7599),s=n(4758),l=n(4309);function c(t){var e=this.__data__=new r(t);this.size=e.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=s,c.prototype.set=l,t.exports=c},2705:(t,e,n)=>{var r=n(5639).Symbol;t.exports=r},1149:(t,e,n)=>{var r=n(5639).Uint8Array;t.exports=r},577:(t,e,n)=>{var r=n(852)(n(5639),"WeakMap");t.exports=r},6874:t=>{t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},4963:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}},4636:(t,e,n)=>{var r=n(2545),i=n(5694),o=n(1469),a=n(4144),s=n(5776),l=n(6719),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=o(t),u=!n&&i(t),d=!n&&!u&&a(t),f=!n&&!u&&!d&&l(t),h=n||u||d||f,p=h?r(t.length,String):[],g=p.length;for(var m in t)!e&&!c.call(t,m)||h&&("length"==m||d&&("offset"==m||"parent"==m)||f&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||s(m,g))||p.push(m);return p}},9932:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},2488:t=>{t.exports=function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}},2908:t=>{t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},6556:(t,e,n)=>{var r=n(9465),i=n(7813);t.exports=function(t,e,n){(void 0!==n&&!i(t[e],n)||void 0===n&&!(e in t))&&r(t,e,n)}},4865:(t,e,n)=>{var r=n(9465),i=n(7813),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var a=t[e];o.call(t,e)&&i(a,n)&&(void 0!==n||e in t)||r(t,e,n)}},8470:(t,e,n)=>{var r=n(7813);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},9465:(t,e,n)=>{var r=n(8777);t.exports=function(t,e,n){"__proto__"==e&&r?r(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},3118:(t,e,n)=>{var r=n(3218),i=Object.create,o=function(){function t(){}return function(e){if(!r(e))return{};if(i)return i(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=o},1848:t=>{t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},8483:(t,e,n)=>{var r=n(5063)();t.exports=r},7786:(t,e,n)=>{var r=n(1811),i=n(327);t.exports=function(t,e){for(var n=0,o=(e=r(e,t)).length;null!=t&&n<o;)t=t[i(e[n++])];return n&&n==o?t:void 0}},8866:(t,e,n)=>{var r=n(2488),i=n(1469);t.exports=function(t,e,n){var o=e(t);return i(t)?o:r(o,n(t))}},4239:(t,e,n)=>{var r=n(2705),i=n(9607),o=n(2333),a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":a&&a in Object(t)?i(t):o(t)}},13:t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},9454:(t,e,n)=>{var r=n(4239),i=n(7005);t.exports=function(t){return i(t)&&"[object Arguments]"==r(t)}},939:(t,e,n)=>{var r=n(1299),i=n(7005);t.exports=function t(e,n,o,a,s){return e===n||(null==e||null==n||!i(e)&&!i(n)?e!=e&&n!=n:r(e,n,o,a,t,s))}},1299:(t,e,n)=>{var r=n(6384),i=n(7114),o=n(8351),a=n(6096),s=n(4160),l=n(1469),c=n(4144),u=n(6719),d="[object Arguments]",f="[object Array]",h="[object Object]",p=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,g,m,b){var v=l(t),y=l(e),x=v?f:s(t),_=y?f:s(e),w=(x=x==d?h:x)==h,k=(_=_==d?h:_)==h,S=x==_;if(S&&c(t)){if(!c(e))return!1;v=!0,w=!1}if(S&&!w)return b||(b=new r),v||u(t)?i(t,e,n,g,m,b):o(t,e,x,n,g,m,b);if(!(1&n)){var M=w&&p.call(t,"__wrapped__"),E=k&&p.call(e,"__wrapped__");if(M||E){var C=M?t.value():t,P=E?e.value():e;return b||(b=new r),m(C,P,n,g,b)}}return!!S&&(b||(b=new r),a(t,e,n,g,m,b))}},2958:(t,e,n)=>{var r=n(6384),i=n(939);t.exports=function(t,e,n,o){var a=n.length,s=a,l=!o;if(null==t)return!s;for(t=Object(t);a--;){var c=n[a];if(l&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++a<s;){var u=(c=n[a])[0],d=t[u],f=c[1];if(l&&c[2]){if(void 0===d&&!(u in t))return!1}else{var h=new r;if(o)var p=o(d,f,u,t,e,h);if(!(void 0===p?i(f,d,3,o,h):p))return!1}}return!0}},8458:(t,e,n)=>{var r=n(3560),i=n(5346),o=n(3218),a=n(346),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,f=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?f:s).test(a(t))}},8749:(t,e,n)=>{var r=n(4239),i=n(1780),o=n(7005),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!a[r(t)]}},7206:(t,e,n)=>{var r=n(1573),i=n(6432),o=n(6557),a=n(1469),s=n(9601);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?a(t)?i(t[0],t[1]):r(t):s(t)}},280:(t,e,n)=>{var r=n(5726),i=n(6916),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=[];for(var n in Object(t))o.call(t,n)&&"constructor"!=n&&e.push(n);return e}},313:(t,e,n)=>{var r=n(3218),i=n(5726),o=n(3498),a=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=i(t),n=[];for(var s in t)("constructor"!=s||!e&&a.call(t,s))&&n.push(s);return n}},1573:(t,e,n)=>{var r=n(2958),i=n(1499),o=n(2634);t.exports=function(t){var e=i(t);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(n){return n===t||r(n,t,e)}}},6432:(t,e,n)=>{var r=n(939),i=n(7361),o=n(9095),a=n(5403),s=n(9162),l=n(2634),c=n(327);t.exports=function(t,e){return a(t)&&s(e)?l(c(t),e):function(n){var a=i(n,t);return void 0===a&&a===e?o(n,t):r(e,a,3)}}},2980:(t,e,n)=>{var r=n(6384),i=n(6556),o=n(8483),a=n(9783),s=n(3218),l=n(1704),c=n(6390);t.exports=function t(e,n,u,d,f){e!==n&&o(n,(function(o,l){if(f||(f=new r),s(o))a(e,n,l,u,t,d,f);else{var h=d?d(c(e,l),o,l+"",e,n,f):void 0;void 0===h&&(h=o),i(e,l,h)}}),l)}},9783:(t,e,n)=>{var r=n(6556),i=n(4626),o=n(7133),a=n(278),s=n(8517),l=n(5694),c=n(1469),u=n(9246),d=n(4144),f=n(3560),h=n(3218),p=n(8630),g=n(6719),m=n(6390),b=n(9881);t.exports=function(t,e,n,v,y,x,_){var w=m(t,n),k=m(e,n),S=_.get(k);if(S)r(t,n,S);else{var M=x?x(w,k,n+"",t,e,_):void 0,E=void 0===M;if(E){var C=c(k),P=!C&&d(k),O=!C&&!P&&g(k);M=k,C||P||O?c(w)?M=w:u(w)?M=a(w):P?(E=!1,M=i(k,!0)):O?(E=!1,M=o(k,!0)):M=[]:p(k)||l(k)?(M=w,l(w)?M=b(w):h(w)&&!f(w)||(M=s(k))):E=!1}E&&(_.set(k,M),y(M,k,v,x,_),_.delete(k)),r(t,n,M)}}},371:t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},9152:(t,e,n)=>{var r=n(7786);t.exports=function(t){return function(e){return r(e,t)}}},5976:(t,e,n)=>{var r=n(6557),i=n(5357),o=n(61);t.exports=function(t,e){return o(i(t,e,r),t+"")}},6560:(t,e,n)=>{var r=n(5703),i=n(8777),o=n(6557),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=a},2545:t=>{t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},531:(t,e,n)=>{var r=n(2705),i=n(9932),o=n(1469),a=n(3448),s=r?r.prototype:void 0,l=s?s.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(o(e))return i(e,t)+"";if(a(e))return l?l.call(e):"";var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},7561:(t,e,n)=>{var r=n(7990),i=/^\s+/;t.exports=function(t){return t?t.slice(0,r(t)+1).replace(i,""):t}},1717:t=>{t.exports=function(t){return function(e){return t(e)}}},4757:t=>{t.exports=function(t,e){return t.has(e)}},1811:(t,e,n)=>{var r=n(1469),i=n(5403),o=n(5514),a=n(9833);t.exports=function(t,e){return r(t)?t:i(t,e)?[t]:o(a(t))}},4318:(t,e,n)=>{var r=n(1149);t.exports=function(t){var e=new t.constructor(t.byteLength);return new r(e).set(new r(t)),e}},4626:(t,e,n)=>{t=n.nmd(t);var r=n(5639),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,a=o&&o.exports===i?r.Buffer:void 0,s=a?a.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,r=s?s(n):new t.constructor(n);return t.copy(r),r}},7133:(t,e,n)=>{var r=n(4318);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},278:t=>{t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},8363:(t,e,n)=>{var r=n(4865),i=n(9465);t.exports=function(t,e,n,o){var a=!n;n||(n={});for(var s=-1,l=e.length;++s<l;){var c=e[s],u=o?o(n[c],t[c],c,n,t):void 0;void 0===u&&(u=t[c]),a?i(n,c,u):r(n,c,u)}return n}},4429:(t,e,n)=>{var r=n(5639)["__core-js_shared__"];t.exports=r},1463:(t,e,n)=>{var r=n(5976),i=n(6612);t.exports=function(t){return r((function(e,n){var r=-1,o=n.length,a=o>1?n[o-1]:void 0,s=o>2?n[2]:void 0;for(a=t.length>3&&"function"==typeof a?(o--,a):void 0,s&&i(n[0],n[1],s)&&(a=o<3?void 0:a,o=1),e=Object(e);++r<o;){var l=n[r];l&&t(e,l,r,a)}return e}))}},5063:t=>{t.exports=function(t){return function(e,n,r){for(var i=-1,o=Object(e),a=r(e),s=a.length;s--;){var l=a[t?s:++i];if(!1===n(o[l],l,o))break}return e}}},7740:(t,e,n)=>{var r=n(7206),i=n(8612),o=n(3674);t.exports=function(t){return function(e,n,a){var s=Object(e);if(!i(e)){var l=r(n,3);e=o(e),n=function(t){return l(s[t],t,s)}}var c=t(e,n,a);return c>-1?s[l?e[c]:c]:void 0}}},8777:(t,e,n)=>{var r=n(852),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},7114:(t,e,n)=>{var r=n(8668),i=n(2908),o=n(4757);t.exports=function(t,e,n,a,s,l){var c=1&n,u=t.length,d=e.length;if(u!=d&&!(c&&d>u))return!1;var f=l.get(t),h=l.get(e);if(f&&h)return f==e&&h==t;var p=-1,g=!0,m=2&n?new r:void 0;for(l.set(t,e),l.set(e,t);++p<u;){var b=t[p],v=e[p];if(a)var y=c?a(v,b,p,e,t,l):a(b,v,p,t,e,l);if(void 0!==y){if(y)continue;g=!1;break}if(m){if(!i(e,(function(t,e){if(!o(m,e)&&(b===t||s(b,t,n,a,l)))return m.push(e)}))){g=!1;break}}else if(b!==v&&!s(b,v,n,a,l)){g=!1;break}}return l.delete(t),l.delete(e),g}},8351:(t,e,n)=>{var r=n(2705),i=n(1149),o=n(7813),a=n(7114),s=n(8776),l=n(1814),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;t.exports=function(t,e,n,r,c,d,f){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!d(new i(t),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var h=s;case"[object Set]":var p=1&r;if(h||(h=l),t.size!=e.size&&!p)return!1;var g=f.get(t);if(g)return g==e;r|=2,f.set(t,e);var m=a(h(t),h(e),r,c,d,f);return f.delete(t),m;case"[object Symbol]":if(u)return u.call(t)==u.call(e)}return!1}},6096:(t,e,n)=>{var r=n(8234),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,o,a,s){var l=1&n,c=r(t),u=c.length;if(u!=r(e).length&&!l)return!1;for(var d=u;d--;){var f=c[d];if(!(l?f in e:i.call(e,f)))return!1}var h=s.get(t),p=s.get(e);if(h&&p)return h==e&&p==t;var g=!0;s.set(t,e),s.set(e,t);for(var m=l;++d<u;){var b=t[f=c[d]],v=e[f];if(o)var y=l?o(v,b,f,e,t,s):o(b,v,f,t,e,s);if(!(void 0===y?b===v||a(b,v,n,o,s):y)){g=!1;break}m||(m="constructor"==f)}if(g&&!m){var x=t.constructor,_=e.constructor;x==_||!("constructor"in t)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(g=!1)}return s.delete(t),s.delete(e),g}},1957:(t,e,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;t.exports=r},8234:(t,e,n)=>{var r=n(8866),i=n(9551),o=n(3674);t.exports=function(t){return r(t,o,i)}},5050:(t,e,n)=>{var r=n(7019);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},1499:(t,e,n)=>{var r=n(9162),i=n(3674);t.exports=function(t){for(var e=i(t),n=e.length;n--;){var o=e[n],a=t[o];e[n]=[o,a,r(a)]}return e}},852:(t,e,n)=>{var r=n(8458),i=n(7801);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},5924:(t,e,n)=>{var r=n(5569)(Object.getPrototypeOf,Object);t.exports=r},9607:(t,e,n)=>{var r=n(2705),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,s=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,s),n=t[s];try{t[s]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[s]=n:delete t[s]),i}},9551:(t,e,n)=>{var r=n(4963),i=n(479),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(t){return null==t?[]:(t=Object(t),r(a(t),(function(e){return o.call(t,e)})))}:i;t.exports=s},4160:(t,e,n)=>{var r=n(8552),i=n(7071),o=n(3818),a=n(8525),s=n(577),l=n(4239),c=n(346),u="[object Map]",d="[object Promise]",f="[object Set]",h="[object WeakMap]",p="[object DataView]",g=c(r),m=c(i),b=c(o),v=c(a),y=c(s),x=l;(r&&x(new r(new ArrayBuffer(1)))!=p||i&&x(new i)!=u||o&&x(o.resolve())!=d||a&&x(new a)!=f||s&&x(new s)!=h)&&(x=function(t){var e=l(t),n="[object Object]"==e?t.constructor:void 0,r=n?c(n):"";if(r)switch(r){case g:return p;case m:return u;case b:return d;case v:return f;case y:return h}return e}),t.exports=x},7801:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},222:(t,e,n)=>{var r=n(1811),i=n(5694),o=n(1469),a=n(5776),s=n(1780),l=n(327);t.exports=function(t,e,n){for(var c=-1,u=(e=r(e,t)).length,d=!1;++c<u;){var f=l(e[c]);if(!(d=null!=t&&n(t,f)))break;t=t[f]}return d||++c!=u?d:!!(u=null==t?0:t.length)&&s(u)&&a(f,u)&&(o(t)||i(t))}},1789:(t,e,n)=>{var r=n(4536);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7667:(t,e,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(e,t)?e[t]:void 0}},1327:(t,e,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:i.call(e,t)}},1866:(t,e,n)=>{var r=n(4536);t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},8517:(t,e,n)=>{var r=n(3118),i=n(5924),o=n(5726);t.exports=function(t){return"function"!=typeof t.constructor||o(t)?{}:r(i(t))}},5776:t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var r=typeof t;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&e.test(t))&&t>-1&&t%1==0&&t<n}},6612:(t,e,n)=>{var r=n(7813),i=n(8612),o=n(5776),a=n(3218);t.exports=function(t,e,n){if(!a(n))return!1;var s=typeof e;return!!("number"==s?i(n)&&o(e,n.length):"string"==s&&e in n)&&r(n[e],t)}},5403:(t,e,n)=>{var r=n(1469),i=n(3448),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!i(t))||a.test(t)||!o.test(t)||null!=e&&t in Object(e)}},7019:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5346:(t,e,n)=>{var r,i=n(4429),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},5726:t=>{var e=Object.prototype;t.exports=function(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||e)}},9162:(t,e,n)=>{var r=n(3218);t.exports=function(t){return t==t&&!r(t)}},7040:t=>{t.exports=function(){this.__data__=[],this.size=0}},4125:(t,e,n)=>{var r=n(8470),i=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0||(n==e.length-1?e.pop():i.call(e,n,1),--this.size,0))}},2117:(t,e,n)=>{var r=n(8470);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},7518:(t,e,n)=>{var r=n(8470);t.exports=function(t){return r(this.__data__,t)>-1}},4705:(t,e,n)=>{var r=n(8470);t.exports=function(t,e){var n=this.__data__,i=r(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this}},4785:(t,e,n)=>{var r=n(1989),i=n(8407),o=n(7071);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},1285:(t,e,n)=>{var r=n(5050);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},6e3:(t,e,n)=>{var r=n(5050);t.exports=function(t){return r(this,t).get(t)}},9916:(t,e,n)=>{var r=n(5050);t.exports=function(t){return r(this,t).has(t)}},5265:(t,e,n)=>{var r=n(5050);t.exports=function(t,e){var n=r(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this}},8776:t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}},2634:t=>{t.exports=function(t,e){return function(n){return null!=n&&n[t]===e&&(void 0!==e||t in Object(n))}}},4523:(t,e,n)=>{var r=n(8306);t.exports=function(t){var e=r(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}},4536:(t,e,n)=>{var r=n(852)(Object,"create");t.exports=r},6916:(t,e,n)=>{var r=n(5569)(Object.keys,Object);t.exports=r},3498:t=>{t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},1167:(t,e,n)=>{t=n.nmd(t);var r=n(1957),i=e&&!e.nodeType&&e,o=i&&t&&!t.nodeType&&t,a=o&&o.exports===i&&r.process,s=function(){try{return o&&o.require&&o.require("util").types||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=s},2333:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},5569:t=>{t.exports=function(t,e){return function(n){return t(e(n))}}},5357:(t,e,n)=>{var r=n(6874),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,a=-1,s=i(o.length-e,0),l=Array(s);++a<s;)l[a]=o[e+a];a=-1;for(var c=Array(e+1);++a<e;)c[a]=o[a];return c[e]=n(l),r(t,this,c)}}},5639:(t,e,n)=>{var r=n(1957),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},6390:t=>{t.exports=function(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}},619:t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},2385:t=>{t.exports=function(t){return this.__data__.has(t)}},1814:t=>{t.exports=function(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}},61:(t,e,n)=>{var r=n(6560),i=n(1275)(r);t.exports=i},1275:t=>{var e=Date.now;t.exports=function(t){var n=0,r=0;return function(){var i=e(),o=16-(i-r);if(r=i,o>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}},7465:(t,e,n)=>{var r=n(8407);t.exports=function(){this.__data__=new r,this.size=0}},3779:t=>{t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},7599:t=>{t.exports=function(t){return this.__data__.get(t)}},4758:t=>{t.exports=function(t){return this.__data__.has(t)}},4309:(t,e,n)=>{var r=n(8407),i=n(7071),o=n(3369);t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([t,e]),this.size=++n.size,this;n=this.__data__=new o(a)}return n.set(t,e),this.size=n.size,this}},5514:(t,e,n)=>{var r=n(4523),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(i,(function(t,n,r,i){e.push(r?i.replace(o,"$1"):n||t)})),e}));t.exports=a},327:(t,e,n)=>{var r=n(3448);t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},346:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},7990:t=>{var e=/\s/;t.exports=function(t){for(var n=t.length;n--&&e.test(t.charAt(n)););return n}},8583:(t,e,n)=>{var r=n(4865),i=n(8363),o=n(1463),a=n(8612),s=n(5726),l=n(3674),c=Object.prototype.hasOwnProperty,u=o((function(t,e){if(s(e)||a(e))i(e,l(e),t);else for(var n in e)c.call(e,n)&&r(t,n,e[n])}));t.exports=u},5703:t=>{t.exports=function(t){return function(){return t}}},7813:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},3311:(t,e,n)=>{var r=n(7740)(n(998));t.exports=r},998:(t,e,n)=>{var r=n(1848),i=n(7206),o=n(554),a=Math.max;t.exports=function(t,e,n){var s=null==t?0:t.length;if(!s)return-1;var l=null==n?0:o(n);return l<0&&(l=a(s+l,0)),r(t,i(e,3),l)}},7361:(t,e,n)=>{var r=n(7786);t.exports=function(t,e,n){var i=null==t?void 0:r(t,e);return void 0===i?n:i}},9095:(t,e,n)=>{var r=n(13),i=n(222);t.exports=function(t,e){return null!=t&&i(t,e,r)}},6557:t=>{t.exports=function(t){return t}},5694:(t,e,n)=>{var r=n(9454),i=n(7005),o=Object.prototype,a=o.hasOwnProperty,s=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(t){return i(t)&&a.call(t,"callee")&&!s.call(t,"callee")};t.exports=l},1469:t=>{var e=Array.isArray;t.exports=e},8612:(t,e,n)=>{var r=n(3560),i=n(1780);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},9246:(t,e,n)=>{var r=n(8612),i=n(7005);t.exports=function(t){return i(t)&&r(t)}},4144:(t,e,n)=>{t=n.nmd(t);var r=n(5639),i=n(5062),o=e&&!e.nodeType&&e,a=o&&t&&!t.nodeType&&t,s=a&&a.exports===o?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;t.exports=l},3560:(t,e,n)=>{var r=n(4239),i=n(3218);t.exports=function(t){if(!i(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},1780:t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},3218:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},8630:(t,e,n)=>{var r=n(4239),i=n(5924),o=n(7005),a=Function.prototype,s=Object.prototype,l=a.toString,c=s.hasOwnProperty,u=l.call(Object);t.exports=function(t){if(!o(t)||"[object Object]"!=r(t))return!1;var e=i(t);if(null===e)return!0;var n=c.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==u}},3448:(t,e,n)=>{var r=n(4239),i=n(7005);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},6719:(t,e,n)=>{var r=n(8749),i=n(1717),o=n(1167),a=o&&o.isTypedArray,s=a?i(a):r;t.exports=s},3674:(t,e,n)=>{var r=n(4636),i=n(280),o=n(8612);t.exports=function(t){return o(t)?r(t):i(t)}},1704:(t,e,n)=>{var r=n(4636),i=n(313),o=n(8612);t.exports=function(t){return o(t)?r(t,!0):i(t)}},8306:(t,e,n)=>{var r=n(3369);function i(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(i.Cache||r),n}i.Cache=r,t.exports=i},2492:(t,e,n)=>{var r=n(2980),i=n(1463)((function(t,e,n){r(t,e,n)}));t.exports=i},9601:(t,e,n)=>{var r=n(371),i=n(9152),o=n(5403),a=n(327);t.exports=function(t){return o(t)?r(a(t)):i(t)}},479:t=>{t.exports=function(){return[]}},5062:t=>{t.exports=function(){return!1}},8601:(t,e,n)=>{var r=n(4841);t.exports=function(t){return t?Infinity===(t=r(t))||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}},554:(t,e,n)=>{var r=n(8601);t.exports=function(t){var e=r(t),n=e%1;return e==e?n?e-n:e:0}},4841:(t,e,n)=>{var r=n(7561),i=n(3218),o=n(3448),a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(o(t))return NaN;if(i(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=i(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=r(t);var n=s.test(t);return n||l.test(t)?c(t.slice(2),n?2:8):a.test(t)?NaN:+t}},9881:(t,e,n)=>{var r=n(8363),i=n(1704);t.exports=function(t){return r(t,i(t))}},9833:(t,e,n)=>{var r=n(531);t.exports=function(t){return null==t?"":r(t)}},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var a,s,l=i(t),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(e){s=e(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},5902:(t,e,n)=>{"use strict";n.r(e),n.d(e,{Bar:()=>qo,Bubble:()=>Zo,Chart:()=>na,Doughnut:()=>Ko,Line:()=>Qo,Pie:()=>Jo,PolarArea:()=>Go,Radar:()=>Xo,Scatter:()=>ta,default:()=>ra,defaults:()=>ea});var r=n(7294);const i="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function o(t,e,n){const r=n||(t=>Array.prototype.slice.call(t));let o=!1,a=[];return function(...n){a=r(n),o||(o=!0,i.call(window,(()=>{o=!1,t.apply(e,a)})))}}const a=t=>"start"===t?"left":"end"===t?"right":"center",s=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function l(){}const c=function(){let t=0;return function(){return t++}}();function u(t){return null==t}function d(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function f(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const h=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function p(t,e){return h(t)?t:e}function g(t,e){return void 0===t?e:t}const m=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function b(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function v(t,e,n,r){let i,o,a;if(d(t))if(o=t.length,r)for(i=o-1;i>=0;i--)e.call(n,t[i],i);else for(i=0;i<o;i++)e.call(n,t[i],i);else if(f(t))for(a=Object.keys(t),o=a.length,i=0;i<o;i++)e.call(n,t[a[i]],a[i])}function y(t,e){let n,r,i,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,r=t.length;n<r;++n)if(i=t[n],o=e[n],i.datasetIndex!==o.datasetIndex||i.index!==o.index)return!1;return!0}function x(t){if(d(t))return t.map(x);if(f(t)){const e=Object.create(null),n=Object.keys(t),r=n.length;let i=0;for(;i<r;++i)e[n[i]]=x(t[n[i]]);return e}return t}function _(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function w(t,e,n,r){if(!_(t))return;const i=e[t],o=n[t];f(i)&&f(o)?k(i,o,r):e[t]=x(o)}function k(t,e,n){const r=d(e)?e:[e],i=r.length;if(!f(t))return t;const o=(n=n||{}).merger||w;for(let a=0;a<i;++a){if(!f(e=r[a]))continue;const i=Object.keys(e);for(let r=0,a=i.length;r<a;++r)o(i[r],t,e,n)}return t}function S(t,e){return k(t,e,{merger:M})}function M(t,e,n){if(!_(t))return;const r=e[t],i=n[t];f(r)&&f(i)?S(r,i):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=x(i))}function E(t,e){const n=t.indexOf(".",e);return-1===n?t.length:n}function C(t,e){if(""===e)return t;let n=0,r=E(e,n);for(;t&&r>n;)t=t[e.substr(n,r-n)],n=r+1,r=E(e,n);return t}function P(t){return t.charAt(0).toUpperCase()+t.slice(1)}const O=t=>void 0!==t,T=t=>"function"==typeof t,D=Math.PI,L=2*D,z=L+D,R=Number.POSITIVE_INFINITY,A=D/180,F=D/2,I=D/4,N=2*D/3,j=Math.log10,V=Math.sign;function B(t){const e=Math.round(t);t=H(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(j(t))),r=t/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n}function W(t){return!isNaN(parseFloat(t))&&isFinite(t)}function H(t,e,n){return Math.abs(t-e)<n}function U(t,e,n){let r,i,o;for(r=0,i=t.length;r<i;r++)o=t[r][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function $(t){return t*(D/180)}function Y(t){return t*(180/D)}function Q(t){if(!h(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function q(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function X(t,e){return(t-e+z)%L-D}function K(t){return(t%L+L)%L}function G(t,e,n,r){const i=K(t),o=K(e),a=K(n),s=K(o-i),l=K(a-i),c=K(i-o),u=K(i-a);return i===o||i===a||r&&o===a||s>l&&c<u}function Z(t,e,n){return Math.max(e,Math.min(n,t))}const J=t=>0===t||1===t,tt=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*L/n),et=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*L/n)+1,nt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*F),easeOutSine:t=>Math.sin(t*F),easeInOutSine:t=>-.5*(Math.cos(D*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>J(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>J(t)?t:tt(t,.075,.3),easeOutElastic:t=>J(t)?t:et(t,.075,.3),easeInOutElastic(t){const e=.1125;return J(t)?t:t<.5?.5*tt(2*t,e,.45):.5+.5*et(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-nt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*nt.easeInBounce(2*t):.5*nt.easeOutBounce(2*t-1)+.5},rt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},it="0123456789ABCDEF",ot=t=>it[15&t],at=t=>it[(240&t)>>4]+it[15&t],st=t=>(240&t)>>4==(15&t);function lt(t){return t+.5|0}const ct=(t,e,n)=>Math.max(Math.min(t,n),e);function ut(t){return ct(lt(2.55*t),0,255)}function dt(t){return ct(lt(255*t),0,255)}function ft(t){return ct(lt(t/2.55)/100,0,1)}function ht(t){return ct(lt(100*t),0,100)}const pt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,gt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function mt(t,e,n){const r=e*Math.min(n,1-n),i=(e,i=(e+t/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function bt(t,e,n){const r=(r,i=(r+t/60)%6)=>n-n*e*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function vt(t,e,n){const r=mt(t,1,.5);let i;for(e+n>1&&(i=1/(e+n),e*=i,n*=i),i=0;i<3;i++)r[i]*=1-e-n,r[i]+=e;return r}function yt(t){const e=t.r/255,n=t.g/255,r=t.b/255,i=Math.max(e,n,r),o=Math.min(e,n,r),a=(i+o)/2;let s,l,c;return i!==o&&(c=i-o,l=a>.5?c/(2-i-o):c/(i+o),s=i===e?(n-r)/c+(n<r?6:0):i===n?(r-e)/c+2:(e-n)/c+4,s=60*s+.5),[0|s,l||0,a]}function xt(t,e,n,r){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,r)).map(dt)}function _t(t,e,n){return xt(mt,t,e,n)}function wt(t){return(t%360+360)%360}const kt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},St={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Mt;function Et(t,e,n){if(t){let r=yt(t);r[e]=Math.max(0,Math.min(r[e]+r[e]*n,0===e?360:1)),r=_t(r),t.r=r[0],t.g=r[1],t.b=r[2]}}function Ct(t,e){return t?Object.assign(e||{},t):t}function Pt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=dt(t[3]))):(e=Ct(t,{r:0,g:0,b:0,a:1})).a=dt(e.a),e}function Ot(t){return"r"===t.charAt(0)?function(t){const e=pt.exec(t);let n,r,i,o=255;if(e){if(e[7]!==n){const t=+e[7];o=255&(e[8]?ut(t):255*t)}return n=+e[1],r=+e[3],i=+e[5],n=255&(e[2]?ut(n):n),r=255&(e[4]?ut(r):r),i=255&(e[6]?ut(i):i),{r:n,g:r,b:i,a:o}}}(t):function(t){const e=gt.exec(t);let n,r=255;if(!e)return;e[5]!==n&&(r=e[6]?ut(+e[5]):dt(+e[5]));const i=wt(+e[2]),o=+e[3]/100,a=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return xt(vt,t,e,n)}(i,o,a):"hsv"===e[1]?function(t,e,n){return xt(bt,t,e,n)}(i,o,a):_t(i,o,a),{r:n[0],g:n[1],b:n[2],a:r}}(t)}class Tt{constructor(t){if(t instanceof Tt)return t;const e=typeof t;let n;var r,i,o;"object"===e?n=Pt(t):"string"===e&&(o=(r=t).length,"#"===r[0]&&(4===o||5===o?i={r:255&17*rt[r[1]],g:255&17*rt[r[2]],b:255&17*rt[r[3]],a:5===o?17*rt[r[4]]:255}:7!==o&&9!==o||(i={r:rt[r[1]]<<4|rt[r[2]],g:rt[r[3]]<<4|rt[r[4]],b:rt[r[5]]<<4|rt[r[6]],a:9===o?rt[r[7]]<<4|rt[r[8]]:255})),n=i||function(t){Mt||(Mt=function(){const t={},e=Object.keys(St),n=Object.keys(kt);let r,i,o,a,s;for(r=0;r<e.length;r++){for(a=s=e[r],i=0;i<n.length;i++)o=n[i],s=s.replace(o,kt[o]);o=parseInt(St[a],16),t[s]=[o>>16&255,o>>8&255,255&o]}return t}(),Mt.transparent=[0,0,0,0]);const e=Mt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Ot(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=Ct(this._rgb);return t&&(t.a=ft(t.a)),t}set rgb(t){this._rgb=Pt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${ft(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return st(t.r)&&st(t.g)&&st(t.b)&&st(t.a)}(t)?ot:at,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=yt(t),n=e[0],r=ht(e[1]),i=ht(e[2]);return t.a<255?`hsla(${n}, ${r}%, ${i}%, ${ft(t.a)})`:`hsl(${n}, ${r}%, ${i}%)`}(this._rgb):this._rgb}mix(t,e){const n=this;if(t){const r=n.rgb,i=t.rgb;let o;const a=e===o?.5:e,s=2*a-1,l=r.a-i.a,c=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;o=1-c,r.r=255&c*r.r+o*i.r+.5,r.g=255&c*r.g+o*i.g+.5,r.b=255&c*r.b+o*i.b+.5,r.a=a*r.a+(1-a)*i.a,n.rgb=r}return n}clone(){return new Tt(this.rgb)}alpha(t){return this._rgb.a=dt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=lt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Et(this._rgb,2,t),this}darken(t){return Et(this._rgb,2,-t),this}saturate(t){return Et(this._rgb,1,t),this}desaturate(t){return Et(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=yt(t);n[0]=wt(n[0]+e),n=_t(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function Dt(t){return new Tt(t)}const Lt=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function zt(t){return Lt(t)?t:Dt(t)}function Rt(t){return Lt(t)?t:Dt(t).saturate(.5).darken(.1).hexString()}const At=Object.create(null),Ft=Object.create(null);function It(t,e){if(!e)return t;const n=e.split(".");for(let e=0,r=n.length;e<r;++e){const r=n[e];t=t[r]||(t[r]=Object.create(null))}return t}function Nt(t,e,n){return"string"==typeof e?k(It(t,e),n):k(It(t,""),e)}var jt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Rt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Rt(e.borderColor),this.hoverColor=(t,e)=>Rt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(t)}set(t,e){return Nt(this,t,e)}get(t){return It(this,t)}describe(t,e){return Nt(Ft,t,e)}override(t,e){return Nt(At,t,e)}route(t,e,n,r){const i=It(this,t),o=It(this,n),a="_"+e;Object.defineProperties(i,{[a]:{value:i[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[r];return f(t)?Object.assign({},e,t):g(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Vt(t,e,n,r,i){let o=e[i];return o||(o=e[i]=t.measureText(i).width,n.push(i)),o>r&&(r=o),r}function Bt(t,e,n,r){let i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==e&&(i=r.data={},o=r.garbageCollect=[],r.font=e),t.save(),t.font=e;let a=0;const s=n.length;let l,c,u,f,h;for(l=0;l<s;l++)if(f=n[l],null!=f&&!0!==d(f))a=Vt(t,i,o,a,f);else if(d(f))for(c=0,u=f.length;c<u;c++)h=f[c],null==h||d(h)||(a=Vt(t,i,o,a,h));t.restore();const p=o.length/2;if(p>n.length){for(l=0;l<p;l++)delete i[o[l]];o.splice(0,p)}return a}function Wt(t,e,n){const r=t.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((e-i)*r)/r+i}function Ht(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Ut(t,e,n,r){let i,o,a,s,l;const c=e.pointStyle,u=e.rotation,d=e.radius;let f=(u||0)*A;if(c&&"object"==typeof c&&(i=c.toString(),"[object HTMLImageElement]"===i||"[object HTMLCanvasElement]"===i))return t.save(),t.translate(n,r),t.rotate(f),t.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),c){default:t.arc(n,r,d,0,L),t.closePath();break;case"triangle":t.moveTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=N,t.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=N,t.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),t.closePath();break;case"rectRounded":l=.516*d,s=d-l,o=Math.cos(f+I)*s,a=Math.sin(f+I)*s,t.arc(n-o,r-a,l,f-D,f-F),t.arc(n+a,r-o,l,f-F,f),t.arc(n+o,r+a,l,f,f+F),t.arc(n-a,r+o,l,f+F,f+D),t.closePath();break;case"rect":if(!u){s=Math.SQRT1_2*d,t.rect(n-s,r-s,2*s,2*s);break}f+=I;case"rectRot":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+a,r-o),t.lineTo(n+o,r+a),t.lineTo(n-a,r+o),t.closePath();break;case"crossRot":f+=I;case"cross":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a),t.moveTo(n+a,r-o),t.lineTo(n-a,r+o);break;case"star":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a),t.moveTo(n+a,r-o),t.lineTo(n-a,r+o),f+=I,o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a),t.moveTo(n+a,r-o),t.lineTo(n-a,r+o);break;case"line":o=Math.cos(f)*d,a=Math.sin(f)*d,t.moveTo(n-o,r-a),t.lineTo(n+o,r+a);break;case"dash":t.moveTo(n,r),t.lineTo(n+Math.cos(f)*d,r+Math.sin(f)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function $t(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function Yt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Qt(t){t.restore()}function qt(t,e,n,r,i){if(!e)return t.lineTo(n.x,n.y);if("middle"===i){const r=(e.x+n.x)/2;t.lineTo(r,e.y),t.lineTo(r,n.y)}else"after"===i!=!!r?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function Xt(t,e,n,r){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(r?e.cp1x:e.cp2x,r?e.cp1y:e.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function Kt(t,e,n,r,i,o={}){const a=d(e)?e:[e],s=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=i.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),u(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)c=a[l],s&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),u(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,r,o.maxWidth)),t.fillText(c,n,r,o.maxWidth),Gt(t,n,r,c,o),r+=i.lineHeight;t.restore()}function Gt(t,e,n,r,i){if(i.strikethrough||i.underline){const o=t.measureText(r),a=e-o.actualBoundingBoxLeft,s=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=i.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=i.decorationWidth||2,t.moveTo(a,u),t.lineTo(s,u),t.stroke()}}function Zt(t,e){const{x:n,y:r,w:i,h:o,radius:a}=e;t.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-F,D,!0),t.lineTo(n,r+o-a.bottomLeft),t.arc(n+a.bottomLeft,r+o-a.bottomLeft,a.bottomLeft,D,F,!0),t.lineTo(n+i-a.bottomRight,r+o),t.arc(n+i-a.bottomRight,r+o-a.bottomRight,a.bottomRight,F,0,!0),t.lineTo(n+i,r+a.topRight),t.arc(n+i-a.topRight,r+a.topRight,a.topRight,0,-F,!0),t.lineTo(n+a.topLeft,r)}const Jt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),te=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ee(t,e){const n=(""+t).match(Jt);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function ne(t,e){const n={},r=f(e),i=r?Object.keys(e):e,o=f(t)?r?n=>g(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of i)n[t]=+o(t)||0;return n}function re(t){return ne(t,{top:"y",right:"x",bottom:"y",left:"x"})}function ie(t){return ne(t,["topLeft","topRight","bottomLeft","bottomRight"])}function oe(t){const e=re(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ae(t,e){t=t||{},e=e||jt.font;let n=g(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let r=g(t.style,e.style);r&&!(""+r).match(te)&&(console.warn('Invalid font style specified: "'+r+'"'),r="");const i={family:g(t.family,e.family),lineHeight:ee(g(t.lineHeight,e.lineHeight),n),size:n,style:r,weight:g(t.weight,e.weight),string:""};return i.string=function(t){return!t||u(t.size)||u(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(i),i}function se(t,e,n,r){let i,o,a,s=!0;for(i=0,o=t.length;i<o;++i)if(a=t[i],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),s=!1),void 0!==n&&d(a)&&(a=a[n%a.length],s=!1),void 0!==a))return r&&!s&&(r.cacheable=!1),a}function le(t,e,n){n=n||(n=>t[n]<e);let r,i=t.length-1,o=0;for(;i-o>1;)r=o+i>>1,n(r)?o=r:i=r;return{lo:o,hi:i}}const ce=(t,e,n)=>le(t,n,(r=>t[r][e]<n)),ue=(t,e,n)=>le(t,n,(r=>t[r][e]>=n)),de=["push","pop","shift","splice","unshift"];function fe(t,e){const n=t._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(e);-1!==i&&r.splice(i,1),r.length>0||(de.forEach((e=>{delete t[e]})),delete t._chartjs)}function he(t){const e=new Set;let n,r;for(n=0,r=t.length;n<r;++n)e.add(t[n]);return e.size===r?t:Array.from(e)}function pe(t,e=[""],n=t,r,i=(()=>t[0])){O(r)||(r=Me("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:r,_getTarget:i,override:i=>pe([i,...t],e,n,r)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,r)=>ye(n,r,(()=>function(t,e,n,r){let i;for(const o of e)if(i=Me(be(o,t),n),O(i))return ve(t,i)?ke(n,r,t,i):i}(r,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Ee(t).includes(e),ownKeys:t=>Ee(t),set:(t,e,n)=>((t._storage||(t._storage=i()))[e]=n,delete t[e],delete t._keys,!0)})}function ge(t,e,n,r){const i={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:me(t,r),setContext:e=>ge(t,e,n,r),override:i=>ge(t.override(i),e,n,r)};return new Proxy(i,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>ye(t,e,(()=>function(t,e,n){const{_proxy:r,_context:i,_subProxy:o,_descriptors:a}=t;let s=r[e];return T(s)&&a.isScriptable(e)&&(s=function(t,e,n,r){const{_proxy:i,_context:o,_subProxy:a,_stack:s}=n;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(o,a||r),s.delete(t),f(e)&&(e=ke(i._scopes,i,t,e)),e}(e,s,t,n)),d(s)&&s.length&&(s=function(t,e,n,r){const{_proxy:i,_context:o,_subProxy:a,_descriptors:s}=n;if(O(o.index)&&r(t))e=e[o.index%e.length];else if(f(e[0])){const n=e,r=i._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=ke(r,i,t,l);e.push(ge(n,o,a&&a[t],s))}}return e}(e,s,t,a.isIndexable)),ve(e,s)&&(s=ge(s,i,o&&o[e],a)),s}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,r)=>(t[n]=r,delete e[n],!0)})}function me(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:r=e.indexable,_allKeys:i=e.allKeys}=t;return{allKeys:i,scriptable:n,indexable:r,isScriptable:T(n)?n:()=>n,isIndexable:T(r)?r:()=>r}}const be=(t,e)=>t?t+P(e):e,ve=(t,e)=>f(e)&&"adapters"!==t;function ye(t,e,n){let r=t[e];return O(r)||(r=n(),O(r)&&(t[e]=r)),r}function xe(t,e,n){return T(t)?t(e,n):t}const _e=(t,e)=>!0===t?e:"string"==typeof t?C(e,t):void 0;function we(t,e,n,r){for(const i of e){const e=_e(n,i);if(e){t.add(e);const i=xe(e._fallback,n,e);if(O(i)&&i!==n&&i!==r)return i}else if(!1===e&&O(r)&&n!==r)return null}return!1}function ke(t,e,n,r){const i=e._rootScopes,o=xe(e._fallback,n,r),a=[...t,...i],s=new Set;s.add(r);let l=Se(s,a,n,o||n);return null!==l&&(!O(o)||o===n||(l=Se(s,a,o,l),null!==l))&&pe(Array.from(s),[""],i,o,(()=>function(t,e,n){const r=t._getTarget();e in r||(r[e]={});const i=r[e];return d(i)&&f(n)?n:i}(e,n,r)))}function Se(t,e,n,r){for(;n;)n=we(t,e,n,r);return n}function Me(t,e){for(const n of e){if(!n)continue;const e=n[t];if(O(e))return e}}function Ee(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Ce=Number.EPSILON||1e-14,Pe=(t,e)=>e<t.length&&!t[e].skip&&t[e],Oe=t=>"x"===t?"y":"x";function Te(t,e,n,r){const i=t.skip?e:t,o=e,a=n.skip?e:n,s=q(o,i),l=q(a,o);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=r*c,f=r*u;return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+f*(a.x-i.x),y:o.y+f*(a.y-i.y)}}}function De(t,e,n){return Math.max(Math.min(t,n),e)}function Le(t,e,n,r,i){let o,a,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=Oe(e),r=t.length,i=Array(r).fill(0),o=Array(r);let a,s,l,c=Pe(t,0);for(a=0;a<r;++a)if(s=l,l=c,c=Pe(t,a+1),l){if(c){const t=c[e]-l[e];i[a]=0!==t?(c[n]-l[n])/t:0}o[a]=s?c?V(i[a-1])!==V(i[a])?0:(i[a-1]+i[a])/2:i[a-1]:i[a]}!function(t,e,n){const r=t.length;let i,o,a,s,l,c=Pe(t,0);for(let u=0;u<r-1;++u)l=c,c=Pe(t,u+1),l&&c&&(H(e[u],0,Ce)?n[u]=n[u+1]=0:(i=n[u]/e[u],o=n[u+1]/e[u],s=Math.pow(i,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[u]=i*a*e[u],n[u+1]=o*a*e[u])))}(t,i,o),function(t,e,n="x"){const r=Oe(n),i=t.length;let o,a,s,l=Pe(t,0);for(let c=0;c<i;++c){if(a=s,s=l,l=Pe(t,c+1),!s)continue;const i=s[n],u=s[r];a&&(o=(i-a[n])/3,s[`cp1${n}`]=i-o,s[`cp1${r}`]=u-o*e[c]),l&&(o=(l[n]-i)/3,s[`cp2${n}`]=i+o,s[`cp2${r}`]=u+o*e[c])}}(t,o,e)}(t,i);else{let n=r?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)s=t[o],l=Te(n,s,t[Math.min(o+1,a-(r?0:1))%a],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}e.capBezierPoints&&function(t,e){let n,r,i,o,a,s=$t(t[0],e);for(n=0,r=t.length;n<r;++n)a=o,o=s,s=n<r-1&&$t(t[n+1],e),o&&(i=t[n],a&&(i.cp1x=De(i.cp1x,e.left,e.right),i.cp1y=De(i.cp1y,e.top,e.bottom)),s&&(i.cp2x=De(i.cp2x,e.left,e.right),i.cp2y=De(i.cp2y,e.top,e.bottom)))}(t,n)}function ze(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Re(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ae(t,e,n){let r;return"string"==typeof t?(r=parseInt(t,10),-1!==t.indexOf("%")&&(r=r/100*e.parentNode[n])):r=t,r}const Fe=t=>window.getComputedStyle(t,null),Ie=["top","right","bottom","left"];function Ne(t,e,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const o=Ie[i];r[o]=parseFloat(t[e+"-"+o+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}function je(t,e){const{canvas:n,currentDevicePixelRatio:r}=e,i=Fe(n),o="border-box"===i.boxSizing,a=Ne(i,"padding"),s=Ne(i,"border","width"),{x:l,y:c,box:u}=function(t,e){const n=t.native||t,r=n.touches,i=r&&r.length?r[0]:n,{offsetX:o,offsetY:a}=i;let s,l,c=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(o,a,n.target))s=o,l=a;else{const t=e.getBoundingClientRect();s=i.clientX-t.left,l=i.clientY-t.top,c=!0}return{x:s,y:l,box:c}}(t,n),d=a.left+(u&&s.left),f=a.top+(u&&s.top);let{width:h,height:p}=e;return o&&(h-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((c-f)/p*n.height/r)}}const Ve=t=>Math.round(10*t)/10;function Be(t,e,n){const r=e||1,i=Math.floor(t.height*r),o=Math.floor(t.width*r);t.height=i/r,t.width=o/r;const a=t.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==r||a.height!==i||a.width!==o)&&(t.currentDevicePixelRatio=r,a.height=i,a.width=o,t.ctx.setTransform(r,0,0,r,0,0),!0)}const We=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function He(t,e){const n=function(t,e){return Fe(t).getPropertyValue(e)}(t,e),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function Ue(t,e,n,r){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function $e(t,e,n,r){return{x:t.x+n*(e.x-t.x),y:"middle"===r?n<.5?t.y:e.y:"after"===r?n<1?t.y:e.y:n>0?e.y:t.y}}function Ye(t,e,n,r){const i={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=Ue(t,i,n),s=Ue(i,o,n),l=Ue(o,e,n),c=Ue(a,s,n),u=Ue(s,l,n);return Ue(c,u,n)}const Qe=new Map;function qe(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let r=Qe.get(n);return r||(r=new Intl.NumberFormat(t,e),Qe.set(n,r)),r}(e,n).format(t)}function Xe(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ke(t,e){let n,r;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=r)}function Ge(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Ze(t){return"angle"===t?{between:G,compare:X,normalize:K}:{between:(t,e,n)=>t>=Math.min(e,n)&&t<=Math.max(n,e),compare:(t,e)=>t-e,normalize:t=>t}}function Je({start:t,end:e,count:n,loop:r,style:i}){return{start:t%n,end:e%n,loop:r&&(e-t+1)%n==0,style:i}}function tn(t,e,n){if(!n)return[t];const{property:r,start:i,end:o}=n,a=e.length,{compare:s,between:l,normalize:c}=Ze(r),{start:u,end:d,loop:f,style:h}=function(t,e,n){const{property:r,start:i,end:o}=n,{between:a,normalize:s}=Ze(r),l=e.length;let c,u,{start:d,end:f,loop:h}=t;if(h){for(d+=l,f+=l,c=0,u=l;c<u&&a(s(e[d%l][r]),i,o);++c)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:t.style}}(t,e,n),p=[];let g,m,b,v=!1,y=null;for(let t=u,n=u;t<=d;++t)m=e[t%a],m.skip||(g=c(m[r]),g!==b&&(v=l(g,i,o),null===y&&(v||l(i,b,g)&&0!==s(i,b))&&(y=0===s(g,i)?t:n),null!==y&&(!v||0===s(o,g)||l(o,b,g))&&(p.push(Je({start:y,end:t,loop:f,count:a,style:h})),y=null),n=t,b=g));return null!==y&&p.push(Je({start:y,end:d,loop:f,count:a,style:h})),p}function en(t,e){const n=[],r=t.segments;for(let i=0;i<r.length;i++){const o=tn(r[i],t.points,e);o.length&&n.push(...o)}return n}function nn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function rn(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var on=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,r){const i=e.listeners[r],o=e.duration;i.forEach((r=>r({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){const t=this;t._request||(t._running=!0,t._request=i.call(window,(()=>{t._update(),t._request=null,t._running&&t._refresh()})))}_update(t=Date.now()){const e=this;let n=0;e._charts.forEach(((r,i)=>{if(!r.running||!r.items.length)return;const o=r.items;let a,s=o.length-1,l=!1;for(;s>=0;--s)a=o[s],a._active?(a._total>r.duration&&(r.duration=a._total),a.tick(t),l=!0):(o[s]=o[o.length-1],o.pop());l&&(i.draw(),e._notify(i,r,t,"progress")),o.length||(r.running=!1,e._notify(i,r,t,"complete"),r.initial=!1),n+=o.length})),e._lastDate=t,0===n&&(e._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const an="transparent",sn={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const r=zt(t||an),i=r.valid&&zt(e||an);return i&&i.valid?i.mix(r,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class ln{constructor(t,e,n,r){const i=e[n];r=se([t.to,r,i,t.from]);const o=se([t.from,i,r]);this._active=!0,this._fn=t.fn||sn[t.type||typeof o],this._easing=nt[t.easing]||nt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=r,this._promises=void 0}active(){return this._active}update(t,e,n){const r=this;if(r._active){r._notify(!1);const i=r._target[r._prop],o=n-r._start,a=r._duration-o;r._start=n,r._duration=Math.floor(Math.max(a,t.duration)),r._total+=o,r._loop=!!t.loop,r._to=se([t.to,e,i,t.from]),r._from=se([t.from,i,e])}}cancel(){const t=this;t._active&&(t.tick(Date.now()),t._active=!1,t._notify(!1))}tick(t){const e=this,n=t-e._start,r=e._duration,i=e._prop,o=e._from,a=e._loop,s=e._to;let l;if(e._active=o!==s&&(a||n<r),!e._active)return e._target[i]=s,void e._notify(!0);n<0?e._target[i]=o:(l=n/r%2,l=a&&l>1?2-l:l,l=e._easing(Math.min(1,Math.max(0,l))),e._target[i]=e._fn(o,s,l))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}jt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const cn=Object.keys(jt.animation);jt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),jt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),jt.describe("animations",{_fallback:"animation"}),jt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class un{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!f(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const r=t[n];if(!f(r))return;const i={};for(const t of cn)i[t]=r[t];(d(r.properties)&&r.properties||[n]).forEach((t=>{t!==n&&e.has(t)||e.set(t,i)}))}))}_animateOptions(t,e){const n=e.options,r=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(t,e){const n=[],r=Object.keys(e);for(let e=0;e<r.length;e++){const i=t[r[e]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),i}_createAnimations(t,e){const n=this._properties,r=[],i=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){r.push(...this._animateOptions(t,e));continue}const c=e[l];let u=i[l];const d=n.get(l);if(u){if(d&&u.active()){u.update(d,c,a);continue}u.cancel()}d&&d.duration?(i[l]=u=new ln(d,t,l,c),r.push(u)):t[l]=c}return r}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(on.add(this._chart,n),!0):void 0}}function dn(t,e){const n=t&&t.options||{},r=n.reverse,i=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:r?o:i,end:r?i:o}}function fn(t,e){const n=[],r=t._getSortedDatasetMetas(e);let i,o;for(i=0,o=r.length;i<o;++i)n.push(r[i].index);return n}function hn(t,e,n,r){const i=t.keys,o="single"===r.mode;let a,s,l,c;if(null!==e){for(a=0,s=i.length;a<s;++a){if(l=+i[a],l===n){if(r.all)continue;break}c=t.values[l],h(c)&&(o||0===e||V(e)===V(c))&&(e+=c)}return e}}function pn(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function gn(t,e,n){const r=t[e]||(t[e]={});return r[n]||(r[n]={})}function mn(t,e,n){for(const r of e.getMatchingVisibleMetas("bar").reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function bn(t,e){const{chart:n,_cachedMeta:r}=t,i=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=r,l=o.axis,c=a.axis,u=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,a,r),d=e.length;let f;for(let t=0;t<d;++t){const n=e[t],{[l]:r,[c]:o}=n;f=(n._stacks||(n._stacks={}))[c]=gn(i,u,r),f[s]=o,f._top=mn(f,a,!0),f._bottom=mn(f,a,!1)}}function vn(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function yn(t,e){const n=t.controller.index,r=t.vScale&&t.vScale.axis;if(r){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[r]||void 0===e[r][n])return;delete e[r][n]}}}const xn=t=>"reset"===t||"none"===t,_n=(t,e)=>e?t:Object.assign({},t);class wn{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this,e=t._cachedMeta;t.configure(),t.linkScales(),e._stacked=pn(e.vScale,e),t.addElements()}updateIndex(t){this.index!==t&&yn(this._cachedMeta),this.index=t}linkScales(){const t=this,e=t.chart,n=t._cachedMeta,r=t.getDataset(),i=(t,e,n,r)=>"x"===t?e:"r"===t?r:n,o=n.xAxisID=g(r.xAxisID,vn(e,"x")),a=n.yAxisID=g(r.yAxisID,vn(e,"y")),s=n.rAxisID=g(r.rAxisID,vn(e,"r")),l=n.indexAxis,c=n.iAxisID=i(l,o,a,s),u=n.vAxisID=i(l,a,o,s);n.xScale=t.getScaleForId(o),n.yScale=t.getScaleForId(a),n.rScale=t.getScaleForId(s),n.iScale=t.getScaleForId(c),n.vScale=t.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&fe(this._data,this),t._stacked&&yn(t)}_dataCheck(){const t=this,e=t.getDataset(),n=e.data||(e.data=[]),r=t._data;if(f(n))t._data=function(t){const e=Object.keys(t),n=new Array(e.length);let r,i,o;for(r=0,i=e.length;r<i;++r)o=e[r],n[r]={x:o,y:t[o]};return n}(n);else if(r!==n){if(r){fe(r,t);const e=t._cachedMeta;yn(e),e._parsed=[]}n&&Object.isExtensible(n)&&(o=t,(i=n)._chartjs?i._chartjs.listeners.push(o):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[o]}}),de.forEach((t=>{const e="_onData"+P(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const r=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),r}})})))),t._syncList=[],t._data=n}var i,o}addElements(){const t=this,e=t._cachedMeta;t._dataCheck(),t.datasetElementType&&(e.dataset=new t.datasetElementType)}buildOrUpdateElements(t){const e=this,n=e._cachedMeta,r=e.getDataset();let i=!1;e._dataCheck();const o=n._stacked;n._stacked=pn(n.vScale,n),n.stack!==r.stack&&(i=!0,yn(n),n.stack=r.stack),e._resyncElements(t),(i||o!==n._stacked)&&bn(e,n._parsed)}configure(){const t=this,e=t.chart.config,n=e.datasetScopeKeys(t._type),r=e.getOptionScopes(t.getDataset(),n,!0);t.options=e.createResolver(r,t.getContext()),t._parsing=t.options.parsing}parse(t,e){const n=this,{_cachedMeta:r,_data:i}=n,{iScale:o,_stacked:a}=r,s=o.axis;let l,c,u,h=0===t&&e===i.length||r._sorted,p=t>0&&r._parsed[t-1];if(!1===n._parsing)r._parsed=i,r._sorted=!0,u=i;else{u=d(i[t])?n.parseArrayData(r,i,t,e):f(i[t])?n.parseObjectData(r,i,t,e):n.parsePrimitiveData(r,i,t,e);const o=()=>null===c[s]||p&&c[s]<p[s];for(l=0;l<e;++l)r._parsed[l+t]=c=u[l],h&&(o()&&(h=!1),p=c);r._sorted=h}a&&bn(n,u)}parsePrimitiveData(t,e,n,r){const{iScale:i,vScale:o}=t,a=i.axis,s=o.axis,l=i.getLabels(),c=i===o,u=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,u[d]={[a]:c||i.parse(l[h],h),[s]:o.parse(e[h],h)};return u}parseArrayData(t,e,n,r){const{xScale:i,yScale:o}=t,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=e[c],a[s]={x:i.parse(u[0],c),y:o.parse(u[1],c)};return a}parseObjectData(t,e,n,r){const{xScale:i,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(r);let c,u,d,f;for(c=0,u=r;c<u;++c)d=c+n,f=e[d],l[c]={x:i.parse(C(f,a),d),y:o.parse(C(f,s),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const r=this.chart,i=this._cachedMeta,o=e[t.axis];return hn({keys:fn(r,!0),values:e._stacks[t.axis]},o,i.index,{mode:n})}updateRangeFromParsed(t,e,n,r){const i=n[e.axis];let o=null===i?NaN:i;const a=r&&n._stacks[e.axis];r&&a&&(r.values=a,t.min=Math.min(t.min,o),t.max=Math.max(t.max,o),o=hn(r,i,this._cachedMeta.index,{all:!0})),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this,r=n._cachedMeta,i=r._parsed,o=r._sorted&&t===r.iScale,a=i.length,s=n._getOtherScale(t),l=e&&r._stacked&&{keys:fn(n.chart,!0),values:null},c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:d}=function(t){const{min:e,max:n,minDefined:r,maxDefined:i}=t.getUserBounds();return{min:r?e:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(s);let f,p,g,m;function b(){return g=i[f],p=g[t.axis],m=g[s.axis],!h(p)||u>m||d<m}for(f=0;f<a&&(b()||(n.updateRangeFromParsed(c,t,g,l),!o));++f);if(o)for(f=a-1;f>=0;--f)if(!b()){n.updateRangeFromParsed(c,t,g,l);break}return c}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let r,i,o;for(r=0,i=e.length;r<i;++r)o=e[r][t.axis],h(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,r=e.vScale,i=this.getParsed(t);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(t){const e=this,n=e._cachedMeta;e.configure(),e._cachedDataOpts={},e.update(t||"default"),n._clip=function(t){let e,n,r,i;return f(t)?(e=t.top,n=t.right,r=t.bottom,i=t.left):e=n=r=i=t,{top:e,right:n,bottom:r,left:i,disabled:!1===t}}(g(e.options.clip,function(t,e,n){if(!1===n)return!1;const r=dn(t,n),i=dn(e,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(n.xScale,n.yScale,e.getMaxOverflow())))}update(t){}draw(){const t=this,e=t._ctx,n=t.chart,r=t._cachedMeta,i=r.data||[],o=n.chartArea,a=[],s=t._drawStart||0,l=t._drawCount||i.length-s;let c;for(r.dataset&&r.dataset.draw(e,o,s,l),c=s;c<s+l;++c){const t=i[c];t.hidden||(t.active?a.push(t):t.draw(e,o))}for(c=0;c<a.length;++c)a[c].draw(e,o)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const r=this,i=r.getDataset();let o;if(t>=0&&t<r._cachedMeta.data.length){const e=r._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,n){return Object.assign(Object.create(t),{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(r.getContext(),t,e)),o.parsed=r.getParsed(t),o.raw=i.data[t],o.index=o.dataIndex=t}else o=r.$context||(r.$context=function(t,e){return Object.assign(Object.create(t),{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(r.chart.getContext(),r.index)),o.dataset=i,o.index=o.datasetIndex=r.index;return o.active=!!e,o.mode=n,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const r=this,i="active"===e,o=r._cachedDataOpts,a=t+"-"+e,s=o[a],l=r.enableOptionSharing&&O(n);if(s)return _n(s,l);const c=r.chart.config,u=c.datasetElementScopeKeys(r._type,t),d=i?[`${t}Hover`,"hover",t,""]:[t,""],f=c.getOptionScopes(r.getDataset(),u),h=Object.keys(jt.elements[t]),p=c.resolveNamedOptions(f,h,(()=>r.getContext(n,i)),d);return p.$shared&&(p.$shared=l,o[a]=Object.freeze(_n(p,l))),p}_resolveAnimations(t,e,n){const r=this,i=r.chart,o=r._cachedDataOpts,a=`animation-${e}`,s=o[a];if(s)return s;let l;if(!1!==i.options.animation){const i=r.chart.config,o=i.datasetAnimationScopeKeys(r._type,e),a=i.getOptionScopes(r.getDataset(),o);l=i.createResolver(a,r.getContext(t,n,e))}const c=new un(i,l&&l.animations);return l&&l._cacheable&&(o[a]=Object.freeze(c)),c}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||xn(t)||this.chart._animationsDisabled}updateElement(t,e,n,r){xn(r)?Object.assign(t,n):this._resolveAnimations(e,r).update(t,n)}updateSharedOptions(t,e,n){t&&!xn(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,r){t.active=r;const i=this.getStyle(e,r);this._resolveAnimations(e,n,r).update(t,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this,n=e._data,r=e._cachedMeta.data;for(const[t,n,r]of e._syncList)e[t](n,r);e._syncList=[];const i=r.length,o=n.length,a=Math.min(o,i);a&&e.parse(0,a),o>i?e._insertElements(i,o-i,t):o<i&&e._removeElements(o,i-o)}_insertElements(t,e,n=!0){const r=this,i=r._cachedMeta,o=i.data,a=t+e;let s;const l=t=>{for(t.length+=e,s=t.length-1;s>=a;s--)t[s]=t[s-e]};for(l(o),s=t;s<a;++s)o[s]=new r.dataElementType;r._parsing&&l(i._parsed),r.parse(t,e),n&&r.updateElements(o,t,e,"reset")}updateElements(t,e,n,r){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(t,e);n._stacked&&yn(n,r)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,r]=t;this[e](n,r)}}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){this._sync(["_removeElements",t,e]),this._sync(["_insertElements",t,arguments.length-2])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function kn(t){const e=function(t){if(!t._cache.$bar){const e=t.getMatchingVisibleMetas("bar");let n=[];for(let r=0,i=e.length;r<i;r++)n=n.concat(e[r].controller.getAllParsedValues(t));t._cache.$bar=he(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(t);let n,r,i,o,a=t._length;const s=()=>{32767!==i&&-32768!==i&&(O(o)&&(a=Math.min(a,Math.abs(i-o)||a)),o=i)};for(n=0,r=e.length;n<r;++n)i=t.getPixelForValue(e[n]),s();for(o=void 0,n=0,r=t.ticks.length;n<r;++n)i=t.getPixelForTick(n),s();return a}function Sn(t,e,n,r){return d(t)?function(t,e,n,r){const i=n.parse(t[0],r),o=n.parse(t[1],r),a=Math.min(i,o),s=Math.max(i,o);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:i,end:o,min:a,max:s}}(t,e,n,r):e[n.axis]=n.parse(t,r),e}function Mn(t,e,n,r){const i=t.iScale,o=t.vScale,a=i.getLabels(),s=i===o,l=[];let c,u,d,f;for(c=n,u=n+r;c<u;++c)f=e[c],d={},d[i.axis]=s||i.parse(a[c],c),l.push(Sn(f,d,o,c));return l}function En(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Cn(t,e,n,r){let i=e.borderSkipped;const o={};if(!i)return void(t.borderSkipped=o);const{start:a,end:s,reverse:l,top:c,bottom:u}=function(t){let e,n,r,i,o;return t.horizontal?(e=t.base>t.x,n="left",r="right"):(e=t.base<t.y,n="bottom",r="top"),e?(i="end",o="start"):(i="start",o="end"),{start:n,end:r,reverse:e,top:i,bottom:o}}(t);"middle"===i&&n&&(t.enableBorderRadius=!0,(n._top||0)===r?i=c:(n._bottom||0)===r?i=u:(o[Pn(u,a,s,l)]=!0,i=c)),o[Pn(i,a,s,l)]=!0,t.borderSkipped=o}function Pn(t,e,n,r){var i,o,a;return r?(a=n,t=On(t=(i=t)===(o=e)?a:i===a?o:i,n,e)):t=On(t,e,n),t}function On(t,e,n){return"start"===t?e:"end"===t?n:t}wn.defaults={},wn.prototype.datasetElementType=null,wn.prototype.dataElementType=null;class Tn extends wn{parsePrimitiveData(t,e,n,r){return Mn(t,e,n,r)}parseArrayData(t,e,n,r){return Mn(t,e,n,r)}parseObjectData(t,e,n,r){const{iScale:i,vScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===i.axis?a:s,c="x"===o.axis?a:s,u=[];let d,f,h,p;for(d=n,f=n+r;d<f;++d)p=e[d],h={},h[i.axis]=i.parse(C(p,l),d),u.push(Sn(C(p,c),h,o,d));return u}updateRangeFromParsed(t,e,n,r){super.updateRangeFromParsed(t,e,n,r);const i=n._custom;i&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,i.min),t.max=Math.max(t.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:r}=e,i=this.getParsed(t),o=i._custom,a=En(o)?"["+o.start+", "+o.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:a}}initialize(){const t=this;t.enableOptionSharing=!0,super.initialize(),t._cachedMeta.stack=t.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,r){const i=this,o="reset"===r,{index:a,_cachedMeta:{vScale:s}}=i,l=s.getBasePixel(),c=s.isHorizontal(),d=i._getRuler(),f=i.resolveDataElementOptions(e,r),h=i.getSharedOptions(f),p=i.includeOptions(r,h);i.updateSharedOptions(h,r,f);for(let f=e;f<e+n;f++){const e=i.getParsed(f),n=o||u(e[s.axis])?{base:l,head:l}:i._calculateBarValuePixels(f),g=i._calculateBarIndexPixels(f,d),m=(e._stacks||{})[s.axis],b={horizontal:c,base:n.base,enableBorderRadius:!m||En(e._custom)||a===m._top||a===m._bottom,x:c?n.head:g.center,y:c?g.center:n.head,height:c?g.size:Math.abs(n.size),width:c?Math.abs(n.size):g.size};p&&(b.options=h||i.resolveDataElementOptions(f,t[f].active?"active":r)),Cn(b,b.options||t[f].options,m,a),i.updateElement(t[f],f,b,r)}}_getStacks(t,e){const n=this._cachedMeta.iScale,r=n.getMatchingVisibleMetas(this._type),i=n.options.stacked,o=r.length,a=[];let s,l;for(s=0;s<o;++s)if(l=r[s],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(u(t)||isNaN(t))continue}if((!1===i||-1===a.indexOf(l.stack)||void 0===i&&void 0===l.stack)&&a.push(l.stack),l.index===t)break}return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const r=this._getStacks(t,n),i=void 0!==e?r.indexOf(e):-1;return-1===i?r.length-1:i}_getRuler(){const t=this,e=t.options,n=t._cachedMeta,r=n.iScale,i=[];let o,a;for(o=0,a=n.data.length;o<a;++o)i.push(r.getPixelForValue(t.getParsed(o)[r.axis],o));const s=e.barThickness;return{min:s||kn(r),pixels:i,start:r._startPixel,end:r._endPixel,stackCount:t._getStackCount(),scale:r,grouped:e.grouped,ratio:s?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(t){const e=this,{_cachedMeta:{vScale:n,_stacked:r},options:{base:i,minBarLength:o}}=e,a=i||0,s=e.getParsed(t),l=s._custom,c=En(l);let d,f,h=s[n.axis],p=0,g=r?e.applyStack(n,s,r):h;g!==h&&(p=g-h,g=h),c&&(h=l.barStart,g=l.barEnd-l.barStart,0!==h&&V(h)!==V(l.barEnd)&&(p=0),p+=h);const m=u(i)||c?p:i;let b=n.getPixelForValue(m);if(d=e.chart.getDataVisibility(t)?n.getPixelForValue(p+g):b,f=d-b,Math.abs(f)<o&&(f=function(t,e,n){return 0!==t?V(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(f,n,a)*o,h===a&&(b-=f/2),d=b+f),b===n.getPixelForValue(a)){const t=V(f)*n.getLineWidthForValue(a)/2;b+=t,f-=t}return{size:f,base:b,head:d,center:d+f/2}}_calculateBarIndexPixels(t,e){const n=this,r=e.scale,i=n.options,o=i.skipNull,a=g(i.maxBarThickness,1/0);let s,l;if(e.grouped){const r=o?n._getStackCount(t):e.stackCount,c="flex"===i.barThickness?function(t,e,n,r){const i=e.pixels,o=i[t];let a=t>0?i[t-1]:null,s=t<i.length-1?i[t+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?e.end-e.start:s-o)),null===s&&(s=o+o-a);const c=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:c}}(t,e,i,r):function(t,e,n,r){const i=n.barThickness;let o,a;return u(i)?(o=e.min*n.categoryPercentage,a=n.barPercentage):(o=i*r,a=1),{chunk:o/r,ratio:a,start:e.pixels[t]-o/2}}(t,e,i,r),d=n._getStackIndex(n.index,n._cachedMeta.stack,o?t:void 0);s=c.start+c.chunk*d+c.chunk/2,l=Math.min(a,c.chunk*c.ratio)}else s=r.getPixelForValue(n.getParsed(t)[r.axis],t),l=Math.min(a,e.min*e.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const t=this,e=t._cachedMeta,n=e.vScale,r=e.data,i=r.length;let o=0;for(;o<i;++o)null!==t.getParsed(o)[n.axis]&&r[o].draw(t._ctx)}}Tn.id="bar",Tn.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Tn.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Dn extends wn{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(t,e,n,r){const{xScale:i,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=[];let c,u,d;for(c=n,u=n+r;c<u;++c)d=e[c],l.push({x:i.parse(C(d,a),c),y:o.parse(C(d,s),c),_custom:d&&d.r&&+d.r});return l}getMaxOverflow(){const{data:t,_parsed:e}=this._cachedMeta;let n=0;for(let r=t.length-1;r>=0;--r)n=Math.max(n,t[r].size()/2,e[r]._custom);return n>0&&n}getLabelAndValue(t){const e=this._cachedMeta,{xScale:n,yScale:r}=e,i=this.getParsed(t),o=n.getLabelForValue(i.x),a=r.getLabelForValue(i.y),s=i._custom;return{label:e.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s}=i._cachedMeta,l=i.resolveDataElementOptions(e,r),c=i.getSharedOptions(l),u=i.includeOptions(r,c),d=a.axis,f=s.axis;for(let l=e;l<e+n;l++){const e=t[l],n=!o&&i.getParsed(l),c={},h=c[d]=o?a.getPixelForDecimal(.5):a.getPixelForValue(n[d]),p=c[f]=o?s.getBasePixel():s.getPixelForValue(n[f]);c.skip=isNaN(h)||isNaN(p),u&&(c.options=i.resolveDataElementOptions(l,e.active?"active":r),o&&(c.options.radius=0)),i.updateElement(e,l,c,r)}i.updateSharedOptions(c,r,l)}resolveDataElementOptions(t,e){const n=this.getParsed(t);let r=super.resolveDataElementOptions(t,e);r.$shared&&(r=Object.assign({},r,{$shared:!1}));const i=r.radius;return"active"!==e&&(r.radius=0),r.radius+=g(n&&n._custom,i),r}}Dn.id="bubble",Dn.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Dn.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Ln extends wn{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,r=this._cachedMeta;let i,o;for(i=t,o=t+e;i<o;++i)r._parsed[i]=+n[i]}_getRotation(){return $(this.options.rotation-90)}_getCircumference(){return $(this.options.circumference)}_getRotationExtents(){let t=L,e=-L;const n=this;for(let r=0;r<n.chart.data.datasets.length;++r)if(n.chart.isDatasetVisible(r)){const i=n.chart.getDatasetMeta(r).controller,o=i._getRotation(),a=i._getCircumference();t=Math.min(t,o),e=Math.max(e,o+a)}return{rotation:t,circumference:e-t}}update(t){const e=this,n=e.chart,{chartArea:r}=n,i=e._cachedMeta,o=i.data,a=e.getMaxBorderWidth()+e.getMaxOffset(o)+e.options.spacing,s=Math.max((Math.min(r.width,r.height)-a)/2,0),l=Math.min((u=s,"string"==typeof(c=e.options.cutout)&&c.endsWith("%")?parseFloat(c)/100:c/u),1);var c,u;const d=e._getRingWeight(e.index),{circumference:f,rotation:h}=e._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:b,offsetY:v}=function(t,e,n){let r=1,i=1,o=0,a=0;if(e<L){const s=t,l=s+e,c=Math.cos(s),u=Math.sin(s),d=Math.cos(l),f=Math.sin(l),h=(t,e,r)=>G(t,s,l,!0)?1:Math.max(e,e*n,r,r*n),p=(t,e,r)=>G(t,s,l,!0)?-1:Math.min(e,e*n,r,r*n),g=h(0,c,d),m=h(F,u,f),b=p(D,c,d),v=p(D+F,u,f);r=(g-b)/2,i=(m-v)/2,o=-(g+b)/2,a=-(m+v)/2}return{ratioX:r,ratioY:i,offsetX:o,offsetY:a}}(h,f,l),y=(r.width-a)/p,x=(r.height-a)/g,_=Math.max(Math.min(y,x)/2,0),w=m(e.options.radius,_),k=(w-Math.max(w*l,0))/e._getVisibleDatasetWeightTotal();e.offsetX=b*w,e.offsetY=v*w,i.total=e.calculateTotal(),e.outerRadius=w-k*e._getRingWeightOffset(e.index),e.innerRadius=Math.max(e.outerRadius-k*d,0),e.updateElements(o,0,o.length,t)}_circumference(t,e){const n=this,r=n.options,i=n._cachedMeta,o=n._getCircumference();return e&&r.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:n.calculateCircumference(i._parsed[t]*o/L)}updateElements(t,e,n,r){const i=this,o="reset"===r,a=i.chart,s=a.chartArea,l=a.options.animation,c=(s.left+s.right)/2,u=(s.top+s.bottom)/2,d=o&&l.animateScale,f=d?0:i.innerRadius,h=d?0:i.outerRadius,p=i.resolveDataElementOptions(e,r),g=i.getSharedOptions(p),m=i.includeOptions(r,g);let b,v=i._getRotation();for(b=0;b<e;++b)v+=i._circumference(b,o);for(b=e;b<e+n;++b){const e=i._circumference(b,o),n=t[b],a={x:c+i.offsetX,y:u+i.offsetY,startAngle:v,endAngle:v+e,circumference:e,outerRadius:h,innerRadius:f};m&&(a.options=g||i.resolveDataElementOptions(b,n.active?"active":r)),v+=e,i.updateElement(n,b,a,r)}i.updateSharedOptions(g,r,p)}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,r=0;for(n=0;n<e.length;n++){const i=t._parsed[n];null===i||isNaN(i)||!this.chart.getDataVisibility(n)||e[n].hidden||(r+=Math.abs(i))}return r}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?L*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=qe(e._parsed[t],n.options.locale);return{label:r[t]||"",value:i}}getMaxBorderWidth(t){const e=this;let n=0;const r=e.chart;let i,o,a,s,l;if(!t)for(i=0,o=r.data.datasets.length;i<o;++i)if(r.isDatasetVisible(i)){a=r.getDatasetMeta(i),t=a.data,s=a.controller,s!==e&&s.configure();break}if(!t)return 0;for(i=0,o=t.length;i<o;++i)l=s.resolveDataElementOptions(i),"inner"!==l.borderAlign&&(n=Math.max(n,l.borderWidth||0,l.hoverBorderWidth||0));return n}getMaxOffset(t){let e=0;for(let n=0,r=t.length;n<r;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(g(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Ln.id="doughnut",Ln.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Ln.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Ln.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,r)=>{const i=t.getDatasetMeta(0).controller.getStyle(r);return{text:e,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(r),index:r}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const n=": "+t.formattedValue;return d(e)?(e=e.slice(),e[0]+=n):e+=n,e}}}}};class zn extends wn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this,n=e._cachedMeta,{dataset:r,data:i=[],_dataset:o}=n,a=e.chart._animationsDisabled;let{start:s,count:l}=function(t,e,n){const r=e.length;let i=0,o=r;if(t._sorted){const{iScale:a,_parsed:s}=t,l=a.axis,{min:c,max:u,minDefined:d,maxDefined:f}=a.getUserBounds();d&&(i=Z(Math.min(ce(s,a.axis,c).lo,n?r:ce(e,l,a.getPixelForValue(c)).lo),0,r-1)),o=f?Z(Math.max(ce(s,a.axis,u).hi+1,n?0:ce(e,l,a.getPixelForValue(u)).hi+1),i,r)-i:r-i}return{start:i,count:o}}(n,i,a);e._drawStart=s,e._drawCount=l,function(t){const{xScale:e,yScale:n,_scaleRanges:r}=t,i={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!r)return t._scaleRanges=i,!0;const o=r.xmin!==e.min||r.xmax!==e.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),o}(n)&&(s=0,l=i.length),r._datasetIndex=e.index,r._decimated=!!o._decimated,r.points=i;const c=e.resolveDatasetElementOptions(t);e.options.showLine||(c.borderWidth=0),c.segment=e.options.segment,e.updateElement(r,void 0,{animated:!a,options:c},t),e.updateElements(i,s,l,t)}updateElements(t,e,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s,_stacked:l}=i._cachedMeta,c=i.resolveDataElementOptions(e,r),d=i.getSharedOptions(c),f=i.includeOptions(r,d),h=a.axis,p=s.axis,g=i.options.spanGaps,m=W(g)?g:Number.POSITIVE_INFINITY,b=i.chart._animationsDisabled||o||"none"===r;let v=e>0&&i.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=i.getParsed(c),g=b?e:{},y=u(n[p]),x=g[h]=a.getPixelForValue(n[h],c),_=g[p]=o||y?s.getBasePixel():s.getPixelForValue(l?i.applyStack(s,n,l):n[p],c);g.skip=isNaN(x)||isNaN(_)||y,g.stop=c>0&&n[h]-v[h]>m,g.parsed=n,f&&(g.options=d||i.resolveDataElementOptions(c,e.active?"active":r)),b||i.updateElement(e,c,g,r),v=n}i.updateSharedOptions(d,r,c)}getMaxOverflow(){const t=this,e=t._cachedMeta,n=e.dataset,r=n.options&&n.options.borderWidth||0,i=e.data||[];if(!i.length)return r;const o=i[0].size(t.resolveDataElementOptions(0)),a=i[i.length-1].size(t.resolveDataElementOptions(i.length-1));return Math.max(r,o,a)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}zn.id="line",zn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},zn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Rn extends wn{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=qe(e._parsed[t].r,n.options.locale);return{label:r[t]||"",value:i}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this,e=t.chart,n=e.chartArea,r=e.options,i=Math.min(n.right-n.left,n.bottom-n.top),o=Math.max(i/2,0),a=(o-Math.max(r.cutoutPercentage?o/100*r.cutoutPercentage:1,0))/e.getVisibleDatasetCount();t.outerRadius=o-a*t.index,t.innerRadius=t.outerRadius-a}updateElements(t,e,n,r){const i=this,o="reset"===r,a=i.chart,s=i.getDataset(),l=a.options.animation,c=i._cachedMeta.rScale,u=c.xCenter,d=c.yCenter,f=c.getIndexAngle(0)-.5*D;let h,p=f;const g=360/i.countVisibleElements();for(h=0;h<e;++h)p+=i._computeAngle(h,r,g);for(h=e;h<e+n;h++){const e=t[h];let n=p,m=p+i._computeAngle(h,r,g),b=a.getDataVisibility(h)?c.getDistanceFromCenterForValue(s.data[h]):0;p=m,o&&(l.animateScale&&(b=0),l.animateRotate&&(n=m=f));const v={x:u,y:d,innerRadius:0,outerRadius:b,startAngle:n,endAngle:m,options:i.resolveDataElementOptions(h,e.active?"active":r)};i.updateElement(e,h,v,r)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let n=0;return e.data.forEach(((e,r)=>{!isNaN(t.data[r])&&this.chart.getDataVisibility(r)&&n++})),n}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?$(this.resolveDataElementOptions(t,e).angle||n):0}}Rn.id="polarArea",Rn.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Rn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,r)=>{const i=t.getDatasetMeta(0).controller.getStyle(r);return{text:e,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(r),index:r}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class An extends Ln{}An.id="pie",An.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Fn extends wn{getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}update(t){const e=this,n=e._cachedMeta,r=n.dataset,i=n.data||[],o=n.iScale.getLabels();if(r.points=i,"resize"!==t){const n=e.resolveDatasetElementOptions(t);e.options.showLine||(n.borderWidth=0);const a={_loop:!0,_fullLoop:o.length===i.length,options:n};e.updateElement(r,void 0,a,t)}e.updateElements(i,0,i.length,t)}updateElements(t,e,n,r){const i=this,o=i.getDataset(),a=i._cachedMeta.rScale,s="reset"===r;for(let l=e;l<e+n;l++){const e=t[l],n=i.resolveDataElementOptions(l,e.active?"active":r),c=a.getPointPositionForValue(l,o.data[l]),u=s?a.xCenter:c.x,d=s?a.yCenter:c.y,f={x:u,y:d,angle:c.angle,skip:isNaN(u)||isNaN(d),options:n};i.updateElement(e,l,f,r)}}}Fn.id="radar",Fn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Fn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class In extends zn{}In.id="scatter",In.defaults={showLine:!1,fill:!1},In.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Nn=Object.freeze({__proto__:null,BarController:Tn,BubbleController:Dn,DoughnutController:Ln,LineController:zn,PolarAreaController:Rn,PieController:An,RadarController:Fn,ScatterController:In});function jn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Vn{constructor(t){this.options=t||{}}formats(){return jn()}parse(t,e){return jn()}format(t,e){return jn()}add(t,e,n){return jn()}diff(t,e,n){return jn()}startOf(t,e,n){return jn()}endOf(t,e){return jn()}}Vn.override=function(t){Object.assign(Vn.prototype,t)};var Bn={_date:Vn};function Wn(t,e){return"native"in t?{x:t.x,y:t.y}:je(t,e)}function Hn(t,e,n,r){const{controller:i,data:o,_sorted:a}=t,s=i._cachedMeta.iScale;if(s&&e===s.axis&&a&&o.length){const t=s._reversePixels?ue:ce;if(!r)return t(o,e,n);if(i._sharedOptions){const r=o[0],i="function"==typeof r.getRange&&r.getRange(e);if(i){const r=t(o,e,n-i),a=t(o,e,n+i);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function Un(t,e,n,r,i){const o=t.getSortedVisibleDatasetMetas(),a=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:s}=o[t],{lo:l,hi:c}=Hn(o[t],e,a,i);for(let t=l;t<=c;++t){const e=s[t];e.skip||r(e,n,t)}}}function $n(t,e,n,r){const i=[];return $t(e,t.chartArea,t._minPadding)?(Un(t,n,e,(function(t,n,o){t.inRange(e.x,e.y,r)&&i.push({element:t,datasetIndex:n,index:o})}),!0),i):i}function Yn(t,e,n,r,i){const o=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,r){const i=e?Math.abs(t.x-r.x):0,o=n?Math.abs(t.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}(n);let a=Number.POSITIVE_INFINITY,s=[];return $t(e,t.chartArea,t._minPadding)?(Un(t,n,e,(function(n,l,c){if(r&&!n.inRange(e.x,e.y,i))return;const u=n.getCenterPoint(i);if(!$t(u,t.chartArea,t._minPadding)&&!n.inRange(e.x,e.y,i))return;const d=o(e,u);d<a?(s=[{element:n,datasetIndex:l,index:c}],a=d):d===a&&s.push({element:n,datasetIndex:l,index:c})})),s):s}function Qn(t,e,n,r){const i=Wn(e,t),o=[],a=n.axis,s="x"===a?"inXRange":"inYRange";let l=!1;return function(t,e){const n=t.getSortedVisibleDatasetMetas();let r,i,o;for(let t=0,a=n.length;t<a;++t){({index:r,data:i}=n[t]);for(let t=0,n=i.length;t<n;++t)o=i[t],o.skip||e(o,r,t)}}(t,((t,e,n)=>{t[s](i[a],r)&&o.push({element:t,datasetIndex:e,index:n}),t.inRange(i.x,i.y,r)&&(l=!0)})),n.intersect&&!l?[]:o}var qn={modes:{index(t,e,n,r){const i=Wn(e,t),o=n.axis||"x",a=n.intersect?$n(t,i,o,r):Yn(t,i,o,!1,r),s=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,n=t.data[e];n&&!n.skip&&s.push({element:n,datasetIndex:t.index,index:e})})),s):[]},dataset(t,e,n,r){const i=Wn(e,t),o=n.axis||"xy";let a=n.intersect?$n(t,i,o,r):Yn(t,i,o,!1,r);if(a.length>0){const e=a[0].datasetIndex,n=t.getDatasetMeta(e).data;a=[];for(let t=0;t<n.length;++t)a.push({element:n[t],datasetIndex:e,index:t})}return a},point:(t,e,n,r)=>$n(t,Wn(e,t),n.axis||"xy",r),nearest:(t,e,n,r)=>Yn(t,Wn(e,t),n.axis||"xy",n.intersect,r),x:(t,e,n,r)=>(n.axis="x",Qn(t,e,n,r)),y:(t,e,n,r)=>(n.axis="y",Qn(t,e,n,r))}};const Xn=["left","top","right","bottom"];function Kn(t,e){return t.filter((t=>t.pos===e))}function Gn(t,e){return t.filter((t=>-1===Xn.indexOf(t.pos)&&t.box.axis===e))}function Zn(t,e){return t.sort(((t,n)=>{const r=e?n:t,i=e?t:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function Jn(t,e,n,r){return Math.max(t[n],e[n])+Math.max(t[r],e[r])}function tr(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function er(t,e,n,r){const{pos:i,box:o}=n,a=t.maxPadding;if(!f(i)){n.size&&(t[i]-=n.size);const e=r[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[i]+=n.size}o.getPadding&&tr(a,o.getPadding());const s=Math.max(0,e.outerWidth-Jn(a,t,"left","right")),l=Math.max(0,e.outerHeight-Jn(a,t,"top","bottom")),c=s!==t.w,u=l!==t.h;return t.w=s,t.h=l,n.horizontal?{same:c,other:u}:{same:u,other:c}}function nr(t,e){const n=e.maxPadding;return function(t){const r={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{r[t]=Math.max(e[t],n[t])})),r}(t?["left","right"]:["top","bottom"])}function rr(t,e,n,r){const i=[];let o,a,s,l,c,u;for(o=0,a=t.length,c=0;o<a;++o){s=t[o],l=s.box,l.update(s.width||e.w,s.height||e.h,nr(s.horizontal,e));const{same:a,other:d}=er(e,n,s,r);c|=a&&i.length,u=u||d,l.fullSize||i.push(s)}return c&&rr(i,e,n,r)||u}function ir(t,e,n,r,i){t.top=n,t.left=e,t.right=e+r,t.bottom=n+i,t.width=r,t.height=i}function or(t,e,n,r){const i=n.padding;let{x:o,y:a}=e;for(const s of t){const t=s.box,l=r[s.stack]||{count:1,placed:0,weight:1},c=s.stackWeight/l.weight||1;if(s.horizontal){const r=e.w*c,o=l.size||t.height;O(l.start)&&(a=l.start),t.fullSize?ir(t,i.left,a,n.outerWidth-i.right-i.left,o):ir(t,e.left+l.placed,a,r,o),l.start=a,l.placed+=r,a=t.bottom}else{const r=e.h*c,a=l.size||t.width;O(l.start)&&(o=l.start),t.fullSize?ir(t,o,i.top,a,n.outerHeight-i.bottom-i.top):ir(t,o,e.top+l.placed,a,r),l.start=o,l.placed+=r,o=t.right}}e.x=o,e.y=a}jt.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var ar={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,r){if(!t)return;const i=oe(t.options.layout.padding),o=Math.max(e-i.width,0),a=Math.max(n-i.height,0),s=function(t){const e=function(t){const e=[];let n,r,i,o,a,s;for(n=0,r=(t||[]).length;n<r;++n)i=t[n],({position:o,options:{stack:a,stackWeight:s=1}}=i),e.push({index:n,box:i,pos:o,horizontal:i.isHorizontal(),weight:i.weight,stack:a&&o+a,stackWeight:s});return e}(t),n=Zn(e.filter((t=>t.box.fullSize)),!0),r=Zn(Kn(e,"left"),!0),i=Zn(Kn(e,"right")),o=Zn(Kn(e,"top"),!0),a=Zn(Kn(e,"bottom")),s=Gn(e,"x"),l=Gn(e,"y");return{fullSize:n,leftAndTop:r.concat(o),rightAndBottom:i.concat(l).concat(a).concat(s),chartArea:Kn(e,"chartArea"),vertical:r.concat(i).concat(l),horizontal:o.concat(a).concat(s)}}(t.boxes),l=s.vertical,c=s.horizontal;v(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:n,padding:i,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/u,hBoxMaxHeight:a/2}),f=Object.assign({},i);tr(f,oe(r));const h=Object.assign({maxPadding:f,w:o,h:a,x:i.left,y:i.top},i),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:r,stackWeight:i}=n;if(!t||!Xn.includes(r))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=i}return e}(t),{vBoxMaxWidth:r,hBoxMaxHeight:i}=e;let o,a,s;for(o=0,a=t.length;o<a;++o){s=t[o];const{fullSize:a}=s.box,l=n[s.stack],c=l&&s.stackWeight/l.weight;s.horizontal?(s.width=c?c*r:a&&e.availableWidth,s.height=i):(s.width=r,s.height=c?c*i:a&&e.availableHeight)}return n}(l.concat(c),d);rr(s.fullSize,h,d,p),rr(l,h,d,p),rr(c,h,d,p)&&rr(l,h,d,p),function(t){const e=t.maxPadding;function n(n){const r=Math.max(e[n]-t[n],0);return t[n]+=r,r}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(h),or(s.leftAndTop,h,d,p),h.x+=h.w,h.y+=h.h,or(s.rightAndBottom,h,d,p),t.chartArea={left:h.left,top:h.top,right:h.left+h.w,bottom:h.top+h.h,height:h.h,width:h.w},v(s.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(h.w,h.h)}))}};class sr{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,r){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,r?Math.floor(e/r):n)}}isAttached(t){return!0}}class lr extends sr{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}}const cr={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ur=t=>null===t||""===t,dr=!!We&&{passive:!0};function fr(t,e,n){t.canvas.removeEventListener(e,n,dr)}function hr(t,e,n){const r=t.canvas,i=r&&Re(r)||r,o=new MutationObserver((t=>{const e=Re(i);t.forEach((t=>{for(let r=0;r<t.addedNodes.length;r++){const o=t.addedNodes[r];o!==i&&o!==e||n(t.target)}}))}));return o.observe(document,{childList:!0,subtree:!0}),o}function pr(t,e,n){const r=t.canvas,i=r&&Re(r);if(!i)return;const o=new MutationObserver((t=>{t.forEach((t=>{for(let e=0;e<t.removedNodes.length;e++)if(t.removedNodes[e]===r){n();break}}))}));return o.observe(i,{childList:!0}),o}const gr=new Map;let mr=0;function br(){const t=window.devicePixelRatio;t!==mr&&(mr=t,gr.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function vr(t,e,n){const r=t.canvas,i=r&&Re(r);if(!i)return;const a=o(((t,e)=>{const r=i.clientWidth;n(t,e),r<i.clientWidth&&n()}),window),s=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,r=e.contentRect.height;0===n&&0===r||a(n,r)}));return s.observe(i),function(t,e){gr.size||window.addEventListener("resize",br),gr.set(t,e)}(t,a),s}function yr(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){gr.delete(t),gr.size||window.removeEventListener("resize",br)}(t)}function xr(t,e,n){const r=t.canvas,i=o((e=>{null!==t.ctx&&n(function(t,e){const n=cr[t.type]||t.type,{x:r,y:i}=je(t,e);return{type:n,chart:e,native:t,x:void 0!==r?r:null,y:void 0!==i?i:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,n){t.addEventListener(e,n,dr)}(r,e,i),i}class _r extends sr{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,r=t.getAttribute("height"),i=t.getAttribute("width");if(t.$chartjs={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ur(i)){const e=He(t,"width");void 0!==e&&(t.width=e)}if(ur(r))if(""===t.style.height)t.height=t.width/(e||2);else{const e=He(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const r=n[t];u(r)?e.removeAttribute(t):e.setAttribute(t,r)}));const r=n.style||{};return Object.keys(r).forEach((t=>{e.style[t]=r[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const r=t.$proxies||(t.$proxies={}),i={attach:hr,detach:pr,resize:vr}[e]||xr;r[e]=i(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),r=n[e];r&&(({attach:yr,detach:yr,resize:yr}[e]||fr)(t,e,r),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,r){return function(t,e,n,r){const i=Fe(t),o=Ne(i,"margin"),a=Ae(i.maxWidth,t,"clientWidth")||R,s=Ae(i.maxHeight,t,"clientHeight")||R,l=function(t,e,n){let r,i;if(void 0===e||void 0===n){const o=Re(t);if(o){const t=o.getBoundingClientRect(),a=Fe(o),s=Ne(a,"border","width"),l=Ne(a,"padding");e=t.width-l.width-s.width,n=t.height-l.height-s.height,r=Ae(a.maxWidth,o,"clientWidth"),i=Ae(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:r||R,maxHeight:i||R}}(t,e,n);let{width:c,height:u}=l;if("content-box"===i.boxSizing){const t=Ne(i,"border","width"),e=Ne(i,"padding");c-=e.width+t.width,u-=e.height+t.height}return c=Math.max(0,c-o.width),u=Math.max(0,r?Math.floor(c/r):u-o.height),c=Ve(Math.min(c,a,l.maxWidth)),u=Ve(Math.min(u,s,l.maxHeight)),c&&!u&&(u=Ve(c/2)),{width:c,height:u}}(t,e,n,r)}isAttached(t){const e=Re(t);return!(!e||!e.isConnected)}}class wr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return W(this.x)&&W(this.y)}getProps(t,e){const n=this,r=this.$animations;if(!e||!r)return n;const i={};return t.forEach((t=>{i[t]=r[t]&&r[t].active()?r[t]._to:n[t]})),i}}wr.defaults={},wr.defaultRoutes=void 0;const kr={values:t=>d(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const r=this.chart.options.locale;let i,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(i="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const a=j(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:i,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),qe(t,r,l)},logarithmic(t,e,n){if(0===t)return"0";const r=t/Math.pow(10,Math.floor(j(t)));return 1===r||2===r||5===r?kr.numeric.call(this,t,e,n):""}};var Sr={formatters:kr};function Mr(t,e,n,r,i){const o=g(r,0),a=Math.min(g(i,t.length),t.length);let s,l,c,u=0;for(n=Math.ceil(n),i&&(s=i-r,n=s/Math.floor(s/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<a;l++)l===c&&(e.push(t[l]),u++,c=Math.round(o+u*n))}jt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Sr.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),jt.route("scale.ticks","color","","color"),jt.route("scale.grid","color","","borderColor"),jt.route("scale.grid","borderColor","","borderColor"),jt.route("scale.title","color","","color"),jt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),jt.describe("scales",{_fallback:"scale"}),jt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Er=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function Cr(t,e){const n=[],r=t.length/e,i=t.length;let o=0;for(;o<i;o+=r)n.push(t[Math.floor(o)]);return n}function Pr(t,e,n){const r=t.ticks.length,i=Math.min(e,r-1),o=t._startPixel,a=t._endPixel,s=1e-6;let l,c=t.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(c-o,a-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(i-1))/2,c+=i<e?l:-l,c<o-s||c>a+s)))return c}function Or(t){return t.drawTicks?t.tickLength:0}function Tr(t,e){if(!t.display)return 0;const n=ae(t.font,e),r=oe(t.padding);return(d(t.text)?t.text.length:1)*n.lineHeight+r.height}function Dr(t,e,n){let r=a(t);return(n&&"right"!==e||!n&&"right"===e)&&(r=(t=>"left"===t?"right":"right"===t?"left":t)(r)),r}class Lr extends wr{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){const e=this;e.options=t.setContext(e.getContext()),e.axis=t.axis,e._userMin=e.parse(t.min),e._userMax=e.parse(t.max),e._suggestedMin=e.parse(t.suggestedMin),e._suggestedMax=e.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:r}=this;return t=p(t,Number.POSITIVE_INFINITY),e=p(e,Number.NEGATIVE_INFINITY),n=p(n,Number.POSITIVE_INFINITY),r=p(r,Number.NEGATIVE_INFINITY),{min:p(t,n),max:p(e,r),minDefined:h(t),maxDefined:h(e)}}getMinMax(t){const e=this;let n,{min:r,max:i,minDefined:o,maxDefined:a}=e.getUserBounds();if(o&&a)return{min:r,max:i};const s=e.getMatchingVisibleMetas();for(let l=0,c=s.length;l<c;++l)n=s[l].controller.getMinMax(e,t),o||(r=Math.min(r,n.min)),a||(i=Math.max(i,n.max));return{min:p(r,p(i,r)),max:p(i,p(r,i))}}getPadding(){const t=this;return{left:t.paddingLeft||0,top:t.paddingTop||0,right:t.paddingRight||0,bottom:t.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){b(this.options.beforeUpdate,[this])}update(t,e,n){const r=this,i=r.options.ticks,o=i.sampleSize;r.beforeUpdate(),r.maxWidth=t,r.maxHeight=e,r._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),r.ticks=null,r._labelSizes=null,r._gridLineItems=null,r._labelItems=null,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r._maxLength=r.isHorizontal()?r.width+n.left+n.right:r.height+n.top+n.bottom,r._dataLimitsCached||(r.beforeDataLimits(),r.determineDataLimits(),r.afterDataLimits(),r._range=function(t,e){const{min:n,max:r}=t;return{min:n-Math.abs(m(e,n)),max:r+m(e,r)}}(r,r.options.grace),r._dataLimitsCached=!0),r.beforeBuildTicks(),r.ticks=r.buildTicks()||[],r.afterBuildTicks();const a=o<r.ticks.length;r._convertTicksToLabels(a?Cr(r.ticks,o):r.ticks),r.configure(),r.beforeCalculateLabelRotation(),r.calculateLabelRotation(),r.afterCalculateLabelRotation(),i.display&&(i.autoSkip||"auto"===i.source)&&(r.ticks=function(t,e){const n=t.options.ticks,r=n.maxTicksLimit||function(t){const e=t.options.offset,n=t._tickSize(),r=t._length/n+(e?0:1),i=t._maxLength/n;return Math.floor(Math.min(r,i))}(t),i=n.major.enabled?function(t){const e=[];let n,r;for(n=0,r=t.length;n<r;n++)t[n].major&&e.push(n);return e}(e):[],o=i.length,a=i[0],s=i[o-1],l=[];if(o>r)return function(t,e,n,r){let i,o=0,a=n[0];for(r=Math.ceil(r),i=0;i<t.length;i++)i===a&&(e.push(t[i]),o++,a=n[o*r])}(e,l,i,o/r),l;const c=function(t,e,n){const r=function(t){const e=t.length;let n,r;if(e<2)return!1;for(r=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==r)return!1;return r}(t),i=e.length/n;if(!r)return Math.max(i,1);const o=function(t){const e=[],n=Math.sqrt(t);let r;for(r=1;r<n;r++)t%r==0&&(e.push(r),e.push(t/r));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(r);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>i)return e}return Math.max(i,1)}(i,e,r);if(o>0){let t,n;const r=o>1?Math.round((s-a)/(o-1)):null;for(Mr(e,l,c,u(r)?0:a-r,a),t=0,n=o-1;t<n;t++)Mr(e,l,c,i[t],i[t+1]);return Mr(e,l,c,s,u(r)?e.length:s+r),l}return Mr(e,l,c),l}(r,r.ticks),r._labelSizes=null),a&&r._convertTicksToLabels(r.ticks),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate()}configure(){const t=this;let e,n,r=t.options.reverse;t.isHorizontal()?(e=t.left,n=t.right):(e=t.top,n=t.bottom,r=!r),t._startPixel=e,t._endPixel=n,t._reversePixels=r,t._length=n-e,t._alignToPixels=t.options.alignToPixels}afterUpdate(){b(this.options.afterUpdate,[this])}beforeSetDimensions(){b(this.options.beforeSetDimensions,[this])}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0}afterSetDimensions(){b(this.options.afterSetDimensions,[this])}_callHooks(t){const e=this;e.chart.notifyPlugins(t,e.getContext()),b(e.options[t],[e])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){b(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this,n=e.options.ticks;let r,i,o;for(r=0,i=t.length;r<i;r++)o=t[r],o.label=b(n.callback,[o.value,r,t],e)}afterTickToLabelConversion(){b(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){b(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this,e=t.options,n=e.ticks,r=t.ticks.length,i=n.minRotation||0,o=n.maxRotation;let a,s,l,c=i;if(!t._isVisible()||!n.display||i>=o||r<=1||!t.isHorizontal())return void(t.labelRotation=i);const u=t._getLabelSizes(),d=u.widest.width,f=u.highest.height,h=Z(t.chart.width-d,0,t.maxWidth);a=e.offset?t.maxWidth/r:h/(r-1),d+6>a&&(a=h/(r-(e.offset?.5:1)),s=t.maxHeight-Or(e.grid)-n.padding-Tr(e.title,t.chart.options.font),l=Math.sqrt(d*d+f*f),c=Y(Math.min(Math.asin(Z((u.highest.height+6)/a,-1,1)),Math.asin(Z(s/l,-1,1))-Math.asin(Z(f/l,-1,1)))),c=Math.max(i,Math.min(o,c))),t.labelRotation=c}afterCalculateLabelRotation(){b(this.options.afterCalculateLabelRotation,[this])}beforeFit(){b(this.options.beforeFit,[this])}fit(){const t=this,e={width:0,height:0},{chart:n,options:{ticks:r,title:i,grid:o}}=t,a=t._isVisible(),s=t.isHorizontal();if(a){const a=Tr(i,n.options.font);if(s?(e.width=t.maxWidth,e.height=Or(o)+a):(e.height=t.maxHeight,e.width=Or(o)+a),r.display&&t.ticks.length){const{first:n,last:i,widest:o,highest:a}=t._getLabelSizes(),l=2*r.padding,c=$(t.labelRotation),u=Math.cos(c),d=Math.sin(c);if(s){const n=r.mirror?0:d*o.width+u*a.height;e.height=Math.min(t.maxHeight,e.height+n+l)}else{const n=r.mirror?0:u*o.width+d*a.height;e.width=Math.min(t.maxWidth,e.width+n+l)}t._calculatePadding(n,i,d,u)}}t._handleMargins(),s?(t.width=t._length=n.width-t._margins.left-t._margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t._margins.top-t._margins.bottom)}_calculatePadding(t,e,n,r){const i=this,{ticks:{align:o,padding:a},position:s}=i.options,l=0!==i.labelRotation,c="top"!==s&&"x"===i.axis;if(i.isHorizontal()){const s=i.getPixelForTick(0)-i.left,u=i.right-i.getPixelForTick(i.ticks.length-1);let d=0,f=0;l?c?(d=r*t.width,f=n*e.height):(d=n*t.height,f=r*e.width):"start"===o?f=e.width:"end"===o?d=t.width:(d=t.width/2,f=e.width/2),i.paddingLeft=Math.max((d-s+a)*i.width/(i.width-s),0),i.paddingRight=Math.max((f-u+a)*i.width/(i.width-u),0)}else{let n=e.height/2,r=t.height/2;"start"===o?(n=0,r=t.height):"end"===o&&(n=e.height,r=0),i.paddingTop=n+a,i.paddingBottom=r+a}}_handleMargins(){const t=this;t._margins&&(t._margins.left=Math.max(t.paddingLeft,t._margins.left),t._margins.top=Math.max(t.paddingTop,t._margins.top),t._margins.right=Math.max(t.paddingRight,t._margins.right),t._margins.bottom=Math.max(t.paddingBottom,t._margins.bottom))}afterFit(){b(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){const e=this;let n,r;for(e.beforeTickToLabelConversion(),e.generateTickLabels(t),n=0,r=t.length;n<r;n++)u(t[n].label)&&(t.splice(n,1),r--,n--);e.afterTickToLabelConversion()}_getLabelSizes(){const t=this;let e=t._labelSizes;if(!e){const n=t.options.ticks.sampleSize;let r=t.ticks;n<r.length&&(r=Cr(r,n)),t._labelSizes=e=t._computeLabelSizes(r,r.length)}return e}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:r}=this,i=[],o=[];let a,s,l,c,f,h,p,g,m,b,y,x=0,_=0;for(a=0;a<e;++a){if(c=t[a].label,f=this._resolveTickFontOptions(a),n.font=h=f.string,p=r[h]=r[h]||{data:{},gc:[]},g=f.lineHeight,m=b=0,u(c)||d(c)){if(d(c))for(s=0,l=c.length;s<l;++s)y=c[s],u(y)||d(y)||(m=Vt(n,p.data,p.gc,m,y),b+=g)}else m=Vt(n,p.data,p.gc,m,c),b=g;i.push(m),o.push(b),x=Math.max(m,x),_=Math.max(b,_)}!function(t,e){v(t,(t=>{const n=t.gc,r=n.length/2;let i;if(r>e){for(i=0;i<r;++i)delete t.data[n[i]];n.splice(0,r)}}))}(r,e);const w=i.indexOf(x),k=o.indexOf(_),S=t=>({width:i[t]||0,height:o[t]||0});return{first:S(0),last:S(e-1),widest:S(w),highest:S(k),widths:i,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){const e=this;e._reversePixels&&(t=1-t);const n=e._startPixel+t*e._length;return Z(e._alignToPixels?Wt(e.chart,n,0):n,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this,n=e.ticks||[];if(t>=0&&t<n.length){const r=n[t];return r.$context||(r.$context=function(t,e,n){return Object.assign(Object.create(t),{tick:n,index:e,type:"tick"})}(e.getContext(),t,r))}return e.$context||(e.$context=(r=e.chart.getContext(),i=e,Object.assign(Object.create(r),{scale:i,type:"scale"})));var r,i}_tickSize(){const t=this,e=t.options.ticks,n=$(t.labelRotation),r=Math.abs(Math.cos(n)),i=Math.abs(Math.sin(n)),o=t._getLabelSizes(),a=e.autoSkipPadding||0,s=o?o.widest.width+a:0,l=o?o.highest.height+a:0;return t.isHorizontal()?l*r>s*i?s/r:l/i:l*i<s*r?l/r:s/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this,n=e.axis,r=e.chart,i=e.options,{grid:o,position:a}=i,s=o.offset,l=e.isHorizontal(),c=e.ticks.length+(s?1:0),u=Or(o),d=[],h=o.setContext(e.getContext()),p=h.drawBorder?h.borderWidth:0,m=p/2,b=function(t){return Wt(r,t,p)};let v,y,x,_,w,k,S,M,E,C,P,O;if("top"===a)v=b(e.bottom),k=e.bottom-u,M=v-m,C=b(t.top)+m,O=t.bottom;else if("bottom"===a)v=b(e.top),C=t.top,O=b(t.bottom)-m,k=v+m,M=e.top+u;else if("left"===a)v=b(e.right),w=e.right-u,S=v-m,E=b(t.left)+m,P=t.right;else if("right"===a)v=b(e.left),E=t.left,P=b(t.right)-m,w=v+m,S=e.left+u;else if("x"===n){if("center"===a)v=b((t.top+t.bottom)/2+.5);else if(f(a)){const t=Object.keys(a)[0],n=a[t];v=b(e.chart.scales[t].getPixelForValue(n))}C=t.top,O=t.bottom,k=v+m,M=k+u}else if("y"===n){if("center"===a)v=b((t.left+t.right)/2);else if(f(a)){const t=Object.keys(a)[0],n=a[t];v=b(e.chart.scales[t].getPixelForValue(n))}w=v-m,S=w-u,E=t.left,P=t.right}const T=g(i.ticks.maxTicksLimit,c),D=Math.max(1,Math.ceil(c/T));for(y=0;y<c;y+=D){const t=o.setContext(e.getContext(y)),n=t.lineWidth,i=t.color,a=o.borderDash||[],c=t.borderDashOffset,u=t.tickWidth,f=t.tickColor,h=t.tickBorderDash||[],p=t.tickBorderDashOffset;x=Pr(e,y,s),void 0!==x&&(_=Wt(r,x,n),l?w=S=E=P=_:k=M=C=O=_,d.push({tx1:w,ty1:k,tx2:S,ty2:M,x1:E,y1:C,x2:P,y2:O,width:n,color:i,borderDash:a,borderDashOffset:c,tickWidth:u,tickColor:f,tickBorderDash:h,tickBorderDashOffset:p}))}return e._ticksLength=c,e._borderValue=v,d}_computeLabelItems(t){const e=this,n=e.axis,r=e.options,{position:i,ticks:o}=r,a=e.isHorizontal(),s=e.ticks,{align:l,crossAlign:c,padding:u,mirror:h}=o,p=Or(r.grid),g=p+u,m=h?-u:g,b=-$(e.labelRotation),v=[];let y,x,_,w,k,S,M,E,C,P,O,T,D="middle";if("top"===i)S=e.bottom-m,M=e._getXAxisLabelAlignment();else if("bottom"===i)S=e.top+m,M=e._getXAxisLabelAlignment();else if("left"===i){const t=e._getYAxisLabelAlignment(p);M=t.textAlign,k=t.x}else if("right"===i){const t=e._getYAxisLabelAlignment(p);M=t.textAlign,k=t.x}else if("x"===n){if("center"===i)S=(t.top+t.bottom)/2+g;else if(f(i)){const t=Object.keys(i)[0],n=i[t];S=e.chart.scales[t].getPixelForValue(n)+g}M=e._getXAxisLabelAlignment()}else if("y"===n){if("center"===i)k=(t.left+t.right)/2-g;else if(f(i)){const t=Object.keys(i)[0],n=i[t];k=e.chart.scales[t].getPixelForValue(n)}M=e._getYAxisLabelAlignment(p).textAlign}"y"===n&&("start"===l?D="top":"end"===l&&(D="bottom"));const L=e._getLabelSizes();for(y=0,x=s.length;y<x;++y){_=s[y],w=_.label;const t=o.setContext(e.getContext(y));E=e.getPixelForTick(y)+o.labelOffset,C=e._resolveTickFontOptions(y),P=C.lineHeight,O=d(w)?w.length:1;const n=O/2,r=t.color,l=t.textStrokeColor,u=t.textStrokeWidth;let f;if(a?(k=E,T="top"===i?"near"===c||0!==b?-O*P+P/2:"center"===c?-L.highest.height/2-n*P+P:-L.highest.height+P/2:"near"===c||0!==b?P/2:"center"===c?L.highest.height/2-n*P:L.highest.height-O*P,h&&(T*=-1)):(S=E,T=(1-O)*P/2),t.showLabelBackdrop){const e=oe(t.backdropPadding),n=L.heights[y],r=L.widths[y];let i=S+T-e.top,o=k-e.left;switch(D){case"middle":i-=n/2;break;case"bottom":i-=n}switch(M){case"center":o-=r/2;break;case"right":o-=r}f={left:o,top:i,width:r+e.width,height:n+e.height,color:t.backdropColor}}v.push({rotation:b,label:w,font:C,color:r,strokeColor:l,strokeWidth:u,textOffset:T,textAlign:M,textBaseline:D,translation:[k,S],backdrop:f})}return v}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-$(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align&&(n="right"),n}_getYAxisLabelAlignment(t){const e=this,{position:n,ticks:{crossAlign:r,mirror:i,padding:o}}=e.options,a=t+o,s=e._getLabelSizes().widest.width;let l,c;return"left"===n?i?(c=e.right+o,"near"===r?l="left":"center"===r?(l="center",c+=s/2):(l="right",c+=s)):(c=e.right-a,"near"===r?l="right":"center"===r?(l="center",c-=s/2):(l="left",c=e.left)):"right"===n?i?(c=e.left+o,"near"===r?l="right":"center"===r?(l="center",c-=s/2):(l="left",c-=s)):(c=e.left+a,"near"===r?l="left":"center"===r?(l="center",c+=s/2):(l="right",c=e.right)):l="right",{textAlign:l,x:c}}_computeLabelArea(){const t=this;if(t.options.ticks.mirror)return;const e=t.chart,n=t.options.position;return"left"===n||"right"===n?{top:0,left:t.left,bottom:e.height,right:t.right}:"top"===n||"bottom"===n?{top:t.top,left:0,bottom:t.bottom,right:e.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:r,width:i,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,r,i,o),t.restore())}getLineWidthForValue(t){const e=this,n=e.options.grid;if(!e._isVisible()||!n.display)return 0;const r=e.ticks.findIndex((e=>e.value===t));return r>=0?n.setContext(e.getContext(r)).lineWidth:0}drawGrid(t){const e=this,n=e.options.grid,r=e.ctx,i=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));let o,a;const s=(t,e,n)=>{n.width&&n.color&&(r.save(),r.lineWidth=n.width,r.strokeStyle=n.color,r.setLineDash(n.borderDash||[]),r.lineDashOffset=n.borderDashOffset,r.beginPath(),r.moveTo(t.x,t.y),r.lineTo(e.x,e.y),r.stroke(),r.restore())};if(n.display)for(o=0,a=i.length;o<a;++o){const t=i[o];n.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),n.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const t=this,{chart:e,ctx:n,options:{grid:r}}=t,i=r.setContext(t.getContext()),o=r.drawBorder?i.borderWidth:0;if(!o)return;const a=r.setContext(t.getContext(0)).lineWidth,s=t._borderValue;let l,c,u,d;t.isHorizontal()?(l=Wt(e,t.left,o)-o/2,c=Wt(e,t.right,a)+a/2,u=d=s):(u=Wt(e,t.top,o)-o/2,d=Wt(e,t.bottom,a)+a/2,l=c=s),n.save(),n.lineWidth=i.borderWidth,n.strokeStyle=i.borderColor,n.beginPath(),n.moveTo(l,u),n.lineTo(c,d),n.stroke(),n.restore()}drawLabels(t){const e=this;if(!e.options.ticks.display)return;const n=e.ctx,r=e._computeLabelArea();r&&Yt(n,r);const i=e._labelItems||(e._labelItems=e._computeLabelItems(t));let o,a;for(o=0,a=i.length;o<a;++o){const t=i[o],e=t.font,r=t.label;t.backdrop&&(n.fillStyle=t.backdrop.color,n.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),Kt(n,r,0,t.textOffset,e,t)}r&&Qt(n)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:r}}=this;if(!n.display)return;const i=ae(n.font),o=oe(n.padding),a=n.align;let l=i.lineHeight/2;"bottom"===e||"center"===e||f(e)?(l+=o.bottom,d(n.text)&&(l+=i.lineHeight*(n.text.length-1))):l+=o.top;const{titleX:c,titleY:u,maxWidth:h,rotation:p}=function(t,e,n,r){const{top:i,left:o,bottom:a,right:l,chart:c}=t,{chartArea:u,scales:d}=c;let h,p,g,m=0;const b=a-i,v=l-o;if(t.isHorizontal()){if(p=s(r,o,l),f(n)){const t=Object.keys(n)[0],r=n[t];g=d[t].getPixelForValue(r)+b-e}else g="center"===n?(u.bottom+u.top)/2+b-e:Er(t,n,e);h=l-o}else{if(f(n)){const t=Object.keys(n)[0],r=n[t];p=d[t].getPixelForValue(r)-v+e}else p="center"===n?(u.left+u.right)/2-v+e:Er(t,n,e);g=s(r,a,i),m="left"===n?-F:F}return{titleX:p,titleY:g,maxWidth:h,rotation:m}}(this,l,e,a);Kt(t,n.text,0,0,i,{color:n.color,maxWidth:h,rotation:p,textAlign:Dr(a,e,r),textBaseline:"middle",translation:[c,u]})}draw(t){const e=this;e._isVisible()&&(e.drawBackground(),e.drawGrid(t),e.drawBorder(),e.drawTitle(),e.drawLabels(t))}_layers(){const t=this,e=t.options,n=e.ticks&&e.ticks.z||0,r=g(e.grid&&e.grid.z,-1);return t._isVisible()&&t.draw===Lr.prototype.draw?[{z:r,draw(e){t.drawBackground(),t.drawGrid(e),t.drawTitle()}},{z:r+1,draw(){t.drawBorder()}},{z:n,draw(e){t.drawLabels(e)}}]:[{z:n,draw(e){t.draw(e)}}]}getMatchingVisibleMetas(t){const e=this,n=e.chart.getSortedVisibleDatasetMetas(),r=e.axis+"AxisID",i=[];let o,a;for(o=0,a=n.length;o<a;++o){const a=n[o];a[r]!==e.id||t&&a.type!==t||i.push(a)}return i}_resolveTickFontOptions(t){return ae(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this,e=t._resolveTickFontOptions(0).lineHeight;return(t.isHorizontal()?t.width:t.height)/e}}class zr{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=this,n=Object.getPrototypeOf(t);let r;(function(t){return"id"in t&&"defaults"in t})(n)&&(r=e.register(n));const i=e.items,o=t.id,a=e.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in i||(i[o]=t,function(t,e,n){const r=k(Object.create(null),[n?jt.get(n):{},jt.get(e),t.defaults]);jt.set(e,r),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const r=n.split("."),i=r.pop(),o=[t].concat(r).join("."),a=e[n].split("."),s=a.pop(),l=a.join(".");jt.route(o,i,l,s)}))}(e,t.defaultRoutes),t.descriptors&&jt.describe(e,t.descriptors)}(t,a,r),e.override&&jt.override(t.id,t.overrides)),a}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,r=this.scope;n in e&&delete e[n],r&&n in jt[r]&&(delete jt[r][n],this.override&&delete At[n])}}var Rr=new class{constructor(){this.controllers=new zr(wn,"datasets",!0),this.elements=new zr(wr,"elements"),this.plugins=new zr(Object,"plugins"),this.scales=new zr(Lr,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){const r=this;[...e].forEach((e=>{const i=n||r._getRegistryForType(e);n||i.isForType(e)||i===r.plugins&&e.id?r._exec(t,i,e):v(e,(e=>{const i=n||r._getRegistryForType(e);r._exec(t,i,e)}))}))}_exec(t,e,n){const r=P(t);b(n["before"+r],[],n),e[t](n),b(n["after"+r],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const r=e.get(t);if(void 0===r)throw new Error('"'+t+'" is not a registered '+n+".");return r}};class Ar{constructor(){this._init=[]}notify(t,e,n,r){const i=this;"beforeInit"===e&&(i._init=i._createDescriptors(t,!0),i._notify(i._init,t,"install"));const o=r?i._descriptors(t).filter(r):i._descriptors(t),a=i._notify(o,t,e,n);return"destroy"===e&&(i._notify(o,t,"stop"),i._notify(i._init,t,"uninstall")),a}_notify(t,e,n,r){r=r||{};for(const i of t){const t=i.plugin;if(!1===b(t[n],[e,r,i.options],t)&&r.cancelable)return!1}return!0}invalidate(){u(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,r=g(n.options&&n.options.plugins,{}),i=function(t){const e=[],n=Object.keys(Rr.plugins.items);for(let t=0;t<n.length;t++)e.push(Rr.getPlugin(n[t]));const r=t.plugins||[];for(let t=0;t<r.length;t++){const n=r[t];-1===e.indexOf(n)&&e.push(n)}return e}(n);return!1!==r||e?function(t,e,n,r){const i=[],o=t.getContext();for(let a=0;a<e.length;a++){const s=e[a],l=Fr(n[s.id],r);null!==l&&i.push({plugin:s,options:Ir(t.config,s,l,o)})}return i}(t,i,r,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,r=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(r(e,n),t,"stop"),this._notify(r(n,e),t,"start")}}function Fr(t,e){return e||!1!==t?!0===t?{}:t:null}function Ir(t,e,n,r){const i=t.pluginScopeKeys(e),o=t.getOptionScopes(n,i);return t.createResolver(o,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Nr(t,e){const n=jt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function jr(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.charAt(0).toLowerCase();var n}function Vr(t){const e=t.options||(t.options={});e.plugins=g(e.plugins,{}),e.scales=function(t,e){const n=At[t.type]||{scales:{}},r=e.scales||{},i=Nr(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(r).forEach((t=>{const e=r[t],s=jr(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(s,i),c=n.scales||{};o[s]=o[s]||t,a[t]=S(Object.create(null),[{axis:s},e,c[s],c[l]])})),t.data.datasets.forEach((n=>{const i=n.type||t.type,s=n.indexAxis||Nr(i,e),l=(At[i]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,s),i=n[e+"AxisID"]||o[e]||e;a[i]=a[i]||Object.create(null),S(a[i],[{axis:e},r[i],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];S(e,[jt.scales[e.type],jt.scale])})),a}(t,e)}function Br(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Wr=new Map,Hr=new Set;function Ur(t,e){let n=Wr.get(t);return n||(n=e(),Wr.set(t,n),Hr.add(n)),n}const $r=(t,e,n)=>{const r=C(e,n);void 0!==r&&t.add(r)};class Yr{constructor(t){this._config=function(t){return(t=t||{}).data=Br(t.data),Vr(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Br(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Vr(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Ur(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Ur(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Ur(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Ur(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let r=n.get(t);return r&&!e||(r=new Map,n.set(t,r)),r}getOptionScopes(t,e,n){const{options:r,type:i}=this,o=this._cachedScopes(t,n),a=o.get(e);if(a)return a;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>$r(s,t,e)))),e.forEach((t=>$r(s,r,t))),e.forEach((t=>$r(s,At[i]||{},t))),e.forEach((t=>$r(s,jt,t))),e.forEach((t=>$r(s,Ft,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),Hr.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,At[e]||{},jt.datasets[e]||{},{type:e},jt,Ft]}resolveNamedOptions(t,e,n,r=[""]){const i={$shared:!0},{resolver:o,subPrefixes:a}=Qr(this._resolverCache,t,r);let s=o;(function(t,e){const{isScriptable:n,isIndexable:r}=me(t);for(const i of e)if(n(i)&&T(t[i])||r(i)&&d(t[i]))return!0;return!1})(o,e)&&(i.$shared=!1,s=ge(o,n=T(n)?n():n,this.createResolver(t,n,a)));for(const t of e)i[t]=s[t];return i}createResolver(t,e,n=[""],r){const{resolver:i}=Qr(this._resolverCache,t,n);return f(e)?ge(i,e,void 0,r):i}}function Qr(t,e,n){let r=t.get(e);r||(r=new Map,t.set(e,r));const i=n.join();let o=r.get(i);return o||(o={resolver:pe(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},r.set(i,o)),o}const qr=["top","bottom","left","right","chartArea"];function Xr(t,e){return"top"===t||"bottom"===t||-1===qr.indexOf(t)&&"x"===e}function Kr(t,e){return function(n,r){return n[t]===r[t]?n[e]-r[e]:n[t]-r[t]}}function Gr(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),b(n&&n.onComplete,[t],e)}function Zr(t){const e=t.chart,n=e.options.animation;b(n&&n.onProgress,[t],e)}function Jr(t){return ze()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const ti={},ei=t=>{const e=Jr(t);return Object.values(ti).filter((t=>t.canvas===e)).pop()};class ni{constructor(t,e){const n=this,r=this.config=new Yr(e),i=Jr(t),o=ei(i);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas can be reused.");const a=r.createResolver(r.chartOptionScopes(),n.getContext());this.platform=new(r.platform||function(t){return!ze()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?lr:_r}(i));const s=n.platform.acquireContext(i,a.aspectRatio),l=s&&s.canvas,u=l&&l.height,d=l&&l.width;this.id=c(),this.ctx=s,this.canvas=l,this.width=d,this.height=u,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ar,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(){return e?(clearTimeout(n),n=setTimeout(t,e)):t(),e}}((()=>this.update("resize")),a.resizeDelay||0),ti[n.id]=n,s&&l?(on.listen(n,"complete",Gr),on.listen(n,"progress",Zr),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:r,_aspectRatio:i}=this;return u(t)?e&&i?i:r?n/r:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){const t=this;return t.notifyPlugins("beforeInit"),t.options.responsive?t.resize():Be(t,t.options.devicePixelRatio),t.bindEvents(),t.notifyPlugins("afterInit"),t}clear(){return Ht(this.canvas,this.ctx),this}stop(){return on.stop(this),this}resize(t,e){on.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this,r=n.options,i=n.canvas,o=r.maintainAspectRatio&&n.aspectRatio,a=n.platform.getMaximumSize(i,t,e,o),s=r.devicePixelRatio||n.platform.getDevicePixelRatio();n.width=a.width,n.height=a.height,n._aspectRatio=n.aspectRatio,Be(n,s,!0)&&(n.notifyPlugins("resize",{size:a}),b(r.onResize,[n,a],n),n.attached&&n._doResize()&&n.render())}ensureScalesHaveIDs(){v(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this,e=t.options,n=e.scales,r=t.scales,i=Object.keys(r).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];n&&(o=o.concat(Object.keys(n).map((t=>{const e=n[t],r=jr(t,e),i="r"===r,o="x"===r;return{options:e,dposition:i?"chartArea":o?"bottom":"left",dtype:i?"radialLinear":o?"category":"linear"}})))),v(o,(n=>{const o=n.options,a=o.id,s=jr(a,o),l=g(o.type,n.dtype);void 0!==o.position&&Xr(o.position,s)===Xr(n.dposition)||(o.position=n.dposition),i[a]=!0;let c=null;a in r&&r[a].type===l?c=r[a]:(c=new(Rr.getScale(l))({id:a,type:l,ctx:t.ctx,chart:t}),r[c.id]=c),c.init(o,e)})),v(i,((t,e)=>{t||delete r[e]})),v(r,(e=>{ar.configure(t,e,e.options),ar.addBox(t,e)}))}_updateMetasets(){const t=this,e=t._metasets,n=t.data.datasets.length,r=e.length;if(e.sort(((t,e)=>t.index-e.index)),r>n){for(let e=n;e<r;++e)t._destroyDatasetMeta(e);e.splice(n,r-n)}t._sortedMetasets=e.slice(0).sort(Kr("order","index"))}_removeUnreferencedMetasets(){const t=this,{_metasets:e,data:{datasets:n}}=t;e.length>n.length&&delete t._stacks,e.forEach(((e,r)=>{0===n.filter((t=>t===e._dataset)).length&&t._destroyDatasetMeta(r)}))}buildOrUpdateControllers(){const t=this,e=[],n=t.data.datasets;let r,i;for(t._removeUnreferencedMetasets(),r=0,i=n.length;r<i;r++){const i=n[r];let o=t.getDatasetMeta(r);const a=i.type||t.config.type;if(o.type&&o.type!==a&&(t._destroyDatasetMeta(r),o=t.getDatasetMeta(r)),o.type=a,o.indexAxis=i.indexAxis||Nr(a,t.options),o.order=i.order||0,o.index=r,o.label=""+i.label,o.visible=t.isDatasetVisible(r),o.controller)o.controller.updateIndex(r),o.controller.linkScales();else{const n=Rr.getController(a),{datasetElementType:i,dataElementType:s}=jt.datasets[a];Object.assign(n.prototype,{dataElementType:Rr.getElement(s),datasetElementType:i&&Rr.getElement(i)}),o.controller=new n(t,r),e.push(o.controller)}}return t._updateMetasets(),e}_resetElements(){const t=this;v(t.data.datasets,((e,n)=>{t.getDatasetMeta(n).controller.reset()}),t)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this,n=e.config;n.update(),e._options=n.createResolver(n.chartOptionScopes(),e.getContext()),v(e.scales,(t=>{ar.removeBox(e,t)}));const r=e._animationsDisabled=!e.options.animation;if(e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),((t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0})(new Set(Object.keys(e._listeners)),new Set(e.options.events))&&!!this._responsiveListeners===e.options.responsive||(e.unbindEvents(),e.bindEvents()),e._plugins.invalidate(),!1===e.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const i=e.buildOrUpdateControllers();e.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,n=e.data.datasets.length;t<n;t++){const{controller:n}=e.getDatasetMeta(t),a=!r&&-1===i.indexOf(n);n.buildOrUpdateElements(a),o=Math.max(+n.getMaxOverflow(),o)}e._minPadding=o,e._updateLayout(o),r||v(i,(t=>{t.reset()})),e._updateDatasets(t),e.notifyPlugins("afterUpdate",{mode:t}),e._layers.sort(Kr("z","_idx")),e._lastEvent&&e._eventHandler(e._lastEvent,!0),e.render()}_updateLayout(t){const e=this;if(!1===e.notifyPlugins("beforeLayout",{cancelable:!0}))return;ar.update(e,e.width,e.height,t);const n=e.chartArea,r=n.width<=0||n.height<=0;e._layers=[],v(e.boxes,(t=>{r&&"chartArea"===t.position||(t.configure&&t.configure(),e._layers.push(...t._layers()))}),e),e._layers.forEach(((t,e)=>{t._idx=e})),e.notifyPlugins("afterLayout")}_updateDatasets(t){const e=this,n="function"==typeof t;if(!1!==e.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let r=0,i=e.data.datasets.length;r<i;++r)e._updateDataset(r,n?t({datasetIndex:r}):t);e.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this,r=n.getDatasetMeta(t),i={meta:r,index:t,mode:e,cancelable:!0};!1!==n.notifyPlugins("beforeDatasetUpdate",i)&&(r.controller._update(e),i.cancelable=!1,n.notifyPlugins("afterDatasetUpdate",i))}render(){const t=this;!1!==t.notifyPlugins("beforeRender",{cancelable:!0})&&(on.has(t)?t.attached&&!on.running(t)&&on.start(t):(t.draw(),Gr({chart:t})))}draw(){const t=this;let e;if(t._resizeBeforeDraw){const{width:e,height:n}=t._resizeBeforeDraw;t._resize(e,n),t._resizeBeforeDraw=null}if(t.clear(),t.width<=0||t.height<=0)return;if(!1===t.notifyPlugins("beforeDraw",{cancelable:!0}))return;const n=t._layers;for(e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(t.chartArea);for(t._drawDatasets();e<n.length;++e)n[e].draw(t.chartArea);t.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let r,i;for(r=0,i=e.length;r<i;++r){const i=e[r];t&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const t=this;if(!1===t.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=t.getSortedVisibleDatasetMetas();for(let n=e.length-1;n>=0;--n)t._drawDataset(e[n]);t.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this,n=e.ctx,r=t._clip,i=!r.disabled,o=e.chartArea,a={meta:t,index:t.index,cancelable:!0};!1!==e.notifyPlugins("beforeDatasetDraw",a)&&(i&&Yt(n,{left:!1===r.left?0:o.left-r.left,right:!1===r.right?e.width:o.right+r.right,top:!1===r.top?0:o.top-r.top,bottom:!1===r.bottom?e.height:o.bottom+r.bottom}),t.controller.draw(),i&&Qt(n),a.cancelable=!1,e.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(t,e,n,r){const i=qn.modes[e];return"function"==typeof i?i(this,t,n,r):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let r=n.filter((t=>t&&t._dataset===e)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const r=this,i=n?"show":"hide",o=r.getDatasetMeta(t),a=o.controller._resolveAnimations(void 0,i);O(e)?(o.data[e].hidden=!n,r.update()):(r.setDatasetVisibility(t,n),a.update(o,{visible:n}),r.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this,n=e._metasets&&e._metasets[t];n&&n.controller&&(n.controller._destroy(),delete e._metasets[t])}destroy(){const t=this,{canvas:e,ctx:n}=t;let r,i;for(t.stop(),on.remove(t),r=0,i=t.data.datasets.length;r<i;++r)t._destroyDatasetMeta(r);t.config.clearCache(),e&&(t.unbindEvents(),Ht(e,n),t.platform.releaseContext(n),t.canvas=null,t.ctx=null),t.notifyPlugins("destroy"),delete ti[t.id]}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this,e=t._listeners,n=t.platform,r=function(e,n,r){e.offsetX=n,e.offsetY=r,t._eventHandler(e)};v(t.options.events,(i=>((r,i)=>{n.addEventListener(t,r,i),e[r]=i})(i,r)))}bindResponsiveEvents(){const t=this;t._responsiveListeners||(t._responsiveListeners={});const e=t._responsiveListeners,n=t.platform,r=(r,i)=>{n.addEventListener(t,r,i),e[r]=i},i=(r,i)=>{e[r]&&(n.removeEventListener(t,r,i),delete e[r])},o=(e,n)=>{t.canvas&&t.resize(e,n)};let a;const s=()=>{i("attach",s),t.attached=!0,t.resize(),r("resize",o),r("detach",a)};a=()=>{t.attached=!1,i("resize",o),r("attach",s)},n.isAttached(t.canvas)?s():a()}unbindEvents(){const t=this;v(t._listeners,((e,n)=>{t.platform.removeEventListener(t,n,e)})),t._listeners={},v(t._responsiveListeners,((e,n)=>{t.platform.removeEventListener(t,n,e)})),t._responsiveListeners=void 0}updateHoverStyle(t,e,n){const r=n?"set":"remove";let i,o,a,s;for("dataset"===e&&(i=this.getDatasetMeta(t[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=t.length;a<s;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[r+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this,n=e._active||[],r=t.map((({datasetIndex:t,index:n})=>{const r=e.getDatasetMeta(t);if(!r)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:r.data[n],index:n}}));!y(r,n)&&(e._active=r,e._updateHoverStyles(r,n))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}_updateHoverStyles(t,e,n){const r=this,i=r.options.hover,o=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),a=o(e,t),s=n?t:o(t,e);a.length&&r.updateHoverStyle(a,i.mode,!1),s.length&&i.mode&&r.updateHoverStyle(s,i.mode,!0)}_eventHandler(t,e){const n=this,r={event:t,replay:e,cancelable:!0},i=e=>(e.options.events||this.options.events).includes(t.type);if(!1===n.notifyPlugins("beforeEvent",r,i))return;const o=n._handleEvent(t,e);return r.cancelable=!1,n.notifyPlugins("afterEvent",r,i),(o||r.changed)&&n.render(),n}_handleEvent(t,e){const n=this,{_active:r=[],options:i}=n,o=i.hover,a=e;let s=[],l=!1,c=null;return"mouseout"!==t.type&&(s=n.getElementsAtEventForMode(t,o.mode,o,a),c="click"===t.type?n._lastEvent:t),n._lastEvent=null,$t(t,n.chartArea,n._minPadding)&&(b(i.onHover,[t,s,n],n),"mouseup"!==t.type&&"click"!==t.type&&"contextmenu"!==t.type||b(i.onClick,[t,s,n],n)),l=!y(s,r),(l||e)&&(n._active=s,n._updateHoverStyles(s,r,e)),n._lastEvent=c,l}}const ri=()=>v(ni.instances,(t=>t._plugins.invalidate())),ii=!0;function oi(t,e,n){const{startAngle:r,pixelMargin:i,x:o,y:a,outerRadius:s,innerRadius:l}=e;let c=i/s;t.beginPath(),t.arc(o,a,s,r-c,n+c),l>i?(c=i/l,t.arc(o,a,l,n+c,r-c,!0)):t.arc(o,a,i,n+F,r-F),t.closePath(),t.clip()}function ai(t,e,n,r){return{x:n+t*Math.cos(e),y:r+t*Math.sin(e)}}function si(t,e,n,r,i){const{x:o,y:a,startAngle:s,pixelMargin:l,innerRadius:c}=e,u=Math.max(e.outerRadius+r+n-l,0),d=c>0?c+r+n+l:0;let f=0;const h=i-s;if(r){const t=((c>0?c-r:0)+(u>0?u-r:0))/2;f=(h-(0!==t?h*t/(t+r):h))/2}const p=(h-Math.max(.001,h*u-n/D)/u)/2,g=s+p+f,m=i-p-f,{outerStart:b,outerEnd:v,innerStart:y,innerEnd:x}=function(t,e,n,r){const i=ne(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,a=Math.min(o,r*e/2),s=t=>{const e=(n-Math.min(o,t))*r/2;return Z(t,0,Math.min(o,e))};return{outerStart:s(i.outerStart),outerEnd:s(i.outerEnd),innerStart:Z(i.innerStart,0,a),innerEnd:Z(i.innerEnd,0,a)}}(e,d,u,m-g),_=u-b,w=u-v,k=g+b/_,S=m-v/w,M=d+y,E=d+x,C=g+y/M,P=m-x/E;if(t.beginPath(),t.arc(o,a,u,k,S),v>0){const e=ai(w,S,o,a);t.arc(e.x,e.y,v,S,m+F)}const O=ai(E,m,o,a);if(t.lineTo(O.x,O.y),x>0){const e=ai(E,P,o,a);t.arc(e.x,e.y,x,m+F,P+Math.PI)}if(t.arc(o,a,d,m-x/d,g+y/d,!0),y>0){const e=ai(M,C,o,a);t.arc(e.x,e.y,y,C+Math.PI,g-F)}const T=ai(_,g,o,a);if(t.lineTo(T.x,T.y),b>0){const e=ai(_,k,o,a);t.arc(e.x,e.y,b,g-F,k)}t.closePath()}Object.defineProperties(ni,{defaults:{enumerable:ii,value:jt},instances:{enumerable:ii,value:ti},overrides:{enumerable:ii,value:At},registry:{enumerable:ii,value:Rr},version:{enumerable:ii,value:"3.5.1"},getChart:{enumerable:ii,value:ei},register:{enumerable:ii,value:(...t)=>{Rr.add(...t),ri()}},unregister:{enumerable:ii,value:(...t)=>{Rr.remove(...t),ri()}}});class li extends wr{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const r=this.getProps(["x","y"],n),{angle:i,distance:o}=function(t,e){const n=e.x-t.x,r=e.y-t.y,i=Math.sqrt(n*n+r*r);let o=Math.atan2(r,n);return o<-.5*D&&(o+=L),{angle:o,distance:i}}(r,{x:t,y:e}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),d=this.options.spacing/2;return(u>=L||G(i,a,s))&&o>=l+d&&o<=c+d}getCenterPoint(t){const{x:e,y:n,startAngle:r,endAngle:i,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,c=(r+i)/2,u=(o+a+l+s)/2;return{x:e+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const e=this,{options:n,circumference:r}=e,i=(n.offset||0)/2,o=(n.spacing||0)/2;if(e.pixelMargin="inner"===n.borderAlign?.33:0,e.fullCircles=r>L?Math.floor(r/L):0,0===r||e.innerRadius<0||e.outerRadius<0)return;t.save();let a=0;if(i){a=i/2;const n=(e.startAngle+e.endAngle)/2;t.translate(Math.cos(n)*a,Math.sin(n)*a),e.circumference>=D&&(a=i)}t.fillStyle=n.backgroundColor,t.strokeStyle=n.borderColor;const s=function(t,e,n,r){const{fullCircles:i,startAngle:o,circumference:a}=e;let s=e.endAngle;if(i){si(t,e,n,r,o+L);for(let e=0;e<i;++e)t.fill();isNaN(a)||(s=o+a%L,a%L==0&&(s+=L))}return si(t,e,n,r,s),t.fill(),s}(t,e,a,o);(function(t,e,n,r,i){const{options:o}=e,a="inner"===o.borderAlign;o.borderWidth&&(a?(t.lineWidth=2*o.borderWidth,t.lineJoin="round"):(t.lineWidth=o.borderWidth,t.lineJoin="bevel"),e.fullCircles&&function(t,e,n){const{x:r,y:i,startAngle:o,pixelMargin:a,fullCircles:s}=e,l=Math.max(e.outerRadius-a,0),c=e.innerRadius+a;let u;for(n&&oi(t,e,o+L),t.beginPath(),t.arc(r,i,c,o+L,o,!0),u=0;u<s;++u)t.stroke();for(t.beginPath(),t.arc(r,i,l,o,o+L),u=0;u<s;++u)t.stroke()}(t,e,a),a&&oi(t,e,i),si(t,e,n,r,i),t.stroke())})(t,e,a,o,s),t.restore()}}function ci(t,e,n=e){t.lineCap=g(n.borderCapStyle,e.borderCapStyle),t.setLineDash(g(n.borderDash,e.borderDash)),t.lineDashOffset=g(n.borderDashOffset,e.borderDashOffset),t.lineJoin=g(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=g(n.borderWidth,e.borderWidth),t.strokeStyle=g(n.borderColor,e.borderColor)}function ui(t,e,n){t.lineTo(n.x,n.y)}function di(t,e,n={}){const r=t.length,{start:i=0,end:o=r-1}=n,{start:a,end:s}=e,l=Math.max(i,a),c=Math.min(o,s),u=i<a&&o<a||i>s&&o>s;return{count:r,start:l,loop:e.loop,ilen:c<l&&!u?r+c-l:c-l}}function fi(t,e,n,r){const{points:i,options:o}=e,{count:a,start:s,loop:l,ilen:c}=di(i,n,r),u=function(t){return t.stepped?qt:t.tension||"monotone"===t.cubicInterpolationMode?Xt:ui}(o);let d,f,h,{move:p=!0,reverse:g}=r||{};for(d=0;d<=c;++d)f=i[(s+(g?c-d:d))%a],f.skip||(p?(t.moveTo(f.x,f.y),p=!1):u(t,h,f,g,o.stepped),h=f);return l&&(f=i[(s+(g?c:0))%a],u(t,h,f,g,o.stepped)),!!l}function hi(t,e,n,r){const i=e.points,{count:o,start:a,ilen:s}=di(i,n,r),{move:l=!0,reverse:c}=r||{};let u,d,f,h,p,g,m=0,b=0;const v=t=>(a+(c?s-t:t))%o,y=()=>{h!==p&&(t.lineTo(m,p),t.lineTo(m,h),t.lineTo(m,g))};for(l&&(d=i[v(0)],t.moveTo(d.x,d.y)),u=0;u<=s;++u){if(d=i[v(u)],d.skip)continue;const e=d.x,n=d.y,r=0|e;r===f?(n<h?h=n:n>p&&(p=n),m=(b*m+e)/++b):(y(),t.lineTo(e,n),f=r,b=0,h=p=n),g=n}y()}function pi(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?fi:hi}li.id="arc",li.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},li.defaultRoutes={backgroundColor:"backgroundColor"};const gi="function"==typeof Path2D;class mi extends wr{constructor(t){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this,r=n.options;if((r.tension||"monotone"===r.cubicInterpolationMode)&&!r.stepped&&!n._pointsUpdated){const i=r.spanGaps?n._loop:n._fullLoop;Le(n._points,r,t,i,e),n._pointsUpdated=!0}}set points(t){const e=this;e._points=t,delete e._segments,delete e._path,e._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,r=t.options.spanGaps,i=n.length;if(!i)return[];const o=!!t._loop,{start:a,end:s}=function(t,e,n,r){let i=0,o=e-1;if(n&&!r)for(;i<e&&!t[i].skip;)i++;for(;i<e&&t[i].skip;)i++;for(i%=e,n&&(o+=i);o>i&&t[o%e].skip;)o--;return o%=e,{start:i,end:o}}(n,i,o,r);return function(t,e,n,r){return r&&r.setContext&&n?function(t,e,n,r){const i=nn(t.options),o=n.length,a=[];let s=e[0].start,l=s;for(const c of e){let e,u=i,d=n[s%o];for(l=s+1;l<=c.end;l++){const i=n[l%o];e=nn(r.setContext({type:"segment",p0:d,p1:i,p0DataIndex:(l-1)%o,p1DataIndex:l%o,datasetIndex:t._datasetIndex})),rn(e,u)&&(a.push({start:s,end:l-1,loop:c.loop,style:u}),u=e,s=l-1),d=i,u=e}s<l-1&&(a.push({start:s,end:l-1,loop:c.loop,style:e}),s=l-1)}return a}(t,e,n,r):e}(t,!0===r?[{start:a,end:s,loop:o}]:function(t,e,n,r){const i=t.length,o=[];let a,s=e,l=t[e];for(a=e+1;a<=n;++a){const n=t[a%i];n.skip||n.stop?l.skip||(r=!1,o.push({start:e%i,end:(a-1)%i,loop:r}),e=s=n.stop?a:null):(s=a,l.skip&&(e=a)),l=n}return null!==s&&o.push({start:e%i,end:s%i,loop:r}),o}(n,a,s<a?s+i:s,!!t._fullLoop&&0===a&&s===i-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this,r=n.options,i=t[e],o=n.points,a=en(n,{property:e,start:i,end:i});if(!a.length)return;const s=[],l=function(t){return t.stepped?$e:t.tension||"monotone"===t.cubicInterpolationMode?Ye:Ue}(r);let c,u;for(c=0,u=a.length;c<u;++c){const{start:n,end:u}=a[c],d=o[n],f=o[u];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((i-d[e])/(f[e]-d[e])),r.stepped);h[e]=t[e],s.push(h)}return 1===s.length?s[0]:s}pathSegment(t,e,n){return pi(this)(t,this,e,n)}path(t,e,n){const r=this,i=r.segments,o=pi(r);let a=r._loop;e=e||0,n=n||r.points.length-e;for(const s of i)a&=o(t,r,s,{start:e,end:e+n-1});return!!a}draw(t,e,n,r){const i=this,o=i.options||{};(i.points||[]).length&&o.borderWidth&&(t.save(),function(t,e,n,r){gi&&1===e.segments.length?function(t,e,n,r){let i=e._path;i||(i=e._path=new Path2D,e.path(i,n,r)&&i.closePath()),ci(t,e.options),t.stroke(i)}(t,e,n,r):function(t,e,n,r){const{segments:i,options:o}=e,a=pi(e);for(const s of i)ci(t,o,s.style),t.beginPath(),a(t,e,s,{start:n,end:n+r-1})&&t.closePath(),t.stroke()}(t,e,n,r)}(t,i,n,r),t.restore(),i.animated&&(i._pointsUpdated=!1,i._path=void 0))}}function bi(t,e,n,r){const i=t.options,{[n]:o}=t.getProps([n],r);return Math.abs(e-o)<i.radius+i.hitRadius}mi.id="line",mi.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},mi.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},mi.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class vi extends wr{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const r=this.options,{x:i,y:o}=this.getProps(["x","y"],n);return Math.pow(t-i,2)+Math.pow(e-o,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(t,e){return bi(this,t,"x",e)}inYRange(t,e){return bi(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this,r=n.options;n.skip||r.radius<.1||!$t(n,e,n.size(r)/2)||(t.strokeStyle=r.borderColor,t.lineWidth=r.borderWidth,t.fillStyle=r.backgroundColor,Ut(t,r,n.x,n.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function yi(t,e){const{x:n,y:r,base:i,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let s,l,c,u,d;return t.horizontal?(d=a/2,s=Math.min(n,i),l=Math.max(n,i),c=r-d,u=r+d):(d=o/2,s=n-d,l=n+d,c=Math.min(r,i),u=Math.max(r,i)),{left:s,top:c,right:l,bottom:u}}function xi(t,e,n,r){return t?0:Z(e,n,r)}function _i(t,e,n,r){const i=null===e,o=null===n,a=t&&!(i&&o)&&yi(t,r);return a&&(i||e>=a.left&&e<=a.right)&&(o||n>=a.top&&n<=a.bottom)}function wi(t,e){t.rect(e.x,e.y,e.w,e.h)}function ki(t,e,n={}){const r=t.x!==n.x?-e:0,i=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-r,a=(t.y+t.h!==n.y+n.h?e:0)-i;return{x:t.x+r,y:t.y+i,w:t.w+o,h:t.h+a,radius:t.radius}}vi.id="point",vi.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},vi.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Si extends wr{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,t&&Object.assign(this,t)}draw(t){const e=this.options,{inner:n,outer:r}=function(t){const e=yi(t),n=e.right-e.left,r=e.bottom-e.top,i=function(t,e,n){const r=t.options.borderWidth,i=t.borderSkipped,o=re(r);return{t:xi(i.top,o.top,0,n),r:xi(i.right,o.right,0,e),b:xi(i.bottom,o.bottom,0,n),l:xi(i.left,o.left,0,e)}}(t,n/2,r/2),o=function(t,e,n){const{enableBorderRadius:r}=t.getProps(["enableBorderRadius"]),i=t.options.borderRadius,o=ie(i),a=Math.min(e,n),s=t.borderSkipped,l=r||f(i);return{topLeft:xi(!l||s.top||s.left,o.topLeft,0,a),topRight:xi(!l||s.top||s.right,o.topRight,0,a),bottomLeft:xi(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:xi(!l||s.bottom||s.right,o.bottomRight,0,a)}}(t,n/2,r/2);return{outer:{x:e.left,y:e.top,w:n,h:r,radius:o},inner:{x:e.left+i.l,y:e.top+i.t,w:n-i.l-i.r,h:r-i.t-i.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(i.t,i.l)),topRight:Math.max(0,o.topRight-Math.max(i.t,i.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(i.b,i.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(i.b,i.r))}}}}(this),i=(o=r.radius).topLeft||o.topRight||o.bottomLeft||o.bottomRight?Zt:wi;var o;t.save(),r.w===n.w&&r.h===n.h||(t.beginPath(),i(t,ki(r,.33,n)),t.clip(),i(t,ki(n,-.33,r)),t.fillStyle=e.borderColor,t.fill("evenodd")),t.beginPath(),i(t,ki(n,.33,r)),t.fillStyle=e.backgroundColor,t.fill(),t.restore()}inRange(t,e,n){return _i(this,t,e,n)}inXRange(t,e){return _i(this,t,null,e)}inYRange(t,e){return _i(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],t);return{x:i?(e+r)/2:e,y:i?n:(n+r)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Si.id="bar",Si.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},Si.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Mi=Object.freeze({__proto__:null,ArcElement:li,LineElement:mi,PointElement:vi,BarElement:Si});function Ei(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Ci(t){t.data.datasets.forEach((t=>{Ei(t)}))}var Pi={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void Ci(t);const r=t.width;t.data.datasets.forEach(((e,i)=>{const{_data:o,indexAxis:a}=e,s=t.getDatasetMeta(i),l=o||e.data;if("y"===se([a,t.options.indexAxis]))return;if("line"!==s.type)return;const c=t.scales[s.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let d,{start:f,count:h}=function(t,e){const n=e.length;let r,i=0;const{iScale:o}=t,{min:a,max:s,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(i=Z(ce(e,o.axis,a).lo,0,n-1)),r=c?Z(ce(e,o.axis,s).hi+1,i,n)-i:n-i,{start:i,count:r}}(s,l);if(h<=(n.threshold||4*r))Ei(e);else{switch(u(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":d=function(t,e,n,r,i){const o=i.samples||r;if(o>=n)return t.slice(e,e+n);const a=[],s=(n-2)/(o-2);let l=0;const c=e+n-1;let u,d,f,h,p,g=e;for(a[l++]=t[g],u=0;u<o-2;u++){let r,i=0,o=0;const c=Math.floor((u+1)*s)+1+e,m=Math.min(Math.floor((u+2)*s)+1,n)+e,b=m-c;for(r=c;r<m;r++)i+=t[r].x,o+=t[r].y;i/=b,o/=b;const v=Math.floor(u*s)+1+e,y=Math.min(Math.floor((u+1)*s)+1,n)+e,{x,y:_}=t[g];for(f=h=-1,r=v;r<y;r++)h=.5*Math.abs((x-i)*(t[r].y-_)-(x-t[r].x)*(o-_)),h>f&&(f=h,d=t[r],p=r);a[l++]=d,g=p}return a[l++]=t[c],a}(l,f,h,r,n);break;case"min-max":d=function(t,e,n,r){let i,o,a,s,l,c,d,f,h,p,g=0,m=0;const b=[],v=e+n-1,y=t[e].x,x=t[v].x-y;for(i=e;i<e+n;++i){o=t[i],a=(o.x-y)/x*r,s=o.y;const e=0|a;if(e===l)s<h?(h=s,c=i):s>p&&(p=s,d=i),g=(m*g+o.x)/++m;else{const n=i-1;if(!u(c)&&!u(d)){const e=Math.min(c,d),r=Math.max(c,d);e!==f&&e!==n&&b.push({...t[e],x:g}),r!==f&&r!==n&&b.push({...t[r],x:g})}i>0&&n!==f&&b.push(t[n]),b.push(o),l=e,m=0,h=p=s,c=d=f=i}}return b}(l,f,h,r);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=d}}))},destroy(t){Ci(t)}};function Oi(t,e,n){const r=function(t){const e=t.options,n=e.fill;let r=g(n&&n.target,n);return void 0===r&&(r=!!e.backgroundColor),!1!==r&&null!==r&&(!0===r?"origin":r)}(t);if(f(r))return!isNaN(r.value)&&r;let i=parseFloat(r);return h(i)&&Math.floor(i)===i?("-"!==r[0]&&"+"!==r[0]||(i=e+i),!(i===e||i<0||i>=n)&&i):["origin","start","end","stack","shape"].indexOf(r)>=0&&r}class Ti{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:r,y:i,radius:o}=this;return e=e||{start:0,end:L},t.arc(r,i,o,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:r}=this,i=t.angle;return{x:e+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function Di(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}const Li=t=>"line"===t.type&&!t.hidden;function zi(t,e,n){const r=[];for(let i=0;i<n.length;i++){const o=n[i],{first:a,last:s,point:l}=Ri(o,e,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(t.push(l),!s)break}t.push(...r)}function Ri(t,e,n){const r=t.interpolate(e,n);if(!r)return{};const i=r[n],o=t.segments,a=t.points;let s=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],r=a[e.start][n],c=a[e.end][n];if(i>=r&&i<=c){s=i===r,l=i===c;break}}return{first:s,last:l,point:r}}function Ai(t,e){let n=[],r=!1;return d(t)?(r=!0,n=t):n=function(t,e){const{x:n=null,y:r=null}=t||{},i=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Di(t,e,i);const a=i[t],s=i[e];null!==r?(o.push({x:a.x,y:r}),o.push({x:s.x,y:r})):null!==n&&(o.push({x:n,y:a.y}),o.push({x:n,y:s.y}))})),o}(t,e),n.length?new mi({points:n,options:{tension:0},_loop:r,_fullLoop:r}):null}function Fi(t,e,n){let r=t[e].fill;const i=[e];let o;if(!n)return r;for(;!1!==r&&-1===i.indexOf(r);){if(!h(r))return r;if(o=t[r],!o)return!1;if(o.visible)return r;i.push(r),r=o.fill}return!1}function Ii(t,e,n){t.beginPath(),e.path(t),t.lineTo(e.last().x,n),t.lineTo(e.first().x,n),t.closePath(),t.clip()}function Ni(t,e,n,r){if(r)return;let i=e[t],o=n[t];return"angle"===t&&(i=K(i),o=K(o)),{property:t,start:i,end:o}}function ji(t,e,n,r){return t&&e?r(t[n],e[n]):t?t[n]:e?e[n]:0}function Vi(t,e,n){const{top:r,bottom:i}=e.chart.chartArea,{property:o,start:a,end:s}=n||{};"x"===o&&(t.beginPath(),t.rect(a,r,s-a,i-r),t.clip())}function Bi(t,e,n,r){const i=e.interpolate(n,r);i&&t.lineTo(i.x,i.y)}function Wi(t,e){const{line:n,target:r,property:i,color:o,scale:a}=e,s=function(t,e,n){const r=t.segments,i=t.points,o=e.points,a=[];for(const t of r){let{start:r,end:s}=t;s=Di(r,s,i);const l=Ni(n,i[r],i[s],t.loop);if(!e.segments){a.push({source:t,target:l,start:i[r],end:i[s]});continue}const c=en(e,l);for(const e of c){const r=Ni(n,o[e.start],o[e.end],e.loop),s=tn(t,i,r);for(const t of s)a.push({source:t,target:e,start:{[n]:ji(l,r,"start",Math.max)},end:{[n]:ji(l,r,"end",Math.min)}})}}return a}(n,r,i);for(const{source:e,target:l,start:c,end:u}of s){const{style:{backgroundColor:s=o}={}}=e,d=!0!==r;t.save(),t.fillStyle=s,Vi(t,a,d&&Ni(i,c,u)),t.beginPath();const f=!!n.pathSegment(t,e);let h;if(d){f?t.closePath():Bi(t,r,u,i);const e=!!r.pathSegment(t,l,{move:f,reverse:!0});h=f&&e,h||Bi(t,r,c,i)}t.closePath(),t.fill(h?"evenodd":"nonzero"),t.restore()}}function Hi(t,e,n){const r=function(t){const{chart:e,fill:n,line:r}=t;if(h(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{chart:e,scale:n,index:r,line:i}=t,o=[],a=i.segments,s=i.points,l=function(t,e){const n=[],r=t.getSortedVisibleDatasetMetas();for(let t=0;t<r.length;t++){const i=r[t];if(i.index===e)break;Li(i)&&n.unshift(i.dataset)}return n}(e,r);l.push(Ai({x:null,y:n.bottom},i));for(let t=0;t<a.length;t++){const e=a[t];for(let t=e.start;t<=e.end;t++)zi(o,s[t],l)}return new mi({points:o,options:{}})}(t);if("shape"===n)return!0;const i=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,r=e.options,i=e.getLabels().length,o=[],a=r.reverse?e.max:e.min,s=r.reverse?e.min:e.max;let l,c,u;if(u="start"===n?a:"end"===n?s:f(n)?n.value:e.getBaseValue(),r.grid.circular)return c=e.getPointPositionForValue(0,a),new Ti({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(u)});for(l=0;l<i;++l)o.push(e.getPointPositionForValue(l,u));return o}(t):function(t){const{scale:e={},fill:n}=t;let r,i=null;return"start"===n?i=e.bottom:"end"===n?i=e.top:f(n)?i=e.getPixelForValue(n.value):e.getBasePixel&&(i=e.getBasePixel()),h(i)?(r=e.isHorizontal(),{x:r?i:null,y:r?null:i}):null}(t)}(t);return i instanceof Ti?i:Ai(i,r)}(e),{line:i,scale:o,axis:a}=e,s=i.options,l=s.fill,c=s.backgroundColor,{above:u=c,below:d=c}=l||{};r&&i.points.length&&(Yt(t,n),function(t,e){const{line:n,target:r,above:i,below:o,area:a,scale:s}=e,l=n._loop?"angle":e.axis;t.save(),"x"===l&&o!==i&&(Ii(t,r,a.top),Wi(t,{line:n,target:r,color:i,scale:s,property:l}),t.restore(),t.save(),Ii(t,r,a.bottom)),Wi(t,{line:n,target:r,color:o,scale:s,property:l}),t.restore()}(t,{line:i,target:r,above:u,below:d,area:n,scale:o,axis:a}),Qt(t))}var Ui={id:"filler",afterDatasetsUpdate(t,e,n){const r=(t.data.datasets||[]).length,i=[];let o,a,s,l;for(a=0;a<r;++a)o=t.getDatasetMeta(a),s=o.dataset,l=null,s&&s.options&&s instanceof mi&&(l={visible:t.isDatasetVisible(a),index:a,fill:Oi(s,a,r),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:s}),o.$filler=l,i.push(l);for(a=0;a<r;++a)l=i[a],l&&!1!==l.fill&&(l.fill=Fi(i,a,n.propagate))},beforeDraw(t,e,n){const r="beforeDraw"===n.drawTime,i=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;n&&(n.line.updateControlPoints(o,n.axis),r&&Hi(t.ctx,n,o))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=t.getSortedVisibleDatasetMetas();for(let e=r.length-1;e>=0;--e){const n=r[e].$filler;n&&Hi(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const r=e.meta.$filler;r&&!1!==r.fill&&"beforeDatasetDraw"===n.drawTime&&Hi(t.ctx,r,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const $i=(t,e)=>{let{boxHeight:n=e,boxWidth:r=e}=t;return t.usePointStyle&&(n=Math.min(n,e),r=Math.min(r,e)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(e,n)}};class Yi extends wr{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){const r=this;r.maxWidth=t,r.maxHeight=e,r._margins=n,r.setDimensions(),r.buildLabels(),r.fit()}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=t._margins.left,t.right=t.width):(t.height=t.maxHeight,t.top=t._margins.top,t.bottom=t.height)}buildLabels(){const t=this,e=t.options.labels||{};let n=b(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter((n=>e.filter(n,t.chart.data)))),e.sort&&(n=n.sort(((n,r)=>e.sort(n,r,t.chart.data)))),t.options.reverse&&n.reverse(),t.legendItems=n}fit(){const t=this,{options:e,ctx:n}=t;if(!e.display)return void(t.width=t.height=0);const r=e.labels,i=ae(r.font),o=i.size,a=t._computeTitleHeight(),{boxWidth:s,itemHeight:l}=$i(r,o);let c,u;n.font=i.string,t.isHorizontal()?(c=t.maxWidth,u=t._fitRows(a,o,s,l)+10):(u=t.maxHeight,c=t._fitCols(a,o,s,l)+10),t.width=Math.min(c,e.maxWidth||t.maxWidth),t.height=Math.min(u,e.maxHeight||t.maxHeight)}_fitRows(t,e,n,r){const i=this,{ctx:o,maxWidth:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],c=i.lineWidths=[0],u=r+s;let d=t;o.textAlign="left",o.textBaseline="middle";let f=-1,h=-u;return i.legendItems.forEach(((t,i)=>{const p=n+e/2+o.measureText(t.text).width;(0===i||c[c.length-1]+p+2*s>a)&&(d+=u,c[c.length-(i>0?0:1)]=0,h+=u,f++),l[i]={left:0,top:h,row:f,width:p,height:r},c[c.length-1]+=p+s})),d}_fitCols(t,e,n,r){const i=this,{ctx:o,maxHeight:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],c=i.columnSizes=[],u=a-t;let d=s,f=0,h=0,p=0,g=0;return i.legendItems.forEach(((t,i)=>{const a=n+e/2+o.measureText(t.text).width;i>0&&h+r+2*s>u&&(d+=f+s,c.push({width:f,height:h}),p+=f+s,g++,f=h=0),l[i]={left:p,top:h,col:g,width:a,height:r},f=Math.max(f,a),h+=r+s})),d+=f,c.push({width:f,height:h}),d}adjustHitBoxes(){const t=this;if(!t.options.display)return;const e=t._computeTitleHeight(),{legendHitBoxes:n,options:{align:r,labels:{padding:i},rtl:o}}=t,a=Xe(o,t.left,t.width);if(this.isHorizontal()){let o=0,l=s(r,t.left+i,t.right-t.lineWidths[o]);for(const c of n)o!==c.row&&(o=c.row,l=s(r,t.left+i,t.right-t.lineWidths[o])),c.top+=t.top+e+i,c.left=a.leftForLtr(a.x(l),c.width),l+=c.width+i}else{let o=0,l=s(r,t.top+e+i,t.bottom-t.columnSizes[o].height);for(const c of n)c.col!==o&&(o=c.col,l=s(r,t.top+e+i,t.bottom-t.columnSizes[o].height)),c.top=l,c.left+=t.left+i,c.left=a.leftForLtr(a.x(c.left),c.width),l+=c.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const t=this;if(t.options.display){const e=t.ctx;Yt(e,t),t._draw(),Qt(e)}}_draw(){const t=this,{options:e,columnSizes:n,lineWidths:r,ctx:i}=t,{align:o,labels:a}=e,l=jt.color,c=Xe(e.rtl,t.left,t.width),u=ae(a.font),{color:d,padding:f}=a,h=u.size,p=h/2;let m;t.drawTitle(),i.textAlign=c.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=u.string;const{boxWidth:b,boxHeight:v,itemHeight:y}=$i(a,h),x=t.isHorizontal(),_=this._computeTitleHeight();m=x?{x:s(o,t.left+f,t.right-r[0]),y:t.top+f+_,line:0}:{x:t.left+f,y:s(o,t.top+_+f,t.bottom-n[0].height),line:0},Ke(t.ctx,e.textDirection);const w=y+f;t.legendItems.forEach(((k,S)=>{i.strokeStyle=k.fontColor||d,i.fillStyle=k.fontColor||d;const M=i.measureText(k.text).width,E=c.textAlign(k.textAlign||(k.textAlign=a.textAlign)),C=b+p+M;let P=m.x,O=m.y;c.setWidth(t.width),x?S>0&&P+C+f>t.right&&(O=m.y+=w,m.line++,P=m.x=s(o,t.left+f,t.right-r[m.line])):S>0&&O+w>t.bottom&&(P=m.x=P+n[m.line].width+f,m.line++,O=m.y=s(o,t.top+_+f,t.bottom-n[m.line].height)),function(t,e,n){if(isNaN(b)||b<=0||isNaN(v)||v<0)return;i.save();const r=g(n.lineWidth,1);if(i.fillStyle=g(n.fillStyle,l),i.lineCap=g(n.lineCap,"butt"),i.lineDashOffset=g(n.lineDashOffset,0),i.lineJoin=g(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=g(n.strokeStyle,l),i.setLineDash(g(n.lineDash,[])),a.usePointStyle){const o={radius:b*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},a=c.xPlus(t,b/2);Ut(i,o,a,e+p)}else{const o=e+Math.max((h-v)/2,0),a=c.leftForLtr(t,b),s=ie(n.borderRadius);i.beginPath(),Object.values(s).some((t=>0!==t))?Zt(i,{x:a,y:o,w:b,h:v,radius:s}):i.rect(a,o,b,v),i.fill(),0!==r&&i.stroke()}i.restore()}(c.x(P),O,k),P=((t,e,n,r)=>t===(r?"left":"right")?n:"center"===t?(e+n)/2:e)(E,P+b+p,x?P+C:t.right,e.rtl),function(t,e,n){Kt(i,n.text,t,e+y/2,u,{strikethrough:n.hidden,textAlign:c.textAlign(n.textAlign)})}(c.x(P),O,k),x?m.x+=C+f:m.y+=w})),Ge(t.ctx,e.textDirection)}drawTitle(){const t=this,e=t.options,n=e.title,r=ae(n.font),i=oe(n.padding);if(!n.display)return;const o=Xe(e.rtl,t.left,t.width),l=t.ctx,c=n.position,u=r.size/2,d=i.top+u;let f,h=t.left,p=t.width;if(this.isHorizontal())p=Math.max(...t.lineWidths),f=t.top+d,h=s(e.align,h,t.right-p);else{const n=t.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);f=d+s(e.align,t.top,t.bottom-n-e.labels.padding-t._computeTitleHeight())}const g=s(c,h,h+p);l.textAlign=o.textAlign(a(c)),l.textBaseline="middle",l.strokeStyle=n.color,l.fillStyle=n.color,l.font=r.string,Kt(l,n.text,g,f,r)}_computeTitleHeight(){const t=this.options.title,e=ae(t.font),n=oe(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){const n=this;let r,i,o;if(t>=n.left&&t<=n.right&&e>=n.top&&e<=n.bottom)for(o=n.legendHitBoxes,r=0;r<o.length;++r)if(i=o[r],t>=i.left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return n.legendItems[r];return null}handleEvent(t){const e=this,n=e.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,n))return;const r=e._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const a=e._hoveredItem,s=(o=r,null!==(i=a)&&null!==o&&i.datasetIndex===o.datasetIndex&&i.index===o.index);a&&!s&&b(n.onLeave,[t,a,e],e),e._hoveredItem=r,r&&!s&&b(n.onHover,[t,r,e],e)}else r&&b(n.onClick,[t,r,e],e);var i,o}}var Qi={id:"legend",_element:Yi,start(t,e,n){const r=t.legend=new Yi({ctx:t.ctx,options:n,chart:t});ar.configure(t,r,n),ar.addBox(t,r)},stop(t){ar.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const r=t.legend;ar.configure(t,r,n),r.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const r=e.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),e.hidden=!0):(i.show(r),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:r,textAlign:i,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(n?0:void 0),s=oe(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:r||a.pointStyle,rotation:a.rotation,textAlign:i||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class qi extends wr{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this,r=n.options;if(n.left=0,n.top=0,!r.display)return void(n.width=n.height=n.right=n.bottom=0);n.width=n.right=t,n.height=n.bottom=e;const i=d(r.text)?r.text.length:1;n._padding=oe(r.padding);const o=i*ae(r.font).lineHeight+n._padding.height;n.isHorizontal()?n.height=o:n.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:r,right:i,options:o}=this,a=o.align;let l,c,u,d=0;return this.isHorizontal()?(c=s(a,n,i),u=e+t,l=i-n):("left"===o.position?(c=n+t,u=s(a,r,e),d=-.5*D):(c=i-t,u=s(a,e,r),d=.5*D),l=r-e),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const t=this,e=t.ctx,n=t.options;if(!n.display)return;const r=ae(n.font),i=r.lineHeight/2+t._padding.top,{titleX:o,titleY:s,maxWidth:l,rotation:c}=t._drawArgs(i);Kt(e,n.text,0,0,r,{color:n.color,maxWidth:l,rotation:c,textAlign:a(n.align),textBaseline:"middle",translation:[o,s]})}}var Xi={id:"title",_element:qi,start(t,e,n){!function(t,e){const n=new qi({ctx:t.ctx,options:e,chart:t});ar.configure(t,n,e),ar.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;ar.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const r=t.titleBlock;ar.configure(t,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Ki=new WeakMap;var Gi={id:"subtitle",start(t,e,n){const r=new qi({ctx:t.ctx,options:n,chart:t});ar.configure(t,r,n),ar.addBox(t,r),Ki.set(t,r)},stop(t){ar.removeBox(t,Ki.get(t)),Ki.delete(t)},beforeUpdate(t,e,n){const r=Ki.get(t);ar.configure(t,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Zi={average(t){if(!t.length)return!1;let e,n,r=0,i=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();r+=t.x,i+=t.y,++o}}return{x:r/o,y:i/o}},nearest(t,e){if(!t.length)return!1;let n,r,i,o=e.x,a=e.y,s=Number.POSITIVE_INFINITY;for(n=0,r=t.length;n<r;++n){const r=t[n].element;if(r&&r.hasValue()){const t=q(e,r.getCenterPoint());t<s&&(s=t,i=r)}}if(i){const t=i.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Ji(t,e){return e&&(d(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function to(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function eo(t,e){const{element:n,datasetIndex:r,index:i}=e,o=t.getDatasetMeta(r).controller,{label:a,value:s}=o.getLabelAndValue(i);return{chart:t,label:a,parsed:o.getParsed(i),raw:t.data.datasets[r].data[i],formattedValue:s,dataset:o.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function no(t,e){const n=t._chart.ctx,{body:r,footer:i,title:o}=t,{boxWidth:a,boxHeight:s}=e,l=ae(e.bodyFont),c=ae(e.titleFont),u=ae(e.footerFont),d=o.length,f=i.length,h=r.length,p=oe(e.padding);let g=p.height,m=0,b=r.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*c.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(g+=h*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-h)*l.lineHeight+(b-1)*e.bodySpacing),f&&(g+=e.footerMarginTop+f*u.lineHeight+(f-1)*e.footerSpacing);let y=0;const x=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=c.string,v(t.title,x),n.font=l.string,v(t.beforeBody.concat(t.afterBody),x),y=e.displayColors?a+2:0,v(r,(t=>{v(t.before,x),v(t.lines,x),v(t.after,x)})),y=0,n.font=u.string,v(t.footer,x),n.restore(),m+=p.width,{width:m,height:g}}function ro(t,e,n,r){const{x:i,width:o}=n,{width:a,chartArea:{left:s,right:l}}=t;let c="center";return"center"===r?c=i<=(s+l)/2?"left":"right":i<=o/2?c="left":i>=a-o/2&&(c="right"),function(t,e,n,r){const{x:i,width:o}=r,a=n.caretSize+n.caretPadding;return"left"===t&&i+o+a>e.width||"right"===t&&i-o-a<0||void 0}(c,t,e,n)&&(c="center"),c}function io(t,e,n){const r=e.yAlign||function(t,e){const{y:n,height:r}=e;return n<r/2?"top":n>t.height-r/2?"bottom":"center"}(t,n);return{xAlign:e.xAlign||ro(t,e,n,r),yAlign:r}}function oo(t,e,n,r){const{caretSize:i,caretPadding:o,cornerRadius:a}=t,{xAlign:s,yAlign:l}=n,c=i+o,u=a+o;let d=function(t,e){let{x:n,width:r}=t;return"right"===e?n-=r:"center"===e&&(n-=r/2),n}(e,s);const f=function(t,e,n){let{y:r,height:i}=t;return"top"===e?r+=n:r-="bottom"===e?i+n:i/2,r}(e,l,c);return"center"===l?"left"===s?d+=c:"right"===s&&(d-=c):"left"===s?d-=u:"right"===s&&(d+=u),{x:Z(d,0,r.width-e.width),y:Z(f,0,r.height-e.height)}}function ao(t,e,n){const r=oe(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-r.right:t.x+r.left}function so(t){return Ji([],to(t))}function lo(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}class co extends wr{constructor(t){super(),this.opacity=0,this._active=[],this._chart=t._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this,e=t._cachedAnimations;if(e)return e;const n=t._chart,r=t.options.setContext(t.getContext()),i=r.enabled&&n.options.animation&&r.animations,o=new un(t._chart,i);return i._cacheable&&(t._cachedAnimations=Object.freeze(o)),o}getContext(){const t=this;return t.$context||(t.$context=(e=t._chart.getContext(),n=t,r=t._tooltipItems,Object.assign(Object.create(e),{tooltip:n,tooltipItems:r,type:"tooltip"})));var e,n,r}getTitle(t,e){const n=this,{callbacks:r}=e,i=r.beforeTitle.apply(n,[t]),o=r.title.apply(n,[t]),a=r.afterTitle.apply(n,[t]);let s=[];return s=Ji(s,to(i)),s=Ji(s,to(o)),s=Ji(s,to(a)),s}getBeforeBody(t,e){return so(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const n=this,{callbacks:r}=e,i=[];return v(t,(t=>{const e={before:[],lines:[],after:[]},o=lo(r,t);Ji(e.before,to(o.beforeLabel.call(n,t))),Ji(e.lines,o.label.call(n,t)),Ji(e.after,to(o.afterLabel.call(n,t))),i.push(e)})),i}getAfterBody(t,e){return so(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const n=this,{callbacks:r}=e,i=r.beforeFooter.apply(n,[t]),o=r.footer.apply(n,[t]),a=r.afterFooter.apply(n,[t]);let s=[];return s=Ji(s,to(i)),s=Ji(s,to(o)),s=Ji(s,to(a)),s}_createItems(t){const e=this,n=e._active,r=e._chart.data,i=[],o=[],a=[];let s,l,c=[];for(s=0,l=n.length;s<l;++s)c.push(eo(e._chart,n[s]));return t.filter&&(c=c.filter(((e,n,i)=>t.filter(e,n,i,r)))),t.itemSort&&(c=c.sort(((e,n)=>t.itemSort(e,n,r)))),v(c,(n=>{const r=lo(t.callbacks,n);i.push(r.labelColor.call(e,n)),o.push(r.labelPointStyle.call(e,n)),a.push(r.labelTextColor.call(e,n))})),e.labelColors=i,e.labelPointStyles=o,e.labelTextColors=a,e.dataPoints=c,c}update(t,e){const n=this,r=n.options.setContext(n.getContext()),i=n._active;let o,a=[];if(i.length){const t=Zi[r.position].call(n,i,n._eventPosition);a=n._createItems(r),n.title=n.getTitle(a,r),n.beforeBody=n.getBeforeBody(a,r),n.body=n.getBody(a,r),n.afterBody=n.getAfterBody(a,r),n.footer=n.getFooter(a,r);const e=n._size=no(n,r),s=Object.assign({},t,e),l=io(n._chart,r,s),c=oo(r,s,l,n._chart);n.xAlign=l.xAlign,n.yAlign=l.yAlign,o={opacity:1,x:c.x,y:c.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==n.opacity&&(o={opacity:0});n._tooltipItems=a,n.$context=void 0,o&&n._resolveAnimations().update(n,o),t&&r.external&&r.external.call(n,{chart:n._chart,tooltip:n,replay:e})}drawCaret(t,e,n,r){const i=this.getCaretPosition(t,n,r);e.lineTo(i.x1,i.y1),e.lineTo(i.x2,i.y2),e.lineTo(i.x3,i.y3)}getCaretPosition(t,e,n){const{xAlign:r,yAlign:i}=this,{cornerRadius:o,caretSize:a}=n,{x:s,y:l}=t,{width:c,height:u}=e;let d,f,h,p,g,m;return"center"===i?(g=l+u/2,"left"===r?(d=s,f=d-a,p=g+a,m=g-a):(d=s+c,f=d+a,p=g-a,m=g+a),h=d):(f="left"===r?s+o+a:"right"===r?s+c-o-a:this.caretX,"top"===i?(p=l,g=p-a,d=f-a,h=f+a):(p=l+u,g=p+a,d=f+a,h=f-a),m=p),{x1:d,x2:f,x3:h,y1:p,y2:g,y3:m}}drawTitle(t,e,n){const r=this,i=r.title,o=i.length;let a,s,l;if(o){const c=Xe(n.rtl,r.x,r.width);for(t.x=ao(r,n.titleAlign,n),e.textAlign=c.textAlign(n.titleAlign),e.textBaseline="middle",a=ae(n.titleFont),s=n.titleSpacing,e.fillStyle=n.titleColor,e.font=a.string,l=0;l<o;++l)e.fillText(i[l],c.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+s,l+1===o&&(t.y+=n.titleMarginBottom-s)}}_drawColorBox(t,e,n,r,i){const o=this,a=o.labelColors[n],s=o.labelPointStyles[n],{boxHeight:l,boxWidth:c}=i,u=ae(i.bodyFont),d=ao(o,"left",i),f=r.x(d),h=l<u.lineHeight?(u.lineHeight-l)/2:0,p=e.y+h;if(i.usePointStyle){const e={radius:Math.min(c,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=r.leftForLtr(f,c)+c/2,o=p+l/2;t.strokeStyle=i.multiKeyBackground,t.fillStyle=i.multiKeyBackground,Ut(t,e,n,o),t.strokeStyle=a.borderColor,t.fillStyle=a.backgroundColor,Ut(t,e,n,o)}else{t.lineWidth=a.borderWidth||1,t.strokeStyle=a.borderColor,t.setLineDash(a.borderDash||[]),t.lineDashOffset=a.borderDashOffset||0;const e=r.leftForLtr(f,c),n=r.leftForLtr(r.xPlus(f,1),c-2),o=ie(a.borderRadius);Object.values(o).some((t=>0!==t))?(t.beginPath(),t.fillStyle=i.multiKeyBackground,Zt(t,{x:e,y:p,w:c,h:l,radius:o}),t.fill(),t.stroke(),t.fillStyle=a.backgroundColor,t.beginPath(),Zt(t,{x:n,y:p+1,w:c-2,h:l-2,radius:o}),t.fill()):(t.fillStyle=i.multiKeyBackground,t.fillRect(e,p,c,l),t.strokeRect(e,p,c,l),t.fillStyle=a.backgroundColor,t.fillRect(n,p+1,c-2,l-2))}t.fillStyle=o.labelTextColors[n]}drawBody(t,e,n){const r=this,{body:i}=r,{bodySpacing:o,bodyAlign:a,displayColors:s,boxHeight:l,boxWidth:c}=n,u=ae(n.bodyFont);let d=u.lineHeight,f=0;const h=Xe(n.rtl,r.x,r.width),p=function(n){e.fillText(n,h.x(t.x+f),t.y+d/2),t.y+=d+o},g=h.textAlign(a);let m,b,y,x,_,w,k;for(e.textAlign=a,e.textBaseline="middle",e.font=u.string,t.x=ao(r,g,n),e.fillStyle=n.bodyColor,v(r.beforeBody,p),f=s&&"right"!==g?"center"===a?c/2+1:c+2:0,x=0,w=i.length;x<w;++x){for(m=i[x],b=r.labelTextColors[x],e.fillStyle=b,v(m.before,p),y=m.lines,s&&y.length&&(r._drawColorBox(e,t,x,h,n),d=Math.max(u.lineHeight,l)),_=0,k=y.length;_<k;++_)p(y[_]),d=u.lineHeight;v(m.after,p)}f=0,d=u.lineHeight,v(r.afterBody,p),t.y-=o}drawFooter(t,e,n){const r=this,i=r.footer,o=i.length;let a,s;if(o){const l=Xe(n.rtl,r.x,r.width);for(t.x=ao(r,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=l.textAlign(n.footerAlign),e.textBaseline="middle",a=ae(n.footerFont),e.fillStyle=n.footerColor,e.font=a.string,s=0;s<o;++s)e.fillText(i[s],l.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+n.footerSpacing}}drawBackground(t,e,n,r){const{xAlign:i,yAlign:o}=this,{x:a,y:s}=t,{width:l,height:c}=n,u=r.cornerRadius;e.fillStyle=r.backgroundColor,e.strokeStyle=r.borderColor,e.lineWidth=r.borderWidth,e.beginPath(),e.moveTo(a+u,s),"top"===o&&this.drawCaret(t,e,n,r),e.lineTo(a+l-u,s),e.quadraticCurveTo(a+l,s,a+l,s+u),"center"===o&&"right"===i&&this.drawCaret(t,e,n,r),e.lineTo(a+l,s+c-u),e.quadraticCurveTo(a+l,s+c,a+l-u,s+c),"bottom"===o&&this.drawCaret(t,e,n,r),e.lineTo(a+u,s+c),e.quadraticCurveTo(a,s+c,a,s+c-u),"center"===o&&"left"===i&&this.drawCaret(t,e,n,r),e.lineTo(a,s+u),e.quadraticCurveTo(a,s,a+u,s),e.closePath(),e.fill(),r.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this,n=e._chart,r=e.$animations,i=r&&r.x,o=r&&r.y;if(i||o){const r=Zi[t.position].call(e,e._active,e._eventPosition);if(!r)return;const a=e._size=no(e,t),s=Object.assign({},r,e._size),l=io(n,t,s),c=oo(t,s,l,n);i._to===c.x&&o._to===c.y||(e.xAlign=l.xAlign,e.yAlign=l.yAlign,e.width=a.width,e.height=a.height,e.caretX=r.x,e.caretY=r.y,e._resolveAnimations().update(e,c))}}draw(t){const e=this,n=e.options.setContext(e.getContext());let r=e.opacity;if(!r)return;e._updateAnimationTarget(n);const i={width:e.width,height:e.height},o={x:e.x,y:e.y};r=Math.abs(r)<.001?0:r;const a=oe(n.padding),s=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;n.enabled&&s&&(t.save(),t.globalAlpha=r,e.drawBackground(o,t,i,n),Ke(t,n.textDirection),o.y+=a.top,e.drawTitle(o,t,n),e.drawBody(o,t,n),e.drawFooter(o,t,n),Ge(t,n.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this,r=n._active,i=t.map((({datasetIndex:t,index:e})=>{const r=n._chart.getDatasetMeta(t);if(!r)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:r.data[e],index:e}})),o=!y(r,i),a=n._positionChanged(i,e);(o||a)&&(n._active=i,n._eventPosition=e,n.update(!0))}handleEvent(t,e){const n=this,r=n.options,i=n._active||[];let o=!1,a=[];"mouseout"!==t.type&&(a=n._chart.getElementsAtEventForMode(t,r.mode,r,e),r.reverse&&a.reverse());const s=n._positionChanged(a,t);return o=e||!y(a,i)||s,o&&(n._active=a,(r.enabled||r.external)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0,e))),o}_positionChanged(t,e){const{caretX:n,caretY:r,options:i}=this,o=Zi[i.position].call(this,t,e);return!1!==o&&(n!==o.x||r!==o.y)}}co.positioners=Zi;var uo={id:"tooltip",_element:co,positioners:Zi,afterInit(t,e,n){n&&(t.tooltip=new co({_chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip,n={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",n)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n))},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:l,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(r>0&&e.dataIndex<r)return n[e.dataIndex]}return""},afterTitle:l,beforeBody:l,beforeLabel:l,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return u(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:l,afterBody:l,beforeFooter:l,footer:l,afterFooter:l}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},fo=Object.freeze({__proto__:null,Decimation:Pi,Filler:Ui,Legend:Qi,SubTitle:Gi,Title:Xi,Tooltip:uo});class ho extends Lr{constructor(t){super(t),this._startValue=void 0,this._valueRange=0}parse(t,e){if(u(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:Z(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n){const r=t.indexOf(e);return-1===r?((t,e,n)=>"string"==typeof e?t.push(e)-1:isNaN(e)?null:n)(t,e,n):r!==t.lastIndexOf(e)?n:r}(n,t,g(e,t)),n.length-1)}determineDataLimits(){const t=this,{minDefined:e,maxDefined:n}=t.getUserBounds();let{min:r,max:i}=t.getMinMax(!0);"ticks"===t.options.bounds&&(e||(r=0),n||(i=t.getLabels().length-1)),t.min=r,t.max=i}buildTicks(){const t=this,e=t.min,n=t.max,r=t.options.offset,i=[];let o=t.getLabels();o=0===e&&n===o.length-1?o:o.slice(e,n+1),t._valueRange=Math.max(o.length-(r?0:1),1),t._startValue=t.min-(r?.5:0);for(let t=e;t<=n;t++)i.push({value:t});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){const t=this;super.configure(),t.isHorizontal()||(t._reversePixels=!t._reversePixels)}getPixelForValue(t){const e=this;return"number"!=typeof t&&(t=e.parse(t)),null===t?NaN:e.getPixelForDecimal((t-e._startValue)/e._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){const e=this;return Math.round(e._startValue+e.getDecimalForPixel(t)*e._valueRange)}getBasePixel(){return this.bottom}}function po(t,e,{horizontal:n,minRotation:r}){const i=$(r),o=(n?Math.sin(i):Math.cos(i))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}ho.id="category",ho.defaults={ticks:{callback:ho.prototype.getLabelForValue}};class go extends Lr{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return u(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const t=this,{beginAtZero:e}=t.options,{minDefined:n,maxDefined:r}=t.getUserBounds();let{min:i,max:o}=t;const a=t=>i=n?i:t,s=t=>o=r?o:t;if(e){const t=V(i),e=V(o);t<0&&e<0?s(0):t>0&&e>0&&a(0)}if(i===o){let t=1;(o>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*o)),s(o+t),e||a(i-t)}t.min=i,t.max=o}getTickLimit(){const t=this,e=t.options.ticks;let n,{maxTicksLimit:r,stepSize:i}=e;return i?n=Math.ceil(t.max/i)-Math.floor(t.min/i)+1:(n=t.computeTickLimit(),r=r||11),r&&(n=Math.min(r,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this,e=t.options,n=e.ticks;let r=t.getTickLimit();r=Math.max(2,r);const i=function(t,e){const n=[],{bounds:r,step:i,min:o,max:a,precision:s,count:l,maxTicks:c,maxDigits:d,includeBounds:f}=t,h=i||1,p=c-1,{min:g,max:m}=e,b=!u(o),v=!u(a),y=!u(l),x=(m-g)/(d+1);let _,w,k,S,M=B((m-g)/p/h)*h;if(M<1e-14&&!b&&!v)return[{value:g},{value:m}];S=Math.ceil(m/M)-Math.floor(g/M),S>p&&(M=B(S*M/p/h)*h),u(s)||(_=Math.pow(10,s),M=Math.ceil(M*_)/_),"ticks"===r?(w=Math.floor(g/M)*M,k=Math.ceil(m/M)*M):(w=g,k=m),b&&v&&i&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((a-o)/i,M/1e3)?(S=Math.round(Math.min((a-o)/M,c)),M=(a-o)/S,w=o,k=a):y?(w=b?o:w,k=v?a:k,S=l-1,M=(k-w)/S):(S=(k-w)/M,S=H(S,Math.round(S),M/1e3)?Math.round(S):Math.ceil(S));const E=Math.max(Q(M),Q(w));_=Math.pow(10,u(s)?E:s),w=Math.round(w*_)/_,k=Math.round(k*_)/_;let C=0;for(b&&(f&&w!==o?(n.push({value:o}),w<o&&C++,H(Math.round((w+C*M)*_)/_,o,po(o,x,t))&&C++):w<o&&C++);C<S;++C)n.push({value:Math.round((w+C*M)*_)/_});return v&&f&&k!==a?H(n[n.length-1].value,a,po(a,x,t))?n[n.length-1].value=a:n.push({value:a}):v&&k!==a||n.push({value:k}),n}({maxTicks:r,bounds:e.bounds,min:e.min,max:e.max,precision:n.precision,step:n.stepSize,count:n.count,maxDigits:t._maxDigits(),horizontal:t.isHorizontal(),minRotation:n.minRotation||0,includeBounds:!1!==n.includeBounds},t._range||t);return"ticks"===e.bounds&&U(i,t,"value"),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),i}configure(){const t=this,e=t.ticks;let n=t.min,r=t.max;if(super.configure(),t.options.offset&&e.length){const t=(r-n)/Math.max(e.length-1,1)/2;n-=t,r+=t}t._startValue=n,t._endValue=r,t._valueRange=r-n}getLabelForValue(t){return qe(t,this.chart.options.locale)}}class mo extends go{determineDataLimits(){const t=this,{min:e,max:n}=t.getMinMax(!0);t.min=h(e)?e:0,t.max=h(n)?n:1,t.handleTickRangeOptions()}computeTickLimit(){const t=this,e=t.isHorizontal(),n=e?t.width:t.height,r=$(t.options.ticks.minRotation),i=(e?Math.sin(r):Math.cos(r))||.001,o=t._resolveTickFontOptions(0);return Math.ceil(n/Math.min(40,o.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function bo(t){return 1==t/Math.pow(10,Math.floor(j(t)))}mo.id="linear",mo.defaults={ticks:{callback:Sr.formatters.numeric}};class vo extends Lr{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=go.prototype.parse.apply(this,[t,e]);if(0!==n)return h(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const t=this,{min:e,max:n}=t.getMinMax(!0);t.min=h(e)?Math.max(0,e):null,t.max=h(n)?Math.max(0,n):null,t.options.beginAtZero&&(t._zero=!0),t.handleTickRangeOptions()}handleTickRangeOptions(){const t=this,{minDefined:e,maxDefined:n}=t.getUserBounds();let r=t.min,i=t.max;const o=t=>r=e?r:t,a=t=>i=n?i:t,s=(t,e)=>Math.pow(10,Math.floor(j(t))+e);r===i&&(r<=0?(o(1),a(10)):(o(s(r,-1)),a(s(i,1)))),r<=0&&o(s(i,-1)),i<=0&&a(s(r,1)),t._zero&&t.min!==t._suggestedMin&&r===s(t.min,0)&&o(s(r,-1)),t.min=r,t.max=i}buildTicks(){const t=this,e=t.options,n=function(t,e){const n=Math.floor(j(e.max)),r=Math.ceil(e.max/Math.pow(10,n)),i=[];let o=p(t.min,Math.pow(10,Math.floor(j(e.min)))),a=Math.floor(j(o)),s=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{i.push({value:o,major:bo(o)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),o=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<r);const c=p(t.max,o);return i.push({value:c,major:bo(o)}),i}({min:t._userMin,max:t._userMax},t);return"ticks"===e.bounds&&U(n,t,"value"),e.reverse?(n.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n}getLabelForValue(t){return void 0===t?"0":qe(t,this.chart.options.locale)}configure(){const t=this,e=t.min;super.configure(),t._startValue=j(e),t._valueRange=j(t.max)-j(e)}getPixelForValue(t){const e=this;return void 0!==t&&0!==t||(t=e.min),null===t||isNaN(t)?NaN:e.getPixelForDecimal(t===e.min?0:(j(t)-e._startValue)/e._valueRange)}getValueForPixel(t){const e=this,n=e.getDecimalForPixel(t);return Math.pow(10,e._startValue+n*e._valueRange)}}function yo(t){const e=t.ticks;if(e.display&&t.display){const t=oe(e.backdropPadding);return g(e.font&&e.font.size,jt.font.size)+t.height}return 0}function xo(t,e,n,r,i){return t===r||t===i?{start:e-n/2,end:e+n/2}:t<r||t>i?{start:e-n,end:e}:{start:e,end:e+n}}function _o(t){return 0===t||180===t?"center":t<180?"left":"right"}function wo(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function ko(t,e,n,r){const{ctx:i}=t;if(n)i.arc(t.xCenter,t.yCenter,e,0,L);else{let n=t.getPointPosition(0,e);i.moveTo(n.x,n.y);for(let o=1;o<r;o++)n=t.getPointPosition(o,e),i.lineTo(n.x,n.y)}}function So(t){return W(t)?t:0}vo.id="logarithmic",vo.defaults={ticks:{callback:Sr.formatters.logarithmic,major:{enabled:!0}}};class Mo extends go{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=yo(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2}determineDataLimits(){const t=this,{min:e,max:n}=t.getMinMax(!1);t.min=h(e)&&!isNaN(e)?e:0,t.max=h(n)&&!isNaN(n)?n:0,t.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/yo(this.options))}generateTickLabels(t){const e=this;go.prototype.generateTickLabels.call(e,t),e._pointLabels=e.getLabels().map(((t,n)=>{const r=b(e.options.pointLabels.callback,[t,n],e);return r||0===r?r:""}))}fit(){const t=this,e=t.options;e.display&&e.pointLabels.display?function(t){const e={l:0,r:t.width,t:0,b:t.height-t.paddingTop},n={},r=[],i=[],o=t.getLabels().length;for(let c=0;c<o;c++){const o=t.options.pointLabels.setContext(t.getPointLabelContext(c));i[c]=o.padding;const u=t.getPointPosition(c,t.drawingArea+i[c]),f=ae(o.font),h=(a=t.ctx,s=f,l=d(l=t._pointLabels[c])?l:[l],{w:Bt(a,s.string,l),h:l.length*s.lineHeight});r[c]=h;const p=t.getIndexAngle(c),g=Y(p),m=xo(g,u.x,h.w,0,180),b=xo(g,u.y,h.h,90,270);m.start<e.l&&(e.l=m.start,n.l=p),m.end>e.r&&(e.r=m.end,n.r=p),b.start<e.t&&(e.t=b.start,n.t=p),b.end>e.b&&(e.b=b.end,n.b=p)}var a,s,l;t._setReductions(t.drawingArea,e,n),t._pointLabelItems=function(t,e,n){const r=[],i=t.getLabels().length,o=t.options,a=yo(o),s=t.getDistanceFromCenterForValue(o.ticks.reverse?t.min:t.max);for(let o=0;o<i;o++){const i=0===o?a/2:0,d=t.getPointPosition(o,s+i+n[o]),f=Y(t.getIndexAngle(o)),h=e[o],p=wo(d.y,h.h,f),g=_o(f),m=(l=d.x,c=h.w,"right"===(u=g)?l-=c:"center"===u&&(l-=c/2),l);r.push({x:d.x,y:p,textAlign:g,left:m,top:p,right:m+h.w,bottom:p+h.h})}var l,c,u;return r}(t,r,i)}(t):t.setCenterPoint(0,0,0,0)}_setReductions(t,e,n){const r=this;let i=e.l/Math.sin(n.l),o=Math.max(e.r-r.width,0)/Math.sin(n.r),a=-e.t/Math.cos(n.t),s=-Math.max(e.b-(r.height-r.paddingTop),0)/Math.cos(n.b);i=So(i),o=So(o),a=So(a),s=So(s),r.drawingArea=Math.max(t/2,Math.min(Math.floor(t-(i+o)/2),Math.floor(t-(a+s)/2))),r.setCenterPoint(i,o,a,s)}setCenterPoint(t,e,n,r){const i=this,o=i.width-e-i.drawingArea,a=t+i.drawingArea,s=n+i.drawingArea,l=i.height-i.paddingTop-r-i.drawingArea;i.xCenter=Math.floor((a+o)/2+i.left),i.yCenter=Math.floor((s+l)/2+i.top+i.paddingTop)}getIndexAngle(t){return K(t*(L/this.getLabels().length)+$(this.options.startAngle||0))}getDistanceFromCenterForValue(t){const e=this;if(u(t))return NaN;const n=e.drawingArea/(e.max-e.min);return e.options.reverse?(e.max-t)*n:(t-e.min)*n}getValueForDistanceFromCenter(t){if(u(t))return NaN;const e=this,n=t/(e.drawingArea/(e.max-e.min));return e.options.reverse?e.max-n:e.min+n}getPointLabelContext(t){const e=this,n=e._pointLabels||[];if(t>=0&&t<n.length){const r=n[t];return function(t,e,n){return Object.assign(Object.create(t),{label:n,index:e,type:"pointLabel"})}(e.getContext(),t,r)}}getPointPosition(t,e){const n=this,r=n.getIndexAngle(t)-F;return{x:Math.cos(r)*e+n.xCenter,y:Math.sin(r)*e+n.yCenter,angle:r}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:r,bottom:i}=this._pointLabelItems[t];return{left:e,top:n,right:r,bottom:i}}drawBackground(){const t=this,{backgroundColor:e,grid:{circular:n}}=t.options;if(e){const r=t.ctx;r.save(),r.beginPath(),ko(t,t.getDistanceFromCenterForValue(t._endValue),n,t.getLabels().length),r.closePath(),r.fillStyle=e,r.fill(),r.restore()}}drawGrid(){const t=this,e=t.ctx,n=t.options,{angleLines:r,grid:i}=n,o=t.getLabels().length;let a,s,l;if(n.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:r}}=t;for(let i=e-1;i>=0;i--){const e=r.setContext(t.getPointLabelContext(i)),o=ae(e.font),{x:a,y:s,textAlign:l,left:c,top:d,right:f,bottom:h}=t._pointLabelItems[i],{backdropColor:p}=e;if(!u(p)){const t=oe(e.backdropPadding);n.fillStyle=p,n.fillRect(c-t.left,d-t.top,f-c+t.width,h-d+t.height)}Kt(n,t._pointLabels[i],a,s+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(t,o),i.display&&t.ticks.forEach(((e,n)=>{if(0!==n){s=t.getDistanceFromCenterForValue(e.value);const r=i.setContext(t.getContext(n-1));!function(t,e,n,r){const i=t.ctx,o=e.circular,{color:a,lineWidth:s}=e;!o&&!r||!a||!s||n<0||(i.save(),i.strokeStyle=a,i.lineWidth=s,i.setLineDash(e.borderDash),i.lineDashOffset=e.borderDashOffset,i.beginPath(),ko(t,n,o,r),i.closePath(),i.stroke(),i.restore())}(t,r,s,o)}})),r.display){for(e.save(),a=t.getLabels().length-1;a>=0;a--){const i=r.setContext(t.getPointLabelContext(a)),{color:o,lineWidth:c}=i;c&&o&&(e.lineWidth=c,e.strokeStyle=o,e.setLineDash(i.borderDash),e.lineDashOffset=i.borderDashOffset,s=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),l=t.getPointPosition(a,s),e.beginPath(),e.moveTo(t.xCenter,t.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const t=this,e=t.ctx,n=t.options,r=n.ticks;if(!r.display)return;const i=t.getIndexAngle(0);let o,a;e.save(),e.translate(t.xCenter,t.yCenter),e.rotate(i),e.textAlign="center",e.textBaseline="middle",t.ticks.forEach(((i,s)=>{if(0===s&&!n.reverse)return;const l=r.setContext(t.getContext(s)),c=ae(l.font);if(o=t.getDistanceFromCenterForValue(t.ticks[s].value),l.showLabelBackdrop){e.font=c.string,a=e.measureText(i.label).width,e.fillStyle=l.backdropColor;const t=oe(l.backdropPadding);e.fillRect(-a/2-t.left,-o-c.size/2-t.top,a+t.width,c.size+t.height)}Kt(e,i.label,0,-o,c,{color:l.color})})),e.restore()}drawTitle(){}}Mo.id="radialLinear",Mo.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Sr.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5}},Mo.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Mo.descriptors={angleLines:{_fallback:"grid"}};const Eo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Co=Object.keys(Eo);function Po(t,e){return t-e}function Oo(t,e){if(u(e))return null;const n=t._adapter,{parser:r,round:i,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof r&&(a=r(a)),h(a)||(a="string"==typeof r?n.parse(a,r):n.parse(a)),null===a?null:(i&&(a="week"!==i||!W(o)&&!0!==o?n.startOf(a,i):n.startOf(a,"isoWeek",o)),+a)}function To(t,e,n,r){const i=Co.length;for(let o=Co.indexOf(t);o<i-1;++o){const t=Eo[Co[o]],i=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(i*t.size))<=r)return Co[o]}return Co[i-1]}function Do(t,e,n){if(n){if(n.length){const{lo:r,hi:i}=le(n,e);t[n[r]>=e?n[r]:n[i]]=!0}}else t[e]=!0}function Lo(t,e,n){const r=[],i={},o=e.length;let a,s;for(a=0;a<o;++a)s=e[a],i[s]=a,r.push({value:s,major:!1});return 0!==o&&n?function(t,e,n,r){const i=t._adapter,o=+i.startOf(e[0].value,r),a=e[e.length-1].value;let s,l;for(s=o;s<=a;s=+i.add(s,1,r))l=n[s],l>=0&&(e[l].major=!0);return e}(t,r,i,n):r}class zo extends Lr{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const n=t.time||(t.time={}),r=this._adapter=new Bn._date(t.adapters.date);S(n.displayFormats,r.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Oo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this,e=t.options,n=t._adapter,r=e.time.unit||"day";let{min:i,max:o,minDefined:a,maxDefined:s}=t.getUserBounds();function l(t){a||isNaN(t.min)||(i=Math.min(i,t.min)),s||isNaN(t.max)||(o=Math.max(o,t.max))}a&&s||(l(t._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(t.getMinMax(!1))),i=h(i)&&!isNaN(i)?i:+n.startOf(Date.now(),r),o=h(o)&&!isNaN(o)?o:+n.endOf(Date.now(),r)+1,t.min=Math.min(i,o-1),t.max=Math.max(i+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this,e=t.options,n=e.time,r=e.ticks,i="labels"===r.source?t.getLabelTimestamps():t._generate();"ticks"===e.bounds&&i.length&&(t.min=t._userMin||i[0],t.max=t._userMax||i[i.length-1]);const o=t.min,a=function(t,e,n){let r=0,i=t.length;for(;r<i&&t[r]<e;)r++;for(;i>r&&t[i-1]>n;)i--;return r>0||i<t.length?t.slice(r,i):t}(i,o,t.max);return t._unit=n.unit||(r.autoSkip?To(n.minUnit,t.min,t.max,t._getLabelCapacity(o)):function(t,e,n,r,i){for(let o=Co.length-1;o>=Co.indexOf(n);o--){const n=Co[o];if(Eo[n].common&&t._adapter.diff(i,r,n)>=e-1)return n}return Co[n?Co.indexOf(n):0]}(t,a.length,n.minUnit,t.min,t.max)),t._majorUnit=r.major.enabled&&"year"!==t._unit?function(t){for(let e=Co.indexOf(t)+1,n=Co.length;e<n;++e)if(Eo[Co[e]].common)return Co[e]}(t._unit):void 0,t.initOffsets(i),e.reverse&&a.reverse(),Lo(t,a,t._majorUnit)}initOffsets(t){const e=this;let n,r,i=0,o=0;e.options.offset&&t.length&&(n=e.getDecimalForValue(t[0]),i=1===t.length?1-n:(e.getDecimalForValue(t[1])-n)/2,r=e.getDecimalForValue(t[t.length-1]),o=1===t.length?r:(r-e.getDecimalForValue(t[t.length-2]))/2);const a=t.length<3?.5:.25;i=Z(i,0,a),o=Z(o,0,a),e._offsets={start:i,end:o,factor:1/(i+1+o)}}_generate(){const t=this,e=t._adapter,n=t.min,r=t.max,i=t.options,o=i.time,a=o.unit||To(o.minUnit,n,r,t._getLabelCapacity(n)),s=g(o.stepSize,1),l="week"===a&&o.isoWeekday,c=W(l)||!0===l,u={};let d,f,h=n;if(c&&(h=+e.startOf(h,"isoWeek",l)),h=+e.startOf(h,c?"day":a),e.diff(r,n,a)>1e5*s)throw new Error(n+" and "+r+" are too far apart with stepSize of "+s+" "+a);const p="data"===i.ticks.source&&t.getDataTimestamps();for(d=h,f=0;d<r;d=+e.add(d,s,a),f++)Do(u,d,p);return d!==r&&"ticks"!==i.bounds&&1!==f||Do(u,d,p),Object.keys(u).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,r){const i=this,o=i.options,a=o.time.displayFormats,s=i._unit,l=i._majorUnit,c=s&&a[s],u=l&&a[l],d=n[e],f=l&&u&&d&&d.major,h=i._adapter.format(t,r||(f?u:c)),p=o.ticks.callback;return p?b(p,[h,e,n],i):h}generateTickLabels(t){let e,n,r;for(e=0,n=t.length;e<n;++e)r=t[e],r.label=this._tickFormatFunction(r.value,e,t)}getDecimalForValue(t){const e=this;return null===t?NaN:(t-e.min)/(e.max-e.min)}getPixelForValue(t){const e=this,n=e._offsets,r=e.getDecimalForValue(t);return e.getPixelForDecimal((n.start+r)*n.factor)}getValueForPixel(t){const e=this,n=e._offsets,r=e.getDecimalForPixel(t)/n.factor-n.end;return e.min+r*(e.max-e.min)}_getLabelSize(t){const e=this,n=e.options.ticks,r=e.ctx.measureText(t).width,i=$(e.isHorizontal()?n.maxRotation:n.minRotation),o=Math.cos(i),a=Math.sin(i),s=e._resolveTickFontOptions(0).size;return{w:r*o+s*a,h:r*a+s*o}}_getLabelCapacity(t){const e=this,n=e.options.time,r=n.displayFormats,i=r[n.unit]||r.millisecond,o=e._tickFormatFunction(t,0,Lo(e,[t],e._majorUnit),i),a=e._getLabelSize(o),s=Math.floor(e.isHorizontal()?e.width/a.w:e.height/a.h)-1;return s>0?s:1}getDataTimestamps(){const t=this;let e,n,r=t._cache.data||[];if(r.length)return r;const i=t.getMatchingVisibleMetas();if(t._normalized&&i.length)return t._cache.data=i[0].controller.getAllParsedValues(t);for(e=0,n=i.length;e<n;++e)r=r.concat(i[e].controller.getAllParsedValues(t));return t._cache.data=t.normalize(r)}getLabelTimestamps(){const t=this,e=t._cache.labels||[];let n,r;if(e.length)return e;const i=t.getLabels();for(n=0,r=i.length;n<r;++n)e.push(Oo(t,i[n]));return t._cache.labels=t._normalized?e:t.normalize(e)}normalize(t){return he(t.sort(Po))}}function Ro(t,e,n){let r,i,o,a,s=0,l=t.length-1;n?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=ce(t,"pos",e)),({pos:r,time:o}=t[s]),({pos:i,time:a}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=ce(t,"time",e)),({time:r,pos:o}=t[s]),({time:i,pos:a}=t[l]));const c=i-r;return c?o+(a-o)*(e-r)/c:o}zo.id="time",zo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Ao extends zo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this,e=t._getTimestampsForTable(),n=t._table=t.buildLookupTable(e);t._minPos=Ro(n,t.min),t._tableRange=Ro(n,t.max)-t._minPos,super.initOffsets(e)}buildLookupTable(t){const{min:e,max:n}=this,r=[],i=[];let o,a,s,l,c;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=n&&r.push(l);if(r.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,a=r.length;o<a;++o)c=r[o+1],s=r[o-1],l=r[o],Math.round((c+s)/2)!==l&&i.push({time:l,pos:o/(a-1)});return i}_getTimestampsForTable(){const t=this;let e=t._cache.all||[];if(e.length)return e;const n=t.getDataTimestamps(),r=t.getLabelTimestamps();return e=n.length&&r.length?t.normalize(n.concat(r)):n.length?n:r,e=t._cache.all=e,e}getDecimalForValue(t){return(Ro(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this,n=e._offsets,r=e.getDecimalForPixel(t)/n.factor-n.end;return Ro(e._table,r*e._tableRange+e._minPos,!0)}}Ao.id="timeseries",Ao.defaults=zo.defaults;const Fo=[Nn,Mi,fo,Object.freeze({__proto__:null,CategoryScale:ho,LinearScale:mo,LogarithmicScale:vo,RadialLinearScale:Mo,TimeScale:zo,TimeSeriesScale:Ao})];ni.register(...Fo);const Io=ni;var No=n(2492),jo=n.n(No),Vo=n(8583),Bo=n.n(Vo),Wo=n(3311),Ho=n.n(Wo);function Uo(){return Uo=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},Uo.apply(this,arguments)}function $o(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}var Yo=(0,r.forwardRef)((function(t,e){var n=t.id,i=t.className,o=t.height,a=void 0===o?150:o,s=t.width,l=void 0===s?300:s,c=t.redraw,u=void 0!==c&&c,d=t.type,f=t.data,h=t.options,p=void 0===h?{}:h,g=t.plugins,m=void 0===g?[]:g,b=t.getDatasetAtEvent,v=t.getElementAtEvent,y=t.getElementsAtEvent,x=t.fallbackContent,_=$o(t,["id","className","height","width","redraw","type","data","options","plugins","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent"]),w=(0,r.useRef)(null),k=(0,r.useMemo)((function(){return"function"==typeof f?w.current?f(w.current):{}:jo()({},f)}),[f,w.current]),S=(0,r.useState)(),M=S[0],E=S[1];(0,r.useImperativeHandle)(e,(function(){return M}),[M]);var C=function(){w.current&&E(new Io(w.current,{type:d,data:k,options:p,plugins:m}))},P=function(){M&&M.destroy()};return(0,r.useEffect)((function(){return C(),function(){return P()}}),[]),(0,r.useEffect)((function(){u?(P(),setTimeout((function(){C()}),0)):function(){if(M){if(p&&(M.options=Uo({},p)),!M.config.data)return M.config.data=k,void M.update();var t=k.datasets,e=void 0===t?[]:t,n=$o(k,["datasets"]),r=M.config.data.datasets,i=void 0===r?[]:r;Bo()(M.config.data,n),M.config.data.datasets=e.map((function(t){var e=Ho()(i,(function(e){return e.label===t.label&&e.type===t.type}));return e&&t.data?(e.data?e.data.length=t.data.length:e.data=[],Bo()(e.data,t.data),Bo()(e,Uo({},t,{data:e.data})),e):Uo({},t)})),M.update()}}()}),[t,k]),r.createElement("canvas",Object.assign({},_,{height:a,width:l,ref:w,id:n,className:i,onClick:function(t){M&&(b&&b(M.getElementsAtEventForMode(t,"dataset",{intersect:!0},!1),t),v&&v(M.getElementsAtEventForMode(t,"nearest",{intersect:!0},!1),t),y&&y(M.getElementsAtEventForMode(t,"index",{intersect:!0},!1),t))},"data-testid":"canvas",role:"img"}),x)})),Qo=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"line",ref:e,options:t.options||{}}))})),qo=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"bar",ref:e,options:t.options||{}}))})),Xo=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"radar",ref:e,options:t.options||{}}))})),Ko=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"doughnut",ref:e,options:t.options||{}}))})),Go=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"polarArea",ref:e,options:t.options||{}}))})),Zo=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"bubble",ref:e,options:t.options||{}}))})),Jo=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"pie",ref:e,options:t.options||{}}))})),ta=(0,r.forwardRef)((function(t,e){return r.createElement(Yo,Object.assign({},t,{type:"scatter",ref:e,options:t.options||{}}))})),ea=jt,na=ni;const ra=Yo},4448:(t,e,n)=>{"use strict";var r=n(7294),i=n(7418),o=n(3840);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function c(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(l[t]=e,t=0;t<e.length;t++)s.add(e[t])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(t,e,n,r,i,o,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){b[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];b[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){b[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){b[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){b[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){b[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){b[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){b[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){b[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(t){return t[1].toUpperCase()}function x(t,e,n,r){var i=b.hasOwnProperty(e)?b[e]:null;(null!==i?0===i.type:!r&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,n,r){if(null==e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,i,r)&&(n=null),r||null===i?function(t){return!!h.call(g,t)||!h.call(p,t)&&(f.test(t)?g[t]=!0:(p[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):i.mustUseProperty?t[i.propertyName]=null===n?3!==i.type&&"":n:(e=i.attributeName,r=i.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(v,y);b[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(v,y);b[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(v,y);b[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,M=60108,E=60114,C=60109,P=60110,O=60112,T=60113,D=60120,L=60115,z=60116,R=60121,A=60128,F=60129,I=60130,N=60131;if("function"==typeof Symbol&&Symbol.for){var j=Symbol.for;w=j("react.element"),k=j("react.portal"),S=j("react.fragment"),M=j("react.strict_mode"),E=j("react.profiler"),C=j("react.provider"),P=j("react.context"),O=j("react.forward_ref"),T=j("react.suspense"),D=j("react.suspense_list"),L=j("react.memo"),z=j("react.lazy"),R=j("react.block"),j("react.scope"),A=j("react.opaque.id"),F=j("react.debug_trace_mode"),I=j("react.offscreen"),N=j("react.legacy_hidden")}var V,B="function"==typeof Symbol&&Symbol.iterator;function W(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=B&&t[B]||t["@@iterator"])?t:null}function H(t){if(void 0===V)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);V=e&&e[1]||""}return"\n"+V+t}var U=!1;function $(t,e){if(!t||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var r=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){r=t}t.call(e.prototype)}else{try{throw Error()}catch(t){r=t}t()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?H(t):""}function Y(t){switch(t.tag){case 5:return H(t.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return $(t.type,!1);case 11:return $(t.type.render,!1);case 22:return $(t.type._render,!1);case 1:return $(t.type,!0);default:return""}}function Q(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case S:return"Fragment";case k:return"Portal";case E:return"Profiler";case M:return"StrictMode";case T:return"Suspense";case D:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case P:return(t.displayName||"Context")+".Consumer";case C:return(t._context.displayName||"Context")+".Provider";case O:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case L:return Q(t.type);case R:return Q(t._render);case z:e=t._payload,t=t._init;try{return Q(t(e))}catch(t){}}return null}function q(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function X(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function K(t){t._valueTracker||(t._valueTracker=function(t){var e=X(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return i.call(this)},set:function(t){r=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function G(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=X(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}function Z(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function J(t,e){var n=e.checked;return i({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function tt(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=q(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&x(t,"checked",e,!1)}function nt(t,e){et(t,e);var n=q(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?it(t,e.type,n):e.hasOwnProperty("defaultValue")&&it(t,e.type,q(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function rt(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function it(t,e,n){"number"===e&&Z(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ot(t,e){return t=i({children:void 0},e),(e=function(t){var e="";return r.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function at(t,e,n,r){if(t=t.options,e){e={};for(var i=0;i<n.length;i++)e["$"+n[i]]=!0;for(n=0;n<t.length;n++)i=e.hasOwnProperty("$"+t[n].value),t[n].selected!==i&&(t[n].selected=i),i&&r&&(t[n].defaultSelected=!0)}else{for(n=""+q(n),e=null,i=0;i<t.length;i++){if(t[i].value===n)return t[i].selected=!0,void(r&&(t[i].defaultSelected=!0));null!==e||t[i].disabled||(e=t[i])}null!==e&&(e.selected=!0)}}function st(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(a(91));return i({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function lt(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:q(n)}}function ct(t,e){var n=q(e.value),r=q(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=r&&(t.defaultValue=""+r)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var dt="http://www.w3.org/1999/xhtml";function ft(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ht(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?ft(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var pt,gt,mt=(gt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((pt=pt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=pt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction((function(){return gt(t,e)}))}:gt);function bt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var vt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},yt=["Webkit","ms","Moz","O"];function xt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||vt.hasOwnProperty(t)&&vt[t]?(""+e).trim():e+"px"}function _t(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=xt(n,e[n],r);"float"===n&&(n="cssFloat"),r?t.setProperty(n,i):t[n]=i}}Object.keys(vt).forEach((function(t){yt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),vt[e]=vt[t]}))}));var wt=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function kt(t,e){if(e){if(wt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(a(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(a(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(a(62))}}function St(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Mt(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Et=null,Ct=null,Pt=null;function Ot(t){if(t=ni(t)){if("function"!=typeof Et)throw Error(a(280));var e=t.stateNode;e&&(e=ii(e),Et(t.stateNode,t.type,e))}}function Tt(t){Ct?Pt?Pt.push(t):Pt=[t]:Ct=t}function Dt(){if(Ct){var t=Ct,e=Pt;if(Pt=Ct=null,Ot(t),e)for(t=0;t<e.length;t++)Ot(e[t])}}function Lt(t,e){return t(e)}function zt(t,e,n,r,i){return t(e,n,r,i)}function Rt(){}var At=Lt,Ft=!1,It=!1;function Nt(){null===Ct&&null===Pt||(Rt(),Dt())}function jt(t,e){var n=t.stateNode;if(null===n)return null;var r=ii(n);if(null===r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(a(231,e,typeof n));return n}var Vt=!1;if(d)try{var Bt={};Object.defineProperty(Bt,"passive",{get:function(){Vt=!0}}),window.addEventListener("test",Bt,Bt),window.removeEventListener("test",Bt,Bt)}catch(gt){Vt=!1}function Wt(t,e,n,r,i,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}var Ht=!1,Ut=null,$t=!1,Yt=null,Qt={onError:function(t){Ht=!0,Ut=t}};function qt(t,e,n,r,i,o,a,s,l){Ht=!1,Ut=null,Wt.apply(Qt,arguments)}function Xt(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Kt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function Gt(t){if(Xt(t)!==t)throw Error(a(188))}function Zt(t){if(t=function(t){var e=t.alternate;if(!e){if(null===(e=Xt(t)))throw Error(a(188));return e!==t?null:t}for(var n=t,r=e;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Gt(i),t;if(o===r)return Gt(i),e;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?t:e}(t),!t)return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function Jt(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var te,ee,ne,re,ie=!1,oe=[],ae=null,se=null,le=null,ce=new Map,ue=new Map,de=[],fe="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function he(t,e,n,r,i){return{blockedOn:t,domEventName:e,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pe(t,e){switch(t){case"focusin":case"focusout":ae=null;break;case"dragenter":case"dragleave":se=null;break;case"mouseover":case"mouseout":le=null;break;case"pointerover":case"pointerout":ce.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ue.delete(e.pointerId)}}function ge(t,e,n,r,i,o){return null===t||t.nativeEvent!==o?(t=he(e,n,r,i,o),null!==e&&null!==(e=ni(e))&&ee(e),t):(t.eventSystemFlags|=r,e=t.targetContainers,null!==i&&-1===e.indexOf(i)&&e.push(i),t)}function me(t){var e=ei(t.target);if(null!==e){var n=Xt(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Kt(n)))return t.blockedOn=e,void re(t.lanePriority,(function(){o.unstable_runWithPriority(t.priority,(function(){ne(n)}))}))}else if(3===e&&n.stateNode.hydrate)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function be(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=Ze(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=ni(n))&&ee(e),t.blockedOn=n,!1;e.shift()}return!0}function ve(t,e,n){be(t)&&n.delete(e)}function ye(){for(ie=!1;0<oe.length;){var t=oe[0];if(null!==t.blockedOn){null!==(t=ni(t.blockedOn))&&te(t);break}for(var e=t.targetContainers;0<e.length;){var n=Ze(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n){t.blockedOn=n;break}e.shift()}null===t.blockedOn&&oe.shift()}null!==ae&&be(ae)&&(ae=null),null!==se&&be(se)&&(se=null),null!==le&&be(le)&&(le=null),ce.forEach(ve),ue.forEach(ve)}function xe(t,e){t.blockedOn===e&&(t.blockedOn=null,ie||(ie=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ye)))}function _e(t){function e(e){return xe(e,t)}if(0<oe.length){xe(oe[0],t);for(var n=1;n<oe.length;n++){var r=oe[n];r.blockedOn===t&&(r.blockedOn=null)}}for(null!==ae&&xe(ae,t),null!==se&&xe(se,t),null!==le&&xe(le,t),ce.forEach(e),ue.forEach(e),n=0;n<de.length;n++)(r=de[n]).blockedOn===t&&(r.blockedOn=null);for(;0<de.length&&null===(n=de[0]).blockedOn;)me(n),null===n.blockedOn&&de.shift()}function we(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var ke={animationend:we("Animation","AnimationEnd"),animationiteration:we("Animation","AnimationIteration"),animationstart:we("Animation","AnimationStart"),transitionend:we("Transition","TransitionEnd")},Se={},Me={};function Ee(t){if(Se[t])return Se[t];if(!ke[t])return t;var e,n=ke[t];for(e in n)if(n.hasOwnProperty(e)&&e in Me)return Se[t]=n[e];return t}d&&(Me=document.createElement("div").style,"AnimationEvent"in window||(delete ke.animationend.animation,delete ke.animationiteration.animation,delete ke.animationstart.animation),"TransitionEvent"in window||delete ke.transitionend.transition);var Ce=Ee("animationend"),Pe=Ee("animationiteration"),Oe=Ee("animationstart"),Te=Ee("transitionend"),De=new Map,Le=new Map,ze=["abort","abort",Ce,"animationEnd",Pe,"animationIteration",Oe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Te,"transitionEnd","waiting","waiting"];function Re(t,e){for(var n=0;n<t.length;n+=2){var r=t[n],i=t[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Le.set(r,e),De.set(r,i),c(i,[r])}}(0,o.unstable_now)();var Ae=8;function Fe(t){if(0!=(1&t))return Ae=15,1;if(0!=(2&t))return Ae=14,2;if(0!=(4&t))return Ae=13,4;var e=24&t;return 0!==e?(Ae=12,e):0!=(32&t)?(Ae=11,32):0!=(e=192&t)?(Ae=10,e):0!=(256&t)?(Ae=9,256):0!=(e=3584&t)?(Ae=8,e):0!=(4096&t)?(Ae=7,4096):0!=(e=4186112&t)?(Ae=6,e):0!=(e=62914560&t)?(Ae=5,e):67108864&t?(Ae=4,67108864):0!=(134217728&t)?(Ae=3,134217728):0!=(e=805306368&t)?(Ae=2,e):0!=(1073741824&t)?(Ae=1,1073741824):(Ae=8,t)}function Ie(t,e){var n=t.pendingLanes;if(0===n)return Ae=0;var r=0,i=0,o=t.expiredLanes,a=t.suspendedLanes,s=t.pingedLanes;if(0!==o)r=o,i=Ae=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=Fe(l),i=Ae):0!=(s&=o)&&(r=Fe(s),i=Ae)}else 0!=(o=n&~a)?(r=Fe(o),i=Ae):0!==s&&(r=Fe(s),i=Ae);if(0===r)return 0;if(r=n&((0>(r=31-He(r))?0:1<<r)<<1)-1,0!==e&&e!==r&&0==(e&a)){if(Fe(e),i<=Ae)return e;Ae=i}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=r;0<e;)i=1<<(n=31-He(e)),r|=t[n],e&=~i;return r}function Ne(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function je(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=Ve(24&~e))?je(10,e):t;case 10:return 0===(t=Ve(192&~e))?je(8,e):t;case 8:return 0===(t=Ve(3584&~e))&&0===(t=Ve(4186112&~e))&&(t=512),t;case 2:return 0===(e=Ve(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function Ve(t){return t&-t}function Be(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function We(t,e,n){t.pendingLanes|=e;var r=e-1;t.suspendedLanes&=r,t.pingedLanes&=r,(t=t.eventTimes)[e=31-He(e)]=n}var He=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Ue(t)/$e|0)|0},Ue=Math.log,$e=Math.LN2,Ye=o.unstable_UserBlockingPriority,Qe=o.unstable_runWithPriority,qe=!0;function Xe(t,e,n,r){Ft||Rt();var i=Ge,o=Ft;Ft=!0;try{zt(i,t,e,n,r)}finally{(Ft=o)||Nt()}}function Ke(t,e,n,r){Qe(Ye,Ge.bind(null,t,e,n,r))}function Ge(t,e,n,r){var i;if(qe)if((i=0==(4&e))&&0<oe.length&&-1<fe.indexOf(t))t=he(null,t,e,n,r),oe.push(t);else{var o=Ze(t,e,n,r);if(null===o)i&&pe(t,r);else{if(i){if(-1<fe.indexOf(t))return t=he(o,t,e,n,r),void oe.push(t);if(function(t,e,n,r,i){switch(e){case"focusin":return ae=ge(ae,t,e,n,r,i),!0;case"dragenter":return se=ge(se,t,e,n,r,i),!0;case"mouseover":return le=ge(le,t,e,n,r,i),!0;case"pointerover":var o=i.pointerId;return ce.set(o,ge(ce.get(o)||null,t,e,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ue.set(o,ge(ue.get(o)||null,t,e,n,r,i)),!0}return!1}(o,t,e,n,r))return;pe(t,r)}Rr(t,e,r,null,n)}}}function Ze(t,e,n,r){var i=Mt(r);if(null!==(i=ei(i))){var o=Xt(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Kt(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Rr(t,e,r,i,n),null}var Je=null,tn=null,en=null;function nn(){if(en)return en;var t,e,n=tn,r=n.length,i="value"in Je?Je.value:Je.textContent,o=i.length;for(t=0;t<r&&n[t]===i[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===i[o-e];e++);return en=i.slice(t,1<e?1-e:void 0)}function rn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function on(){return!0}function an(){return!1}function sn(t){function e(e,n,r,i,o){for(var a in this._reactName=e,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),e}var ln,cn,un,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),hn=i({},dn,{view:0,detail:0}),pn=sn(hn),gn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==un&&(un&&"mousemove"===t.type?(ln=t.screenX-un.screenX,cn=t.screenY-un.screenY):cn=ln=0,un=t),ln)},movementY:function(t){return"movementY"in t?t.movementY:cn}}),mn=sn(gn),bn=sn(i({},gn,{dataTransfer:0})),vn=sn(i({},hn,{relatedTarget:0})),yn=sn(i({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=i({},dn,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),_n=sn(xn),wn=sn(i({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Mn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Mn[t])&&!!e[t]}function Cn(){return En}var Pn=i({},hn,{key:function(t){if(t.key){var e=kn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=rn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?Sn[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(t){return"keypress"===t.type?rn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?rn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),On=sn(Pn),Tn=sn(i({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=sn(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Ln=sn(i({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),zn=i({},gn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=sn(zn),An=[9,13,27,32],Fn=d&&"CompositionEvent"in window,In=null;d&&"documentMode"in document&&(In=document.documentMode);var Nn=d&&"TextEvent"in window&&!In,jn=d&&(!Fn||In&&8<In&&11>=In),Vn=String.fromCharCode(32),Bn=!1;function Wn(t,e){switch(t){case"keyup":return-1!==An.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Un=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!$n[t.type]:"textarea"===e}function Qn(t,e,n,r){Tt(r),0<(e=Fr(e,"onChange")).length&&(n=new fn("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var qn=null,Xn=null;function Kn(t){Pr(t,0)}function Gn(t){if(G(ri(t)))return t}function Zn(t,e){if("change"===t)return e}var Jn=!1;if(d){var tr;if(d){var er="oninput"in document;if(!er){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),er="function"==typeof nr.oninput}tr=er}else tr=!1;Jn=tr&&(!document.documentMode||9<document.documentMode)}function rr(){qn&&(qn.detachEvent("onpropertychange",ir),Xn=qn=null)}function ir(t){if("value"===t.propertyName&&Gn(Xn)){var e=[];if(Qn(e,Xn,t,Mt(t)),t=Kn,Ft)t(e);else{Ft=!0;try{Lt(t,e)}finally{Ft=!1,Nt()}}}}function or(t,e,n){"focusin"===t?(rr(),Xn=n,(qn=e).attachEvent("onpropertychange",ir)):"focusout"===t&&rr()}function ar(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Gn(Xn)}function sr(t,e){if("click"===t)return Gn(e)}function lr(t,e){if("input"===t||"change"===t)return Gn(e)}var cr="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},ur=Object.prototype.hasOwnProperty;function dr(t,e){if(cr(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(e,n[r])||!cr(t[n[r]],e[n[r]]))return!1;return!0}function fr(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function hr(t,e){var n,r=fr(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=fr(r)}}function pr(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?pr(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function gr(){for(var t=window,e=Z();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=Z((t=e.contentWindow).document)}return e}function mr(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var br=d&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,xr=null,_r=!1;function wr(t,e,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==vr||vr!==Z(r)||(r="selectionStart"in(r=vr)&&mr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},xr&&dr(xr,r)||(xr=r,0<(r=Fr(yr,"onSelect")).length&&(e=new fn("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=vr)))}Re("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Re("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Re(ze,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)Le.set(kr[Sr],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Cr(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,r,i,o,s,l,c){if(qt.apply(this,arguments),Ht){if(!Ht)throw Error(a(198));var u=Ut;Ht=!1,Ut=null,$t||($t=!0,Yt=u)}}(r,e,void 0,t),t.currentTarget=null}function Pr(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var r=t[n],i=r.event;r=r.listeners;t:{var o=void 0;if(e)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break t;Cr(i,s,c),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break t;Cr(i,s,c),o=l}}}if($t)throw t=Yt,$t=!1,Yt=null,t}function Or(t,e){var n=oi(e),r=t+"__bubble";n.has(r)||(zr(e,t,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Dr(t){t[Tr]||(t[Tr]=!0,s.forEach((function(e){Er.has(e)||Lr(e,!1,t,null),Lr(e,!0,t,null)})))}function Lr(t,e,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===t&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!e&&Er.has(t)){if("scroll"!==t)return;i|=2,o=r}var a=oi(o),s=t+"__"+(e?"capture":"bubble");a.has(s)||(e&&(i|=4),zr(o,t,i,e),a.add(s))}function zr(t,e,n,r){var i=Le.get(e);switch(void 0===i?2:i){case 0:i=Xe;break;case 1:i=Ke;break;default:i=Ge}n=i.bind(null,e,n,t),i=void 0,!Vt||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(i=!0),r?void 0!==i?t.addEventListener(e,n,{capture:!0,passive:i}):t.addEventListener(e,n,!0):void 0!==i?t.addEventListener(e,n,{passive:i}):t.addEventListener(e,n,!1)}function Rr(t,e,n,r,i){var o=r;if(0==(1&e)&&0==(2&e)&&null!==r)t:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=ei(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue t}s=s.parentNode}}r=r.return}!function(t,e,n){if(It)return t();It=!0;try{At(t,e,n)}finally{It=!1,Nt()}}((function(){var r=o,i=Mt(n),a=[];t:{var s=De.get(t);if(void 0!==s){var l=fn,c=t;switch(t){case"keypress":if(0===rn(n))break t;case"keydown":case"keyup":l=On;break;case"focusin":c="focus",l=vn;break;case"focusout":c="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case Ce:case Pe:case Oe:l=yn;break;case Te:l=Ln;break;case"scroll":l=pn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var u=0!=(4&e),d=!u&&"scroll"===t,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=jt(p,f))&&u.push(Ar(p,g,h))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,i),a.push({event:s,listeners:u}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(s="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(c=n.relatedTarget||n.fromElement)||!ei(c)&&!c[Jr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?ei(c):null)&&(c!==(d=Xt(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==t&&"pointerover"!==t||(u=Tn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:ri(l),h=null==c?s:ri(c),(s=new u(g,p+"leave",l,n,i)).target=d,s.relatedTarget=h,g=null,ei(i)===r&&((u=new u(f,p+"enter",c,n,i)).target=h,u.relatedTarget=d,g=u),d=g,l&&c)t:{for(f=c,p=0,h=u=l;h;h=Ir(h))p++;for(h=0,g=f;g;g=Ir(g))h++;for(;0<p-h;)u=Ir(u),p--;for(;0<h-p;)f=Ir(f),h--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break t;u=Ir(u),f=Ir(f)}u=null}else u=null;null!==l&&Nr(a,s,l,u,!1),null!==c&&null!==d&&Nr(a,d,c,u,!0)}if("select"===(l=(s=r?ri(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Zn;else if(Yn(s))if(Jn)m=lr;else{m=ar;var b=or}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=sr);switch(m&&(m=m(t,r))?Qn(a,m,n,i):(b&&b(t,s,r),"focusout"===t&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&it(s,"number",s.value)),b=r?ri(r):window,t){case"focusin":(Yn(b)||"true"===b.contentEditable)&&(vr=b,yr=r,xr=null);break;case"focusout":xr=yr=vr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,wr(a,n,i);break;case"selectionchange":if(br)break;case"keydown":case"keyup":wr(a,n,i)}var v;if(Fn)t:{switch(t){case"compositionstart":var y="onCompositionStart";break t;case"compositionend":y="onCompositionEnd";break t;case"compositionupdate":y="onCompositionUpdate";break t}y=void 0}else Un?Wn(t,n)&&(y="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(y="onCompositionStart");y&&(jn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==y?"onCompositionEnd"===y&&Un&&(v=nn()):(tn="value"in(Je=i)?Je.value:Je.textContent,Un=!0)),0<(b=Fr(r,y)).length&&(y=new wn(y,t,null,n,i),a.push({event:y,listeners:b}),(v||null!==(v=Hn(n)))&&(y.data=v))),(v=Nn?function(t,e){switch(t){case"compositionend":return Hn(e);case"keypress":return 32!==e.which?null:(Bn=!0,Vn);case"textInput":return(t=e.data)===Vn&&Bn?null:t;default:return null}}(t,n):function(t,e){if(Un)return"compositionend"===t||!Fn&&Wn(t,e)?(t=nn(),en=tn=Je=null,Un=!1,t):null;switch(t){default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return jn&&"ko"!==e.locale?null:e.data}}(t,n))&&0<(r=Fr(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=v)}Pr(a,e)}))}function Ar(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Fr(t,e){for(var n=e+"Capture",r=[];null!==t;){var i=t,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=jt(t,n))&&r.unshift(Ar(t,o,i)),null!=(o=jt(t,e))&&r.push(Ar(t,o,i))),t=t.return}return r}function Ir(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function Nr(t,e,n,r,i){for(var o=e._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=jt(n,o))&&a.unshift(Ar(n,l,s)):i||null!=(l=jt(n,o))&&a.push(Ar(n,l,s))),n=n.return}0!==a.length&&t.push({event:e,listeners:a})}function jr(){}var Vr=null,Br=null;function Wr(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Hr(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Yr(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function Qr(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function qr(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var Xr=0,Kr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Kr,Zr="__reactProps$"+Kr,Jr="__reactContainer$"+Kr,ti="__reactEvents$"+Kr;function ei(t){var e=t[Gr];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Jr]||n[Gr]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=qr(t);null!==t;){if(n=t[Gr])return n;t=qr(t)}return e}n=(t=n).parentNode}return null}function ni(t){return!(t=t[Gr]||t[Jr])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function ri(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(a(33))}function ii(t){return t[Zr]||null}function oi(t){var e=t[ti];return void 0===e&&(e=t[ti]=new Set),e}var ai=[],si=-1;function li(t){return{current:t}}function ci(t){0>si||(t.current=ai[si],ai[si]=null,si--)}function ui(t,e){si++,ai[si]=t.current,t.current=e}var di={},fi=li(di),hi=li(!1),pi=di;function gi(t,e){var n=t.type.contextTypes;if(!n)return di;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=e[i];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function mi(t){return null!=t.childContextTypes}function bi(){ci(hi),ci(fi)}function vi(t,e,n){if(fi.current!==di)throw Error(a(168));ui(fi,e),ui(hi,n)}function yi(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,Q(e)||"Unknown",o));return i({},n,r)}function xi(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||di,pi=fi.current,ui(fi,t),ui(hi,hi.current),!0}function _i(t,e,n){var r=t.stateNode;if(!r)throw Error(a(169));n?(t=yi(t,e,pi),r.__reactInternalMemoizedMergedChildContext=t,ci(hi),ci(fi),ui(fi,t)):ci(hi),ui(hi,n)}var wi=null,ki=null,Si=o.unstable_runWithPriority,Mi=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,Ci=o.unstable_shouldYield,Pi=o.unstable_requestPaint,Oi=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Di=o.unstable_ImmediatePriority,Li=o.unstable_UserBlockingPriority,zi=o.unstable_NormalPriority,Ri=o.unstable_LowPriority,Ai=o.unstable_IdlePriority,Fi={},Ii=void 0!==Pi?Pi:function(){},Ni=null,ji=null,Vi=!1,Bi=Oi(),Wi=1e4>Bi?Oi:function(){return Oi()-Bi};function Hi(){switch(Ti()){case Di:return 99;case Li:return 98;case zi:return 97;case Ri:return 96;case Ai:return 95;default:throw Error(a(332))}}function Ui(t){switch(t){case 99:return Di;case 98:return Li;case 97:return zi;case 96:return Ri;case 95:return Ai;default:throw Error(a(332))}}function $i(t,e){return t=Ui(t),Si(t,e)}function Yi(t,e,n){return t=Ui(t),Mi(t,e,n)}function Qi(){if(null!==ji){var t=ji;ji=null,Ei(t)}qi()}function qi(){if(!Vi&&null!==Ni){Vi=!0;var t=0;try{var e=Ni;$i(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),Ni=null}catch(e){throw null!==Ni&&(Ni=Ni.slice(t+1)),Mi(Di,Qi),e}finally{Vi=!1}}}var Xi=_.ReactCurrentBatchConfig;function Ki(t,e){if(t&&t.defaultProps){for(var n in e=i({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var Gi=li(null),Zi=null,Ji=null,to=null;function eo(){to=Ji=Zi=null}function no(t){var e=Gi.current;ci(Gi),t.type._context._currentValue=e}function ro(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function io(t,e){Zi=t,to=Ji=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Fa=!0),t.firstContext=null)}function oo(t,e){if(to!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(to=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Ji){if(null===Zi)throw Error(a(308));Ji=e,Zi.dependencies={lanes:0,firstContext:e,responders:null}}else Ji=Ji.next=e;return t._currentValue}var ao=!1;function so(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function lo(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function co(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function uo(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function fo(t,e){var n=t.updateQueue,r=t.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=e:o=o.next=e}else i=o=e;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function ho(t,e,n,r){var o=t.updateQueue;ao=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var d=t.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=u:f.next=u,d.lastBaseUpdate=c)}}if(null!==a){for(f=o.baseState,s=0,d=u=c=null;;){l=a.lane;var h=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});t:{var p=t,g=a;switch(l=e,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,l);break t}f=p;break t;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(h,f,l):p))break t;f=i({},f,l);break t;case 2:ao=!0}}null!==a.callback&&(t.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else h={eventTime:h,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=h,c=f):d=d.next=h,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===d&&(c=f),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=d,Ns|=s,t.lanes=s,t.memoizedState=f}}function po(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var r=t[e],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var go=(new r.Component).refs;function mo(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:i({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var bo={isMounted:function(t){return!!(t=t._reactInternals)&&Xt(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=cl(),i=ul(t),o=co(r,i);o.payload=e,null!=n&&(o.callback=n),uo(t,o),dl(t,i,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=cl(),i=ul(t),o=co(r,i);o.tag=1,o.payload=e,null!=n&&(o.callback=n),uo(t,o),dl(t,i,r)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=cl(),r=ul(t),i=co(n,r);i.tag=2,null!=e&&(i.callback=e),uo(t,i),dl(t,r,n)}};function vo(t,e,n,r,i,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&dr(n,r)&&dr(i,o))}function yo(t,e,n){var r=!1,i=di,o=e.contextType;return"object"==typeof o&&null!==o?o=oo(o):(i=mi(e)?pi:fi.current,o=(r=null!=(r=e.contextTypes))?gi(t,i):di),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=bo,t.stateNode=e,e._reactInternals=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=o),e}function xo(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&bo.enqueueReplaceState(e,e.state,null)}function _o(t,e,n,r){var i=t.stateNode;i.props=n,i.state=t.memoizedState,i.refs=go,so(t);var o=e.contextType;"object"==typeof o&&null!==o?i.context=oo(o):(o=mi(e)?pi:fi.current,i.context=gi(t,o)),ho(t,n,i,r),i.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(mo(t,e,o,n),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&bo.enqueueReplaceState(i,i.state,null),ho(t,n,i,r),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4)}var wo=Array.isArray;function ko(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,t));var i=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===i?e.ref:(e=function(t){var e=r.refs;e===go&&(e=r.refs={}),null===t?delete e[i]:e[i]=t},e._stringRef=i,e)}if("string"!=typeof t)throw Error(a(284));if(!n._owner)throw Error(a(290,t))}return t}function So(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function Mo(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e){return(t=Hl(t,e)).index=0,t.sibling=null,t}function o(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.flags=2,n):r:(e.flags=2,n):n}function s(e){return t&&null===e.alternate&&(e.flags=2),e}function l(t,e,n,r){return null===e||6!==e.tag?((e=Ql(n,t.mode,r)).return=t,e):((e=i(e,n)).return=t,e)}function c(t,e,n,r){return null!==e&&e.elementType===n.type?((r=i(e,n.props)).ref=ko(t,e,n),r.return=t,r):((r=Ul(n.type,n.key,n.props,null,t.mode,r)).ref=ko(t,e,n),r.return=t,r)}function u(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=ql(n,t.mode,r)).return=t,e):((e=i(e,n.children||[])).return=t,e)}function d(t,e,n,r,o){return null===e||7!==e.tag?((e=$l(n,t.mode,r,o)).return=t,e):((e=i(e,n)).return=t,e)}function f(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Ql(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case w:return(n=Ul(e.type,e.key,e.props,null,t.mode,n)).ref=ko(t,null,e),n.return=t,n;case k:return(e=ql(e,t.mode,n)).return=t,e}if(wo(e)||W(e))return(e=$l(e,t.mode,n,null)).return=t,e;So(t,e)}return null}function h(t,e,n,r){var i=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?n.type===S?d(t,e,n.props.children,r,i):c(t,e,n,r):null;case k:return n.key===i?u(t,e,n,r):null}if(wo(n)||W(n))return null!==i?null:d(t,e,n,r,null);So(t,n)}return null}function p(t,e,n,r,i){if("string"==typeof r||"number"==typeof r)return l(e,t=t.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return t=t.get(null===r.key?n:r.key)||null,r.type===S?d(e,t,r.props.children,i,r.key):c(e,t,r,i);case k:return u(e,t=t.get(null===r.key?n:r.key)||null,r,i)}if(wo(r)||W(r))return d(e,t=t.get(n)||null,r,i,null);So(e,r)}return null}function g(i,a,s,l){for(var c=null,u=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=h(i,d,s[g],l);if(null===b){null===d&&(d=m);break}t&&d&&null===b.alternate&&e(i,d),a=o(b,a,g),null===u?c=b:u.sibling=b,u=b,d=m}if(g===s.length)return n(i,d),c;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],l))&&(a=o(d,a,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],l))&&(t&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===u?c=m:u.sibling=m,u=m);return t&&d.forEach((function(t){return e(i,t)})),c}function m(i,s,l,c){var u=W(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,g=s,m=s=0,b=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var y=h(i,g,v.value,c);if(null===y){null===g&&(g=b);break}t&&g&&null===y.alternate&&e(i,g),s=o(y,s,m),null===d?u=y:d.sibling=y,d=y,g=b}if(v.done)return n(i,g),u;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=f(i,v.value,c))&&(s=o(v,s,m),null===d?u=v:d.sibling=v,d=v);return u}for(g=r(i,g);!v.done;m++,v=l.next())null!==(v=p(g,i,m,v.value,c))&&(t&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=o(v,s,m),null===d?u=v:d.sibling=v,d=v);return t&&g.forEach((function(t){return e(i,t)})),u}return function(t,r,o,l){var c="object"==typeof o&&null!==o&&o.type===S&&null===o.key;c&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case w:t:{for(u=o.key,c=r;null!==c;){if(c.key===u){if(7===c.tag){if(o.type===S){n(t,c.sibling),(r=i(c,o.props.children)).return=t,t=r;break t}}else if(c.elementType===o.type){n(t,c.sibling),(r=i(c,o.props)).ref=ko(t,c,o),r.return=t,t=r;break t}n(t,c);break}e(t,c),c=c.sibling}o.type===S?((r=$l(o.props.children,t.mode,l,o.key)).return=t,t=r):((l=Ul(o.type,o.key,o.props,null,t.mode,l)).ref=ko(t,r,o),l.return=t,t=l)}return s(t);case k:t:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(t,r.sibling),(r=i(r,o.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=ql(o,t.mode,l)).return=t,t=r}return s(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(t,r.sibling),(r=i(r,o)).return=t,t=r):(n(t,r),(r=Ql(o,t.mode,l)).return=t,t=r),s(t);if(wo(o))return g(t,r,o,l);if(W(o))return m(t,r,o,l);if(u&&So(t,o),void 0===o&&!c)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Q(t.type)||"Component"))}return n(t,r)}}var Eo=Mo(!0),Co=Mo(!1),Po={},Oo=li(Po),To=li(Po),Do=li(Po);function Lo(t){if(t===Po)throw Error(a(174));return t}function zo(t,e){switch(ui(Do,e),ui(To,t),ui(Oo,Po),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ht(null,"");break;default:e=ht(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}ci(Oo),ui(Oo,e)}function Ro(){ci(Oo),ci(To),ci(Do)}function Ao(t){Lo(Do.current);var e=Lo(Oo.current),n=ht(e,t.type);e!==n&&(ui(To,t),ui(Oo,n))}function Fo(t){To.current===t&&(ci(Oo),ci(To))}var Io=li(0);function No(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var jo=null,Vo=null,Bo=!1;function Wo(t,e){var n=Bl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Ho(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function Uo(t){if(Bo){var e=Vo;if(e){var n=e;if(!Ho(t,e)){if(!(e=Qr(n.nextSibling))||!Ho(t,e))return t.flags=-1025&t.flags|2,Bo=!1,void(jo=t);Wo(jo,n)}jo=t,Vo=Qr(e.firstChild)}else t.flags=-1025&t.flags|2,Bo=!1,jo=t}}function $o(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;jo=t}function Yo(t){if(t!==jo)return!1;if(!Bo)return $o(t),Bo=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Hr(e,t.memoizedProps))for(e=Vo;e;)Wo(t,e),e=Qr(e.nextSibling);if($o(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){Vo=Qr(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}Vo=null}}else Vo=jo?Qr(t.stateNode.nextSibling):null;return!0}function Qo(){Vo=jo=null,Bo=!1}var qo=[];function Xo(){for(var t=0;t<qo.length;t++)qo[t]._workInProgressVersionPrimary=null;qo.length=0}var Ko=_.ReactCurrentDispatcher,Go=_.ReactCurrentBatchConfig,Zo=0,Jo=null,ta=null,ea=null,na=!1,ra=!1;function ia(){throw Error(a(321))}function oa(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!cr(t[n],e[n]))return!1;return!0}function aa(t,e,n,r,i,o){if(Zo=o,Jo=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Ko.current=null===t||null===t.memoizedState?La:za,t=n(r,i),ra){o=0;do{if(ra=!1,!(25>o))throw Error(a(301));o+=1,ea=ta=null,e.updateQueue=null,Ko.current=Ra,t=n(r,i)}while(ra)}if(Ko.current=Da,e=null!==ta&&null!==ta.next,Zo=0,ea=ta=Jo=null,na=!1,e)throw Error(a(300));return t}function sa(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ea?Jo.memoizedState=ea=t:ea=ea.next=t,ea}function la(){if(null===ta){var t=Jo.alternate;t=null!==t?t.memoizedState:null}else t=ta.next;var e=null===ea?Jo.memoizedState:ea.next;if(null!==e)ea=e,ta=t;else{if(null===t)throw Error(a(310));t={memoizedState:(ta=t).memoizedState,baseState:ta.baseState,baseQueue:ta.baseQueue,queue:ta.queue,next:null},null===ea?Jo.memoizedState=ea=t:ea=ea.next=t}return ea}function ca(t,e){return"function"==typeof e?e(t):e}function ua(t){var e=la(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var r=ta,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,c=i;do{var u=c.lane;if((Zo&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===t?c.eagerState:t(r,c.action);else{var d={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=d,o=r):l=l.next=d,Jo.lanes|=u,Ns|=u}c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=s,cr(r,e.memoizedState)||(Fa=!0),e.memoizedState=r,e.baseState=o,e.baseQueue=l,n.lastRenderedState=r}return[e.memoizedState,n.dispatch]}function da(t){var e=la(),n=e.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=t;var r=n.dispatch,i=n.pending,o=e.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=t(o,s.action),s=s.next}while(s!==i);cr(o,e.memoizedState)||(Fa=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,r]}function fa(t,e,n){var r=e._getVersion;r=r(e._source);var i=e._workInProgressVersionPrimary;if(null!==i?t=i===r:(t=t.mutableReadLanes,(t=(Zo&t)===t)&&(e._workInProgressVersionPrimary=r,qo.push(e))),t)return n(e._source);throw qo.push(e),Error(a(350))}function ha(t,e,n,r){var i=Ts;if(null===i)throw Error(a(349));var o=e._getVersion,s=o(e._source),l=Ko.current,c=l.useState((function(){return fa(i,e,n)})),u=c[1],d=c[0];c=ea;var f=t.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=Jo;return t.memoizedState={refs:h,source:e,subscribe:r},l.useEffect((function(){h.getSnapshot=n,h.setSnapshot=u;var t=o(e._source);if(!cr(s,t)){t=n(e._source),cr(d,t)||(u(t),t=ul(m),i.mutableReadLanes|=t&i.pendingLanes),t=i.mutableReadLanes,i.entangledLanes|=t;for(var r=i.entanglements,a=t;0<a;){var l=31-He(a),c=1<<l;r[l]|=t,a&=~c}}}),[n,e,r]),l.useEffect((function(){return r(e._source,(function(){var t=h.getSnapshot,n=h.setSnapshot;try{n(t(e._source));var r=ul(m);i.mutableReadLanes|=r&i.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,r]),cr(p,n)&&cr(g,e)&&cr(f,r)||((t={pending:null,dispatch:null,lastRenderedReducer:ca,lastRenderedState:d}).dispatch=u=Ta.bind(null,Jo,t),c.queue=t,c.baseQueue=null,d=fa(i,e,n),c.memoizedState=c.baseState=d),d}function pa(t,e,n){return ha(la(),t,e,n)}function ga(t){var e=sa();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:ca,lastRenderedState:t}).dispatch=Ta.bind(null,Jo,t),[e.memoizedState,t]}function ma(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===(e=Jo.updateQueue)?(e={lastEffect:null},Jo.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t),t}function ba(t){return t={current:t},sa().memoizedState=t}function va(){return la().memoizedState}function ya(t,e,n,r){var i=sa();Jo.flags|=t,i.memoizedState=ma(1|e,n,void 0,void 0===r?null:r)}function xa(t,e,n,r){var i=la();r=void 0===r?null:r;var o=void 0;if(null!==ta){var a=ta.memoizedState;if(o=a.destroy,null!==r&&oa(r,a.deps))return void ma(e,n,o,r)}Jo.flags|=t,i.memoizedState=ma(1|e,n,o,r)}function _a(t,e){return ya(516,4,t,e)}function wa(t,e){return xa(516,4,t,e)}function ka(t,e){return xa(4,2,t,e)}function Sa(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Ma(t,e,n){return n=null!=n?n.concat([t]):null,xa(4,2,Sa.bind(null,e,t),n)}function Ea(){}function Ca(t,e){var n=la();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&oa(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function Pa(t,e){var n=la();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&oa(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Oa(t,e){var n=Hi();$i(98>n?98:n,(function(){t(!0)})),$i(97<n?97:n,(function(){var n=Go.transition;Go.transition=1;try{t(!1),e()}finally{Go.transition=n}}))}function Ta(t,e,n){var r=cl(),i=ul(t),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=e.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),e.pending=o,a=t.alternate,t===Jo||null!==a&&a===Jo)ra=na=!0;else{if(0===t.lanes&&(null===a||0===a.lanes)&&null!==(a=e.lastRenderedReducer))try{var s=e.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,cr(l,s))return}catch(t){}dl(t,i,r)}}var Da={readContext:oo,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},La={readContext:oo,useCallback:function(t,e){return sa().memoizedState=[t,void 0===e?null:e],t},useContext:oo,useEffect:_a,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,ya(4,2,Sa.bind(null,e,t),n)},useLayoutEffect:function(t,e){return ya(4,2,t,e)},useMemo:function(t,e){var n=sa();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=sa();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=Ta.bind(null,Jo,t),[r.memoizedState,t]},useRef:ba,useState:ga,useDebugValue:Ea,useDeferredValue:function(t){var e=ga(t),n=e[0],r=e[1];return _a((function(){var e=Go.transition;Go.transition=1;try{r(t)}finally{Go.transition=e}}),[t]),n},useTransition:function(){var t=ga(!1),e=t[0];return ba(t=Oa.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var r=sa();return r.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},ha(r,t,e,n)},useOpaqueIdentifier:function(){if(Bo){var t=!1,e=function(t){return{$$typeof:A,toString:t,valueOf:t}}((function(){throw t||(t=!0,n("r:"+(Xr++).toString(36))),Error(a(355))})),n=ga(e)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,ma(5,(function(){n("r:"+(Xr++).toString(36))}),void 0,null)),e}return ga(e="r:"+(Xr++).toString(36)),e},unstable_isNewReconciler:!1},za={readContext:oo,useCallback:Ca,useContext:oo,useEffect:wa,useImperativeHandle:Ma,useLayoutEffect:ka,useMemo:Pa,useReducer:ua,useRef:va,useState:function(){return ua(ca)},useDebugValue:Ea,useDeferredValue:function(t){var e=ua(ca),n=e[0],r=e[1];return wa((function(){var e=Go.transition;Go.transition=1;try{r(t)}finally{Go.transition=e}}),[t]),n},useTransition:function(){var t=ua(ca)[0];return[va().current,t]},useMutableSource:pa,useOpaqueIdentifier:function(){return ua(ca)[0]},unstable_isNewReconciler:!1},Ra={readContext:oo,useCallback:Ca,useContext:oo,useEffect:wa,useImperativeHandle:Ma,useLayoutEffect:ka,useMemo:Pa,useReducer:da,useRef:va,useState:function(){return da(ca)},useDebugValue:Ea,useDeferredValue:function(t){var e=da(ca),n=e[0],r=e[1];return wa((function(){var e=Go.transition;Go.transition=1;try{r(t)}finally{Go.transition=e}}),[t]),n},useTransition:function(){var t=da(ca)[0];return[va().current,t]},useMutableSource:pa,useOpaqueIdentifier:function(){return da(ca)[0]},unstable_isNewReconciler:!1},Aa=_.ReactCurrentOwner,Fa=!1;function Ia(t,e,n,r){e.child=null===t?Co(e,null,n,r):Eo(e,t.child,n,r)}function Na(t,e,n,r,i){n=n.render;var o=e.ref;return io(e,i),r=aa(t,e,n,r,o,i),null===t||Fa?(e.flags|=1,Ia(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,ns(t,e,i))}function ja(t,e,n,r,i,o){if(null===t){var a=n.type;return"function"!=typeof a||Wl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Ul(n.type,null,r,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Va(t,e,a,r,i,o))}return a=t.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:dr)(i,r)&&t.ref===e.ref)?ns(t,e,o):(e.flags|=1,(t=Hl(a,r)).ref=e.ref,t.return=e,e.child=t)}function Va(t,e,n,r,i,o){if(null!==t&&dr(t.memoizedProps,r)&&t.ref===e.ref){if(Fa=!1,0==(o&i))return e.lanes=t.lanes,ns(t,e,o);0!=(16384&t.flags)&&(Fa=!0)}return Ha(t,e,n,r,o)}function Ba(t,e,n){var r=e.pendingProps,i=r.children,o=null!==t?t.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},yl(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},yl(0,t),null;e.memoizedState={baseLanes:0},yl(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,e.memoizedState=null):r=n,yl(0,r);return Ia(t,e,i,n),e.child}function Wa(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Ha(t,e,n,r,i){var o=mi(n)?pi:fi.current;return o=gi(e,o),io(e,i),n=aa(t,e,n,r,o,i),null===t||Fa?(e.flags|=1,Ia(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~i,ns(t,e,i))}function Ua(t,e,n,r,i){if(mi(n)){var o=!0;xi(e)}else o=!1;if(io(e,i),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),yo(e,n,r),_o(e,n,r,i),r=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?oo(c):gi(e,c=mi(n)?pi:fi.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&xo(e,a,r,c),ao=!1;var f=e.memoizedState;a.state=f,ho(e,r,a,i),l=e.memoizedState,s!==r||f!==l||hi.current||ao?("function"==typeof u&&(mo(e,n,u,r),l=e.memoizedState),(s=ao||vo(e,n,s,r,f,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4)):("function"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(e.flags|=4),r=!1)}else{a=e.stateNode,lo(t,e),s=e.memoizedProps,c=e.type===e.elementType?s:Ki(e.type,s),a.props=c,d=e.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?oo(l):gi(e,l=mi(n)?pi:fi.current);var h=n.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&xo(e,a,r,l),ao=!1,f=e.memoizedState,a.state=f,ho(e,r,a,i);var p=e.memoizedState;s!==d||f!==p||hi.current||ao?("function"==typeof h&&(mo(e,n,h,r),p=e.memoizedState),(c=ao||vo(e,n,c,r,f,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=256),e.memoizedProps=r,e.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&f===t.memoizedState||(e.flags|=256),r=!1)}return $a(t,e,n,r,o,i)}function $a(t,e,n,r,i,o){Wa(t,e);var a=0!=(64&e.flags);if(!r&&!a)return i&&_i(e,n,!1),ns(t,e,o);r=e.stateNode,Aa.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.flags|=1,null!==t&&a?(e.child=Eo(e,t.child,null,o),e.child=Eo(e,null,s,o)):Ia(t,e,s,o),e.memoizedState=r.state,i&&_i(e,n,!0),e.child}function Ya(t){var e=t.stateNode;e.pendingContext?vi(0,e.pendingContext,e.pendingContext!==e.context):e.context&&vi(0,e.context,!1),zo(t,e.containerInfo)}var Qa,qa,Xa,Ka={dehydrated:null,retryLane:0};function Ga(t,e,n){var r,i=e.pendingProps,o=Io.current,a=!1;return(r=0!=(64&e.flags))||(r=(null===t||null!==t.memoizedState)&&0!=(2&o)),r?(a=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),ui(Io,1&o),null===t?(void 0!==i.fallback&&Uo(e),t=i.children,o=i.fallback,a?(t=Za(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ka,t):"number"==typeof i.unstable_expectedLoadTime?(t=Za(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ka,e.lanes=33554432,t):((n=Yl({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,a?(i=function(t,e,n,r,i){var o=e.mode,a=t.child;t=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&e.child!==a?((n=e.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=a,a.nextEffect=null):e.firstEffect=e.lastEffect=null):n=Hl(a,s),null!==t?r=Hl(t,r):(r=$l(r,o,i,null)).flags|=2,r.return=e,n.return=e,n.sibling=r,e.child=n,r}(t,e,i.children,i.fallback,n),a=e.child,o=t.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=t.childLanes&~n,e.memoizedState=Ka,i):(n=function(t,e,n,r){var i=t.child;return t=i.sibling,n=Hl(i,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=r),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,i.children,n),e.memoizedState=null,n))}function Za(t,e,n,r){var i=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=Yl(e,i,0,null),n=$l(n,i,r,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function Ja(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),ro(t.return,e)}function ts(t,e,n,r,i,o){var a=t.memoizedState;null===a?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=e,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function es(t,e,n){var r=e.pendingProps,i=r.revealOrder,o=r.tail;if(Ia(t,e,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&Ja(t,n);else if(19===t.tag)Ja(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(ui(Io,r),0==(2&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(n=e.child,i=null;null!==n;)null!==(t=n.alternate)&&null===No(t)&&(i=n),n=n.sibling;null===(n=i)?(i=e.child,e.child=null):(i=n.sibling,n.sibling=null),ts(e,!1,i,n,o,e.lastEffect);break;case"backwards":for(n=null,i=e.child,e.child=null;null!==i;){if(null!==(t=i.alternate)&&null===No(t)){e.child=i;break}t=i.sibling,i.sibling=n,n=i,i=t}ts(e,!0,n,null,o,e.lastEffect);break;case"together":ts(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function ns(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),Ns|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(n=Hl(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Hl(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function rs(t,e){if(!Bo)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e||null===t.tail?t.tail=null:t.tail.sibling=null:r.sibling=null}}function is(t,e,n){var r=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mi(e.type)&&bi(),null;case 3:return Ro(),ci(hi),ci(fi),Xo(),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(Yo(e)?e.flags|=4:r.hydrate||(e.flags|=256)),null;case 5:Fo(e);var o=Lo(Do.current);if(n=e.type,null!==t&&null!=e.stateNode)qa(t,e,n,r),t.ref!==e.ref&&(e.flags|=128);else{if(!r){if(null===e.stateNode)throw Error(a(166));return null}if(t=Lo(Oo.current),Yo(e)){r=e.stateNode,n=e.type;var s=e.memoizedProps;switch(r[Gr]=e,r[Zr]=s,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(t=0;t<Mr.length;t++)Or(Mr[t],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":tt(r,s),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Or("invalid",r);break;case"textarea":lt(r,s),Or("invalid",r)}for(var c in kt(n,s),t=null,s)s.hasOwnProperty(c)&&(o=s[c],"children"===c?"string"==typeof o?r.textContent!==o&&(t=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(t=["children",""+o]):l.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Or("scroll",r));switch(n){case"input":K(r),rt(r,s,!0);break;case"textarea":K(r),ut(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=jr)}r=t,e.updateQueue=r,null!==r&&(e.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,t===dt&&(t=ft(n)),t===dt?"script"===n?((t=c.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof r.is?t=c.createElement(n,{is:r.is}):(t=c.createElement(n),"select"===n&&(c=t,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):t=c.createElementNS(t,n),t[Gr]=e,t[Zr]=r,Qa(t,e),e.stateNode=t,c=St(n,r),n){case"dialog":Or("cancel",t),Or("close",t),o=r;break;case"iframe":case"object":case"embed":Or("load",t),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)Or(Mr[o],t);o=r;break;case"source":Or("error",t),o=r;break;case"img":case"image":case"link":Or("error",t),Or("load",t),o=r;break;case"details":Or("toggle",t),o=r;break;case"input":tt(t,r),o=J(t,r),Or("invalid",t);break;case"option":o=ot(t,r);break;case"select":t._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Or("invalid",t);break;case"textarea":lt(t,r),o=st(t,r),Or("invalid",t);break;default:o=r}kt(n,o);var u=o;for(s in u)if(u.hasOwnProperty(s)){var d=u[s];"style"===s?_t(t,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&mt(t,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&bt(t,d):"number"==typeof d&&bt(t,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Or("scroll",t):null!=d&&x(t,s,d,c))}switch(n){case"input":K(t),rt(t,r,!1);break;case"textarea":K(t),ut(t);break;case"option":null!=r.value&&t.setAttribute("value",""+q(r.value));break;case"select":t.multiple=!!r.multiple,null!=(s=r.value)?at(t,!!r.multiple,s,!1):null!=r.defaultValue&&at(t,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(t.onclick=jr)}Wr(n,r)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)Xa(0,e,t.memoizedProps,r);else{if("string"!=typeof r&&null===e.stateNode)throw Error(a(166));n=Lo(Do.current),Lo(Oo.current),Yo(e)?(r=e.stateNode,n=e.memoizedProps,r[Gr]=e,r.nodeValue!==n&&(e.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=e,e.stateNode=r)}return null;case 13:return ci(Io),r=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(r=null!==r,n=!1,null===t?void 0!==e.memoizedProps.fallback&&Yo(e):n=null!==t.memoizedState,r&&!n&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?0===As&&(As=3):(0!==As&&3!==As||(As=4),null===Ts||0==(134217727&Ns)&&0==(134217727&js)||gl(Ts,Ls))),(r||n)&&(e.flags|=4),null);case 4:return Ro(),null===t&&Dr(e.stateNode.containerInfo),null;case 10:return no(e),null;case 19:if(ci(Io),null===(r=e.memoizedState))return null;if(s=0!=(64&e.flags),null===(c=r.rendering))if(s)rs(r,!1);else{if(0!==As||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(c=No(t))){for(e.flags|=64,rs(r,!1),null!==(s=c.updateQueue)&&(e.updateQueue=s,e.flags|=4),null===r.lastEffect&&(e.firstEffect=null),e.lastEffect=r.lastEffect,r=n,n=e.child;null!==n;)t=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=t,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,t=c.dependencies,s.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return ui(Io,1&Io.current|2),e.child}t=t.sibling}null!==r.tail&&Wi()>Hs&&(e.flags|=64,s=!0,rs(r,!1),e.lanes=33554432)}else{if(!s)if(null!==(t=No(c))){if(e.flags|=64,s=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Bo)return null!==(e=e.lastEffect=r.lastEffect)&&(e.nextEffect=null),null}else 2*Wi()-r.renderingStartTime>Hs&&1073741824!==n&&(e.flags|=64,s=!0,rs(r,!1),e.lanes=33554432);r.isBackwards?(c.sibling=e.child,e.child=c):(null!==(n=r.last)?n.sibling=c:e.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=e.lastEffect,r.renderingStartTime=Wi(),n.sibling=null,e=Io.current,ui(Io,s?1&e|2:1&e),n):null;case 23:case 24:return xl(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function os(t){switch(t.tag){case 1:mi(t.type)&&bi();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Ro(),ci(hi),ci(fi),Xo(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return Fo(t),null;case 13:return ci(Io),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return ci(Io),null;case 4:return Ro(),null;case 10:return no(t),null;case 23:case 24:return xl(),null;default:return null}}function as(t,e){try{var n="",r=e;do{n+=Y(r),r=r.return}while(r);var i=n}catch(t){i="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:i}}function ss(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}Qa=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(t,e,n,r){var o=t.memoizedProps;if(o!==r){t=e.stateNode,Lo(Oo.current);var a,s=null;switch(n){case"input":o=J(t,o),r=J(t,r),s=[];break;case"option":o=ot(t,o),r=ot(t,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=st(t,o),r=st(t,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(t.onclick=jr)}for(d in kt(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var c=o[d];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var u=r[d];if(c=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&u!==c&&(null!=u||null!=c))if("style"===d)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(d,n)),n=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Or("scroll",t),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===A?u.toString():(s=s||[]).push(d,u))}n&&(s=s||[]).push("style",n);var d=s;(e.updateQueue=d)&&(e.flags|=4)}},Xa=function(t,e,n,r){n!==r&&(e.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function cs(t,e,n){(n=co(-1,n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){Qs||(Qs=!0,qs=r),ss(0,e)},n}function us(t,e,n){(n=co(-1,n)).tag=3;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var i=e.value;n.payload=function(){return ss(0,e),r(i)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Xs?Xs=new Set([this]):Xs.add(this),ss(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function fs(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Il(t,e)}else e.current=null}function hs(t,e){switch(e.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,r=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:Ki(e.type,n),r),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&Yr(e.stateNode.containerInfo))}throw Error(a(163))}function ps(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var r=t.create;t.destroy=r()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var i=t;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Rl(n,t),zl(n,t)),t=r}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(r=n.elementType===n.type?e.memoizedProps:Ki(n.type,e.memoizedProps),t.componentDidUpdate(r,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&po(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}po(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&Wr(n.type,n.memoizedProps)&&t.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_e(n)))))}throw Error(a(163))}function gs(t,e){for(var n=t;;){if(5===n.tag){var r=n.stateNode;if(e)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=xt("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(t,e){if(ki&&"function"==typeof ki.onCommitFiberUnmount)try{ki.onCommitFiberUnmount(wi,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Rl(e,n);else{r=e;try{i()}catch(t){Il(r,t)}}n=n.next}while(n!==t)}break;case 1:if(fs(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Il(e,t)}break;case 5:fs(e);break;case 4:ws(t,e)}}function bs(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function vs(t){return 5===t.tag||3===t.tag||4===t.tag}function ys(t){t:{for(var e=t.return;null!==e;){if(vs(e))break t;e=e.return}throw Error(a(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:e=e.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(bt(e,""),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||vs(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}r?xs(t,n,e):_s(t,n,e)}function xs(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=jr));else if(4!==r&&null!==(t=t.child))for(xs(t,e,n),t=t.sibling;null!==t;)xs(t,e,n),t=t.sibling}function _s(t,e,n){var r=t.tag,i=5===r||6===r;if(i)t=i?t.stateNode:t.stateNode.instance,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==r&&null!==(t=t.child))for(_s(t,e,n),t=t.sibling;null!==t;)_s(t,e,n),t=t.sibling}function ws(t,e){for(var n,r,i=e,o=!1;;){if(!o){o=i.return;t:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break t;case 3:case 4:n=n.containerInfo,r=!0;break t}o=o.return}o=!0}if(5===i.tag||6===i.tag){t:for(var s=t,l=i,c=l;;)if(ms(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break t;for(;null===c.sibling;){if(null===c.return||c.return===l)break t;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(ms(t,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ks(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(t=r.destroy,r.destroy=void 0,void 0!==t&&t()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=e.stateNode)){r=e.memoizedProps;var i=null!==t?t.memoizedProps:r;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[Zr]=r,"input"===t&&"radio"===r.type&&null!=r.name&&et(n,r),St(t,i),e=St(t,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?_t(n,l):"dangerouslySetInnerHTML"===s?mt(n,l):"children"===s?bt(n,l):x(n,s,l,e)}switch(t){case"input":nt(n,r);break;case"textarea":ct(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?at(n,!!r.multiple,o,!1):t!==!!r.multiple&&(null!=r.defaultValue?at(n,!!r.multiple,r.defaultValue,!0):at(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(a(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((n=e.stateNode).hydrate&&(n.hydrate=!1,_e(n.containerInfo)));case 13:return null!==e.memoizedState&&(Ws=Wi(),gs(e.child,!0)),void Ss(e);case 19:return void Ss(e);case 23:case 24:return void gs(e,null!==e.memoizedState)}throw Error(a(163))}function Ss(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new ds),e.forEach((function(e){var r=jl.bind(null,t,e);n.has(e)||(n.add(e),e.then(r,r))}))}}function Ms(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Es=Math.ceil,Cs=_.ReactCurrentDispatcher,Ps=_.ReactCurrentOwner,Os=0,Ts=null,Ds=null,Ls=0,zs=0,Rs=li(0),As=0,Fs=null,Is=0,Ns=0,js=0,Vs=0,Bs=null,Ws=0,Hs=1/0;function Us(){Hs=Wi()+500}var $s,Ys=null,Qs=!1,qs=null,Xs=null,Ks=!1,Gs=null,Zs=90,Js=[],tl=[],el=null,nl=0,rl=null,il=-1,ol=0,al=0,sl=null,ll=!1;function cl(){return 0!=(48&Os)?Wi():-1!==il?il:il=Wi()}function ul(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hi()?1:2;if(0===ol&&(ol=Is),0!==Xi.transition){0!==al&&(al=null!==Bs?Bs.pendingLanes:0),t=ol;var e=4186112&~al;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hi(),t=je(0!=(4&Os)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),ol)}function dl(t,e,n){if(50<nl)throw nl=0,rl=null,Error(a(185));if(null===(t=fl(t,e)))return null;We(t,e,n),t===Ts&&(js|=e,4===As&&gl(t,Ls));var r=Hi();1===e?0!=(8&Os)&&0==(48&Os)?ml(t):(hl(t,n),0===Os&&(Us(),Qi())):(0==(4&Os)||98!==r&&99!==r||(null===el?el=new Set([t]):el.add(t)),hl(t,n)),Bs=t}function fl(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function hl(t,e){for(var n=t.callbackNode,r=t.suspendedLanes,i=t.pingedLanes,o=t.expirationTimes,s=t.pendingLanes;0<s;){var l=31-He(s),c=1<<l,u=o[l];if(-1===u){if(0==(c&r)||0!=(c&i)){u=e,Fe(c);var d=Ae;o[l]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=e&&(t.expiredLanes|=c);s&=~c}if(r=Ie(t,t===Ts?Ls:0),e=Ae,0===r)null!==n&&(n!==Fi&&Ei(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Fi&&Ei(n)}15===e?(n=ml.bind(null,t),null===Ni?(Ni=[n],ji=Mi(Di,qi)):Ni.push(n),n=Fi):14===e?n=Yi(99,ml.bind(null,t)):(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),n=Yi(n,pl.bind(null,t))),t.callbackPriority=e,t.callbackNode=n}}function pl(t){if(il=-1,al=ol=0,0!=(48&Os))throw Error(a(327));var e=t.callbackNode;if(Ll()&&t.callbackNode!==e)return null;var n=Ie(t,t===Ts?Ls:0);if(0===n)return null;var r=n,i=Os;Os|=16;var o=kl();for(Ts===t&&Ls===r||(Us(),_l(t,r));;)try{El();break}catch(e){wl(t,e)}if(eo(),Cs.current=o,Os=i,null!==Ds?r=0:(Ts=null,Ls=0,r=As),0!=(Is&js))_l(t,0);else if(0!==r){if(2===r&&(Os|=64,t.hydrate&&(t.hydrate=!1,Yr(t.containerInfo)),0!==(n=Ne(t))&&(r=Sl(t,n))),1===r)throw e=Fs,_l(t,0),gl(t,n),hl(t,Wi()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Ol(t);break;case 3:if(gl(t,n),(62914560&n)===n&&10<(r=Ws+500-Wi())){if(0!==Ie(t,0))break;if(((i=t.suspendedLanes)&n)!==n){cl(),t.pingedLanes|=t.suspendedLanes&i;break}t.timeoutHandle=Ur(Ol.bind(null,t),r);break}Ol(t);break;case 4:if(gl(t,n),(4186112&n)===n)break;for(r=t.eventTimes,i=-1;0<n;){var s=31-He(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Wi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Es(n/1960))-n)){t.timeoutHandle=Ur(Ol.bind(null,t),n);break}Ol(t);break;default:throw Error(a(329))}}return hl(t,Wi()),t.callbackNode===e?pl.bind(null,t):null}function gl(t,e){for(e&=~Vs,e&=~js,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-He(e),r=1<<n;t[n]=-1,e&=~r}}function ml(t){if(0!=(48&Os))throw Error(a(327));if(Ll(),t===Ts&&0!=(t.expiredLanes&Ls)){var e=Ls,n=Sl(t,e);0!=(Is&js)&&(n=Sl(t,e=Ie(t,e)))}else n=Sl(t,e=Ie(t,0));if(0!==t.tag&&2===n&&(Os|=64,t.hydrate&&(t.hydrate=!1,Yr(t.containerInfo)),0!==(e=Ne(t))&&(n=Sl(t,e))),1===n)throw n=Fs,_l(t,0),gl(t,e),hl(t,Wi()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Ol(t),hl(t,Wi()),null}function bl(t,e){var n=Os;Os|=1;try{return t(e)}finally{0===(Os=n)&&(Us(),Qi())}}function vl(t,e){var n=Os;Os&=-2,Os|=8;try{return t(e)}finally{0===(Os=n)&&(Us(),Qi())}}function yl(t,e){ui(Rs,zs),zs|=e,Is|=e}function xl(){zs=Rs.current,ci(Rs)}function _l(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,$r(n)),null!==Ds)for(n=Ds.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bi();break;case 3:Ro(),ci(hi),ci(fi),Xo();break;case 5:Fo(r);break;case 4:Ro();break;case 13:case 19:ci(Io);break;case 10:no(r);break;case 23:case 24:xl()}n=n.return}Ts=t,Ds=Hl(t.current,null),Ls=zs=Is=e,As=0,Fs=null,Vs=js=Ns=0}function wl(t,e){for(;;){var n=Ds;try{if(eo(),Ko.current=Da,na){for(var r=Jo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}na=!1}if(Zo=0,ea=ta=Jo=null,ra=!1,Ps.current=null,null===n||null===n.return){As=1,Fs=e,Ds=null;break}t:{var o=t,a=n.return,s=n,l=e;if(e=Ls,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Io.current),f=a;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var b=new Set;b.add(c),f.updateQueue=b}else m.add(c);if(0==(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var v=co(-1,1);v.tag=2,uo(s,v)}s.lanes|=1;break t}l=void 0,s=e;var y=o.pingCache;if(null===y?(y=o.pingCache=new ls,l=new Set,y.set(c,l)):void 0===(l=y.get(c))&&(l=new Set,y.set(c,l)),!l.has(s)){l.add(s);var x=Nl.bind(null,o,c,s);c.then(x,x)}f.flags|=4096,f.lanes=e;break t}f=f.return}while(null!==f);l=Error((Q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==As&&(As=2),l=as(l,s),f=a;do{switch(f.tag){case 3:o=l,f.flags|=4096,e&=-e,f.lanes|=e,fo(f,cs(0,o,e));break t;case 1:o=l;var _=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Xs||!Xs.has(w)))){f.flags|=4096,e&=-e,f.lanes|=e,fo(f,us(f,o,e));break t}}f=f.return}while(null!==f)}Pl(n)}catch(t){e=t,Ds===n&&null!==n&&(Ds=n=n.return);continue}break}}function kl(){var t=Cs.current;return Cs.current=Da,null===t?Da:t}function Sl(t,e){var n=Os;Os|=16;var r=kl();for(Ts===t&&Ls===e||_l(t,e);;)try{Ml();break}catch(e){wl(t,e)}if(eo(),Os=n,Cs.current=r,null!==Ds)throw Error(a(261));return Ts=null,Ls=0,As}function Ml(){for(;null!==Ds;)Cl(Ds)}function El(){for(;null!==Ds&&!Ci();)Cl(Ds)}function Cl(t){var e=$s(t.alternate,t,zs);t.memoizedProps=t.pendingProps,null===e?Pl(t):Ds=e,Ps.current=null}function Pl(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=is(n,e,zs)))return void(Ds=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&zs)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=os(e)))return n.flags&=2047,void(Ds=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(Ds=e);Ds=e=t}while(null!==e);0===As&&(As=5)}function Ol(t){var e=Hi();return $i(99,Tl.bind(null,t,e)),null}function Tl(t,e){do{Ll()}while(null!==Gs);if(0!=(48&Os))throw Error(a(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(a(177));t.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=t.pendingLanes&~i;t.pendingLanes=i,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=i,t.mutableReadLanes&=i,t.entangledLanes&=i,i=t.entanglements;for(var s=t.eventTimes,l=t.expirationTimes;0<o;){var c=31-He(o),u=1<<c;i[c]=0,s[c]=-1,l[c]=-1,o&=~u}if(null!==el&&0==(24&r)&&el.has(t)&&el.delete(t),t===Ts&&(Ds=Ts=null,Ls=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Os,Os|=32,Ps.current=null,Vr=qe,mr(s=gr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else t:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,o=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(t){l=null;break t}var d=0,f=-1,h=-1,p=0,g=0,m=s,b=null;e:for(;;){for(var v;m!==l||0!==o&&3!==m.nodeType||(f=d+o),m!==c||0!==u&&3!==m.nodeType||(h=d+u),3===m.nodeType&&(d+=m.nodeValue.length),null!==(v=m.firstChild);)b=m,m=v;for(;;){if(m===s)break e;if(b===l&&++p===o&&(f=d),b===c&&++g===u&&(h=d),null!==(v=m.nextSibling))break;b=(m=b).parentNode}m=v}l=-1===f||-1===h?null:{start:f,end:h}}else l=null;l=l||{start:0,end:0}}else l=null;Br={focusedElem:s,selectionRange:l},qe=!1,sl=null,ll=!1,Ys=r;do{try{Dl()}catch(t){if(null===Ys)throw Error(a(330));Il(Ys,t),Ys=Ys.nextEffect}}while(null!==Ys);sl=null,Ys=r;do{try{for(s=t;null!==Ys;){var y=Ys.flags;if(16&y&&bt(Ys.stateNode,""),128&y){var x=Ys.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&y){case 2:ys(Ys),Ys.flags&=-3;break;case 6:ys(Ys),Ys.flags&=-3,ks(Ys.alternate,Ys);break;case 1024:Ys.flags&=-1025;break;case 1028:Ys.flags&=-1025,ks(Ys.alternate,Ys);break;case 4:ks(Ys.alternate,Ys);break;case 8:ws(s,l=Ys);var w=l.alternate;bs(l),null!==w&&bs(w)}Ys=Ys.nextEffect}}catch(t){if(null===Ys)throw Error(a(330));Il(Ys,t),Ys=Ys.nextEffect}}while(null!==Ys);if(_=Br,x=gr(),y=_.focusedElem,s=_.selectionRange,x!==y&&y&&y.ownerDocument&&pr(y.ownerDocument.documentElement,y)){null!==s&&mr(y)&&(x=s.start,void 0===(_=s.end)&&(_=x),"selectionStart"in y?(y.selectionStart=x,y.selectionEnd=Math.min(_,y.value.length)):(_=(x=y.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),l=y.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!_.extend&&w>s&&(l=s,s=w,w=l),l=hr(y,w),o=hr(y,s),l&&o&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==o.node||_.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),w>s?(_.addRange(x),_.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),_.addRange(x))))),x=[];for(_=y;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<x.length;y++)(_=x[y]).element.scrollLeft=_.left,_.element.scrollTop=_.top}qe=!!Vr,Br=Vr=null,t.current=n,Ys=r;do{try{for(y=t;null!==Ys;){var k=Ys.flags;if(36&k&&ps(y,Ys.alternate,Ys),128&k){x=void 0;var S=Ys.ref;if(null!==S){var M=Ys.stateNode;Ys.tag,x=M,"function"==typeof S?S(x):S.current=x}}Ys=Ys.nextEffect}}catch(t){if(null===Ys)throw Error(a(330));Il(Ys,t),Ys=Ys.nextEffect}}while(null!==Ys);Ys=null,Ii(),Os=i}else t.current=n;if(Ks)Ks=!1,Gs=t,Zs=e;else for(Ys=r;null!==Ys;)e=Ys.nextEffect,Ys.nextEffect=null,8&Ys.flags&&((k=Ys).sibling=null,k.stateNode=null),Ys=e;if(0===(r=t.pendingLanes)&&(Xs=null),1===r?t===rl?nl++:(nl=0,rl=t):nl=0,n=n.stateNode,ki&&"function"==typeof ki.onCommitFiberRoot)try{ki.onCommitFiberRoot(wi,n,void 0,64==(64&n.current.flags))}catch(t){}if(hl(t,Wi()),Qs)throw Qs=!1,t=qs,qs=null,t;return 0!=(8&Os)||Qi(),null}function Dl(){for(;null!==Ys;){var t=Ys.alternate;ll||null===sl||(0!=(8&Ys.flags)?Jt(Ys,sl)&&(ll=!0):13===Ys.tag&&Ms(t,Ys)&&Jt(Ys,sl)&&(ll=!0));var e=Ys.flags;0!=(256&e)&&hs(t,Ys),0==(512&e)||Ks||(Ks=!0,Yi(97,(function(){return Ll(),null}))),Ys=Ys.nextEffect}}function Ll(){if(90!==Zs){var t=97<Zs?97:Zs;return Zs=90,$i(t,Al)}return!1}function zl(t,e){Js.push(e,t),Ks||(Ks=!0,Yi(97,(function(){return Ll(),null})))}function Rl(t,e){tl.push(e,t),Ks||(Ks=!0,Yi(97,(function(){return Ll(),null})))}function Al(){if(null===Gs)return!1;var t=Gs;if(Gs=null,0!=(48&Os))throw Error(a(331));var e=Os;Os|=32;var n=tl;tl=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(t){if(null===o)throw Error(a(330));Il(o,t)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(t){if(null===o)throw Error(a(330));Il(o,t)}}for(l=t.current.firstEffect;null!==l;)t=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=t;return Os=e,Qi(),!0}function Fl(t,e,n){uo(t,e=cs(0,e=as(n,e),1)),e=cl(),null!==(t=fl(t,1))&&(We(t,1,e),hl(t,e))}function Il(t,e){if(3===t.tag)Fl(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){Fl(n,t,e);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Xs||!Xs.has(r))){var i=us(n,t=as(e,t),1);if(uo(n,i),i=cl(),null!==(n=fl(n,1)))We(n,1,i),hl(n,i);else if("function"==typeof r.componentDidCatch&&(null===Xs||!Xs.has(r)))try{r.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function Nl(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),e=cl(),t.pingedLanes|=t.suspendedLanes&n,Ts===t&&(Ls&n)===n&&(4===As||3===As&&(62914560&Ls)===Ls&&500>Wi()-Ws?_l(t,0):Vs|=n),hl(t,e)}function jl(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hi()?1:2:(0===ol&&(ol=Is),0===(e=Ve(62914560&~ol))&&(e=4194304))),n=cl(),null!==(t=fl(t,e))&&(We(t,e,n),hl(t,n))}function Vl(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bl(t,e,n,r){return new Vl(t,e,n,r)}function Wl(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Hl(t,e){var n=t.alternate;return null===n?((n=Bl(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Ul(t,e,n,r,i,o){var s=2;if(r=t,"function"==typeof t)Wl(t)&&(s=1);else if("string"==typeof t)s=5;else t:switch(t){case S:return $l(n.children,i,o,e);case F:s=8,i|=16;break;case M:s=8,i|=1;break;case E:return(t=Bl(12,n,e,8|i)).elementType=E,t.type=E,t.lanes=o,t;case T:return(t=Bl(13,n,e,i)).type=T,t.elementType=T,t.lanes=o,t;case D:return(t=Bl(19,n,e,i)).elementType=D,t.lanes=o,t;case I:return Yl(n,i,o,e);case N:return(t=Bl(24,n,e,i)).elementType=N,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case C:s=10;break t;case P:s=9;break t;case O:s=11;break t;case L:s=14;break t;case z:s=16,r=null;break t;case R:s=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Bl(s,n,e,i)).elementType=t,e.type=r,e.lanes=o,e}function $l(t,e,n,r){return(t=Bl(7,t,r,e)).lanes=n,t}function Yl(t,e,n,r){return(t=Bl(23,t,r,e)).elementType=I,t.lanes=n,t}function Ql(t,e,n){return(t=Bl(6,t,null,e)).lanes=n,t}function ql(t,e,n){return(e=Bl(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Xl(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Be(0),this.expirationTimes=Be(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Be(0),this.mutableSourceEagerHydrationData=null}function Kl(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}function Gl(t,e,n,r){var i=e.current,o=cl(),s=ul(i);t:if(n){e:{if(Xt(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(mi(c)){n=yi(n,c,l);break t}}n=l}else n=di;return null===e.context?e.context=n:e.pendingContext=n,(e=co(o,s)).payload={element:t},null!==(r=void 0===r?null:r)&&(e.callback=r),uo(i,e),dl(i,s,o),s}function Zl(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Jl(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function tc(t,e){Jl(t,e),(t=t.alternate)&&Jl(t,e)}function ec(t,e,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Xl(t,e,null!=n&&!0===n.hydrate),e=Bl(3,null,null,2===e?7:1===e?3:0),n.current=e,e.stateNode=n,so(e),t[Jr]=n.current,Dr(8===t.nodeType?t.parentNode:t),r)for(t=0;t<r.length;t++){var i=(e=r[t])._getVersion;i=i(e._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[e,i]:n.mutableSourceEagerHydrationData.push(e,i)}this._internalRoot=n}function nc(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function rc(t,e,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var t=Zl(a);s.call(t)}}Gl(e,a,t,i)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new ec(t,0,e?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var t=Zl(a);l.call(t)}}vl((function(){Gl(e,a,t,i)}))}return Zl(a)}function ic(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(e))throw Error(a(200));return Kl(t,e,null,n)}$s=function(t,e,n){var r=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||hi.current)Fa=!0;else{if(0==(n&r)){switch(Fa=!1,e.tag){case 3:Ya(e),Qo();break;case 5:Ao(e);break;case 1:mi(e.type)&&xi(e);break;case 4:zo(e,e.stateNode.containerInfo);break;case 10:r=e.memoizedProps.value;var i=e.type._context;ui(Gi,i._currentValue),i._currentValue=r;break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?Ga(t,e,n):(ui(Io,1&Io.current),null!==(e=ns(t,e,n))?e.sibling:null);ui(Io,1&Io.current);break;case 19:if(r=0!=(n&e.childLanes),0!=(64&t.flags)){if(r)return es(t,e,n);e.flags|=64}if(null!==(i=e.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ui(Io,Io.current),r)break;return null;case 23:case 24:return e.lanes=0,Ba(t,e,n)}return ns(t,e,n)}Fa=0!=(16384&t.flags)}else Fa=!1;switch(e.lanes=0,e.tag){case 2:if(r=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=gi(e,fi.current),io(e,n),i=aa(null,e,r,t,i,n),e.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,mi(r)){var o=!0;xi(e)}else o=!1;e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,so(e);var s=r.getDerivedStateFromProps;"function"==typeof s&&mo(e,r,s,t),i.updater=bo,e.stateNode=i,i._reactInternals=e,_o(e,r,t,n),e=$a(null,e,r,!0,o,n)}else e.tag=0,Ia(null,e,i,n),e=e.child;return e;case 16:i=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,i=(o=i._init)(i._payload),e.type=i,o=e.tag=function(t){if("function"==typeof t)return Wl(t)?1:0;if(null!=t){if((t=t.$$typeof)===O)return 11;if(t===L)return 14}return 2}(i),t=Ki(i,t),o){case 0:e=Ha(null,e,i,t,n);break t;case 1:e=Ua(null,e,i,t,n);break t;case 11:e=Na(null,e,i,t,n);break t;case 14:e=ja(null,e,i,Ki(i.type,t),r,n);break t}throw Error(a(306,i,""))}return e;case 0:return r=e.type,i=e.pendingProps,Ha(t,e,r,i=e.elementType===r?i:Ki(r,i),n);case 1:return r=e.type,i=e.pendingProps,Ua(t,e,r,i=e.elementType===r?i:Ki(r,i),n);case 3:if(Ya(e),r=e.updateQueue,null===t||null===r)throw Error(a(282));if(r=e.pendingProps,i=null!==(i=e.memoizedState)?i.element:null,lo(t,e),ho(e,r,null,n),(r=e.memoizedState.element)===i)Qo(),e=ns(t,e,n);else{if((o=(i=e.stateNode).hydrate)&&(Vo=Qr(e.stateNode.containerInfo.firstChild),jo=e,o=Bo=!0),o){if(null!=(t=i.mutableSourceEagerHydrationData))for(i=0;i<t.length;i+=2)(o=t[i])._workInProgressVersionPrimary=t[i+1],qo.push(o);for(n=Co(e,null,r,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(t,e,r,n),Qo();e=e.child}return e;case 5:return Ao(e),null===t&&Uo(e),r=e.type,i=e.pendingProps,o=null!==t?t.memoizedProps:null,s=i.children,Hr(r,i)?s=null:null!==o&&Hr(r,o)&&(e.flags|=16),Wa(t,e),Ia(t,e,s,n),e.child;case 6:return null===t&&Uo(e),null;case 13:return Ga(t,e,n);case 4:return zo(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=Eo(e,null,r,n):Ia(t,e,r,n),e.child;case 11:return r=e.type,i=e.pendingProps,Na(t,e,r,i=e.elementType===r?i:Ki(r,i),n);case 7:return Ia(t,e,e.pendingProps,n),e.child;case 8:case 12:return Ia(t,e,e.pendingProps.children,n),e.child;case 10:t:{r=e.type._context,i=e.pendingProps,s=e.memoizedProps,o=i.value;var l=e.type._context;if(ui(Gi,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=cr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!hi.current){e=ns(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&o)){1===l.tag&&((u=co(-1,n&-n)).tag=2,uo(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ro(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===e.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===e){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ia(t,e,i.children,n),e=e.child}return e;case 9:return i=e.type,r=(o=e.pendingProps).children,io(e,n),r=r(i=oo(i,o.unstable_observedBits)),e.flags|=1,Ia(t,e,r,n),e.child;case 14:return o=Ki(i=e.type,e.pendingProps),ja(t,e,i,o=Ki(i.type,o),r,n);case 15:return Va(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,i=e.pendingProps,i=e.elementType===r?i:Ki(r,i),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,mi(r)?(t=!0,xi(e)):t=!1,io(e,n),yo(e,r,i),_o(e,r,i,n),$a(null,e,r,!0,t,n);case 19:return es(t,e,n);case 23:case 24:return Ba(t,e,n)}throw Error(a(156,e.tag))},ec.prototype.render=function(t){Gl(t,this._internalRoot,null,null)},ec.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Gl(null,t,null,(function(){e[Jr]=null}))},te=function(t){13===t.tag&&(dl(t,4,cl()),tc(t,4))},ee=function(t){13===t.tag&&(dl(t,67108864,cl()),tc(t,67108864))},ne=function(t){if(13===t.tag){var e=cl(),n=ul(t);dl(t,n,e),tc(t,n)}},re=function(t,e){return e()},Et=function(t,e,n){switch(e){case"input":if(nt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var i=ii(r);if(!i)throw Error(a(90));G(r),nt(r,i)}}}break;case"textarea":ct(t,n);break;case"select":null!=(e=n.value)&&at(t,!!n.multiple,e,!1)}},Lt=bl,zt=function(t,e,n,r,i){var o=Os;Os|=4;try{return $i(98,t.bind(null,e,n,r,i))}finally{0===(Os=o)&&(Us(),Qi())}},Rt=function(){0==(49&Os)&&(function(){if(null!==el){var t=el;el=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,hl(t,Wi())}))}Qi()}(),Ll())},At=function(t,e){var n=Os;Os|=2;try{return t(e)}finally{0===(Os=n)&&(Us(),Qi())}};var oc={Events:[ni,ri,ii,Tt,Dt,Ll,{current:!1}]},ac={findFiberByHostInstance:ei,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},sc={bundleType:ac.bundleType,version:ac.version,rendererPackageName:ac.rendererPackageName,rendererConfig:ac.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=Zt(t))?null:t.stateNode},findFiberByHostInstance:ac.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lc.isDisabled&&lc.supportsFiber)try{wi=lc.inject(sc),ki=lc}catch(gt){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=oc,e.createPortal=ic,e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw Error(a(268,Object.keys(t)))}return null===(t=Zt(e))?null:t.stateNode},e.flushSync=function(t,e){var n=Os;if(0!=(48&n))return t(e);Os|=1;try{if(t)return $i(99,t.bind(null,e))}finally{Os=n,Qi()}},e.hydrate=function(t,e,n){if(!nc(e))throw Error(a(200));return rc(null,t,e,!0,n)},e.render=function(t,e,n){if(!nc(e))throw Error(a(200));return rc(null,t,e,!1,n)},e.unmountComponentAtNode=function(t){if(!nc(t))throw Error(a(40));return!!t._reactRootContainer&&(vl((function(){rc(null,null,t,!1,(function(){t._reactRootContainer=null,t[Jr]=null}))})),!0)},e.unstable_batchedUpdates=bl,e.unstable_createPortal=function(t,e){return ic(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},e.unstable_renderSubtreeIntoContainer=function(t,e,n,r){if(!nc(n))throw Error(a(200));if(null==t||void 0===t._reactInternals)throw Error(a(38));return rc(t,e,n,!1,r)},e.version="17.0.2"},3935:(t,e,n)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(4448)},2408:(t,e,n)=>{"use strict";var r=n(7418),i=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,s=60110,l=60112;e.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;i=d("react.element"),o=d("react.portal"),e.Fragment=d("react.fragment"),e.StrictMode=d("react.strict_mode"),e.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),e.Suspense=d("react.suspense"),c=d("react.memo"),u=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}function b(){}function v(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(h(85));this.updater.enqueueSetState(this,t,e,"setState")},m.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},b.prototype=m.prototype;var y=v.prototype=new b;y.constructor=v,r(y,m.prototype),y.isPureReactComponent=!0;var x={current:null},_=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,n){var r,o={},a=null,s=null;if(null!=e)for(r in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)_.call(e,r)&&!w.hasOwnProperty(r)&&(o[r]=e[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(t&&t.defaultProps)for(r in l=t.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:t,key:a,ref:s,props:o,_owner:x.current}}function S(t){return"object"==typeof t&&null!==t&&t.$$typeof===i}var M=/\/+/g;function E(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function C(t,e,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=t),t=""===r?"."+E(l,0):r,Array.isArray(a)?(n="",null!=t&&(n=t.replace(M,"$&/")+"/"),C(a,e,n,"",(function(t){return t}))):null!=a&&(S(a)&&(a=function(t,e){return{$$typeof:i,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(M,"$&/")+"/")+t)),e.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=r+E(s=t[c],c);l+=C(s,e,n,u,a)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=f&&t[f]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),c=0;!(s=t.next()).done;)l+=C(s=s.value,e,n,u=r+E(s,c++),a);else if("object"===s)throw e=""+t,Error(h(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return l}function P(t,e,n){if(null==t)return t;var r=[],i=0;return C(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function O(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var T={current:null};function D(){var t=T.current;if(null===t)throw Error(h(321));return t}var L={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};e.Children={map:P,forEach:function(t,e,n){P(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return P(t,(function(){e++})),e},toArray:function(t){return P(t,(function(t){return t}))||[]},only:function(t){if(!S(t))throw Error(h(143));return t}},e.Component=m,e.PureComponent=v,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,e.cloneElement=function(t,e,n){if(null==t)throw Error(h(267,t));var o=r({},t.props),a=t.key,s=t.ref,l=t._owner;if(null!=e){if(void 0!==e.ref&&(s=e.ref,l=x.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(u in e)_.call(e,u)&&!w.hasOwnProperty(u)&&(o[u]=void 0===e[u]&&void 0!==c?c[u]:e[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var d=0;d<u;d++)c[d]=arguments[d+2];o.children=c}return{$$typeof:i,type:t.type,key:a,ref:s,props:o,_owner:l}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:s,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:l,render:t}},e.isValidElement=S,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:O}},e.memo=function(t,e){return{$$typeof:c,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return D().useCallback(t,e)},e.useContext=function(t,e){return D().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return D().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return D().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return D().useLayoutEffect(t,e)},e.useMemo=function(t,e){return D().useMemo(t,e)},e.useReducer=function(t,e,n){return D().useReducer(t,e,n)},e.useRef=function(t){return D().useRef(t)},e.useState=function(t){return D().useState(t)},e.version="17.0.2"},7294:(t,e,n)=>{"use strict";t.exports=n(2408)},53:(t,e)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,d=function(){if(null!==c)try{var t=e.unstable_now();c(!0,t),c=null}catch(t){throw setTimeout(d,0),t}};n=function(t){null!==c?setTimeout(n,0,t):(c=t,setTimeout(d,0))},r=function(t,e){u=setTimeout(t,e)},i=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},o=e.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,v=5,y=0;e.unstable_shouldYield=function(){return e.unstable_now()>=y},o=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<t?Math.floor(1e3/t):5};var x=new MessageChannel,_=x.port2;x.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();y=t+v;try{m(!0,t)?_.postMessage(null):(g=!1,m=null)}catch(t){throw _.postMessage(null),t}}else g=!1},n=function(t){m=t,g||(g=!0,_.postMessage(null))},r=function(t,n){b=f((function(){t(e.unstable_now())}),n)},i=function(){h(b),b=-1}}function w(t,e){var n=t.length;t.push(e);t:for(;;){var r=n-1>>>1,i=t[r];if(!(void 0!==i&&0<M(i,e)))break t;t[r]=e,t[n]=i,n=r}}function k(t){return void 0===(t=t[0])?null:t}function S(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var r=0,i=t.length;r<i;){var o=2*(r+1)-1,a=t[o],s=o+1,l=t[s];if(void 0!==a&&0>M(a,n))void 0!==l&&0>M(l,a)?(t[r]=l,t[s]=n,r=s):(t[r]=a,t[o]=n,r=o);else{if(!(void 0!==l&&0>M(l,n)))break t;t[r]=l,t[s]=n,r=s}}}return e}return null}function M(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var E=[],C=[],P=1,O=null,T=3,D=!1,L=!1,z=!1;function R(t){for(var e=k(C);null!==e;){if(null===e.callback)S(C);else{if(!(e.startTime<=t))break;S(C),e.sortIndex=e.expirationTime,w(E,e)}e=k(C)}}function A(t){if(z=!1,R(t),!L)if(null!==k(E))L=!0,n(F);else{var e=k(C);null!==e&&r(A,e.startTime-t)}}function F(t,n){L=!1,z&&(z=!1,i()),D=!0;var o=T;try{for(R(n),O=k(E);null!==O&&(!(O.expirationTime>n)||t&&!e.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,T=O.priorityLevel;var s=a(O.expirationTime<=n);n=e.unstable_now(),"function"==typeof s?O.callback=s:O===k(E)&&S(E),R(n)}else S(E);O=k(E)}if(null!==O)var l=!0;else{var c=k(C);null!==c&&r(A,c.startTime-n),l=!1}return l}finally{O=null,T=o,D=!1}}var I=o;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){L||D||(L=!0,n(F))},e.unstable_getCurrentPriorityLevel=function(){return T},e.unstable_getFirstCallbackNode=function(){return k(E)},e.unstable_next=function(t){switch(T){case 1:case 2:case 3:var e=3;break;default:e=T}var n=T;T=e;try{return t()}finally{T=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=I,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=T;T=t;try{return e()}finally{T=n}},e.unstable_scheduleCallback=function(t,o,a){var s=e.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,t){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return t={id:P++,callback:o,priorityLevel:t,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(t.sortIndex=a,w(C,t),null===k(E)&&t===k(C)&&(z?i():z=!0,r(A,a-s))):(t.sortIndex=l,w(E,t),L||D||(L=!0,n(F))),t},e.unstable_wrapCallback=function(t){var e=T;return function(){var n=T;T=e;try{return t.apply(this,arguments)}finally{T=n}}}},3840:(t,e,n)=>{"use strict";t.exports=n(53)},2632:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(7294),i=n(9269);e.default=function(){return r.createElement(r.Fragment,null,r.createElement(i.default,null))}},9269:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(7294),i=n(7294),o=n(5902);e.default=function(){var t=(0,i.useState)([]),e=t[0],n=t[1],a=(0,i.useState)([]),s=a[0],l=a[1];(0,i.useEffect)((function(){fetch("././api-data/cpi.json").then((function(t){return t.json()})).then((function(t){for(var e=[],r=129;r>8;r-=12){var i=parseFloat(t[0].CPI[r].toFixed(2));e.push(i)}e.reverse(),n(e);for(var o=[],a=0;a<e.length-1;a++){var s=((e[1+a]-e[a])/e[a]*100).toFixed(2);o.push(s)}o.unshift(NaN),l(o)}))}),[]);var c={type:"line",labels:["Oct 11","Oct 12","Oct 13","Oct 14","Oct 15","Oct 16","Oct 17","Oct 18","Oct 19","Oct 20","Oct 21"],animations:{y:{duration:2e3,delay:500}},datasets:[{label:"CPI In October",yAxisID:"A",data:e,fill:"start",backgroundColor:"rgba(0, 0, 0, 0.1)",borderColor:"red",tension:.4},{label:"CPI Percent Change From Prev Oct",yAxisID:"B",data:s,fill:"start",backgroundColor:"rgba(0, 0, 0, 0.1)",borderColor:"blue",tension:.4}]},u={options:{legend:{labels:{fontSize:24}},maintainAspectRatio:!1,responsive:!0,interaction:{mode:"index",intersect:!1},plugins:{title:{display:!0,font:{size:24,weight:600},color:"rgba(0, 0, 0, 0.8)",text:"Yearly October Consumer Price Index"}},scales:{x:{ticks:{font:{size:14}}},A:{type:"linear",display:!0,position:"left",ticks:{font:{size:14},callback:function(t,n,r){return"$"+t.toFixed(e)+".00"}},text:"CPI",max:290,stepSize:10},B:{type:"linear",display:!0,position:"right",grid:{drawOnChartArea:!1},text:"CPI Percentage Change",ticks:{font:{size:14},callback:function(t,e,n){return t.toFixed(s)+".00%"}}}}}};return r.createElement(r.Fragment,null,r.createElement("div",{id:"line-chart"},r.createElement(o.Line,{data:c,options:u.options})),r.createElement("div",{className:"description"},r.createElement("p",null,r.createElement("span",{className:"ital"},"The Consumer Price Index (CPI) is a measure of the average change over time in the prices paid by urban consumers for a market basket of consumer goods and services."),r.createElement("span",{title:"https://www.bls.gov/cpi/"},r.createElement("a",{href:"https://www.bls.gov/cpi/",target:"_blank"},"💡")))))}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=n(7294),e=n(3935),r=n(2632);e.render(t.createElement(r.default,null),document.querySelector("#root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,